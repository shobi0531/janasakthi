/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunk_ember_auto_import_"] = globalThis["webpackChunk_ember_auto_import_"] || []).push([["vendors-node_modules_ember-data_debug_dist_data-adapter_js-node_modules_ember-data_request-ut-73e281"],{

/***/ "./node_modules/@ember-data/debug/dist/data-adapter.js":
/*!*************************************************************!*\
  !*** ./node_modules/@ember-data/debug/dist/data-adapter.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ dataAdapter)\n/* harmony export */ });\n/* harmony import */ var _ember_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/array */ \"@ember/array\");\n/* harmony import */ var _ember_array__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_array__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_debug_data_adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/debug/data-adapter */ \"@ember/debug/data-adapter\");\n/* harmony import */ var _ember_debug_data_adapter__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_debug_data_adapter__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ember_object_observers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember/object/observers */ \"@ember/object/observers\");\n/* harmony import */ var _ember_object_observers__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ember_object_observers__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _ember_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ember/service */ \"@ember/service\");\n/* harmony import */ var _ember_service__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_ember_service__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _ember_data_request_utils_string__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ember-data/request-utils/string */ \"./node_modules/@ember-data/request-utils/dist/string.js\");\n/* harmony import */ var _ember_data_store__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ember-data/store */ \"./node_modules/@ember-data/store/dist/index.js\");\nvar _InspectorDataAdapter;function _classPrivateFieldInitSpec(e,t,a){_checkPrivateRedeclaration(e,t),t.set(e,a);}function _checkPrivateRedeclaration(e,t){if(t.has(e))throw new TypeError(\"Cannot initialize the same private elements twice on an object\");}const deferred=/* @__PURE__ */new WeakMap();function deferDecorator(proto,prop,desc){let map=deferred.get(proto);if(!map){map=/* @__PURE__ */new Map();deferred.set(proto,map);}map.set(prop,desc);}function findDeferredDecorator(target,prop){var _a;let cursor=target.prototype;while(cursor){let desc=(_a=deferred.get(cursor))==null?void 0:_a.get(prop);if(desc){return desc;}cursor=cursor.prototype;}}function decorateFieldV2(prototype,prop,decorators,initializer){let desc={configurable:true,enumerable:true,writable:true,initializer:null};if(initializer){desc.initializer=initializer;}for(let decorator of decorators){desc=decorator(prototype,prop,desc)||desc;}if(desc.initializer===void 0){Object.defineProperty(prototype,prop,desc);}else{deferDecorator(prototype,prop,desc);}}function initializeDeferredDecorator(target,prop){let desc=findDeferredDecorator(target.constructor,prop);if(desc){Object.defineProperty(target,prop,{enumerable:desc.enumerable,configurable:desc.configurable,writable:desc.writable,value:desc.initializer?desc.initializer.call(target):void 0});}}/**\n  # Overview\n\n  This package provides the `DataAdapter` which the [Ember Inspector](https://github.com/emberjs/ember-inspector)\n  uses to subscribe and retrieve information for the `data` tab in the inspector.\n\n  This package adds roughly .6 KB when minified and compressed to your application in production; however,\n  you can opt out of shipping this addon in production via options in `ember-cli-build.js`\n\n  ```js\n  let app = new EmberApp(defaults, {\n    emberData: {\n      includeDataAdapterInProduction: false\n    }\n  });\n  ```\n\n  When using `ember-data` as a dependency of your app, the default is to ship the inspector support to production.\n\n  When not using `ember-data` as a dependency but instead using EmberData via declaring specific `@ember-data/<package>`\n  dependencies the default is to not ship to production.\n\n  @module @ember-data/debug\n  @main @ember-data/debug\n*/const service=_ember_service__WEBPACK_IMPORTED_MODULE_3__.service??_ember_service__WEBPACK_IMPORTED_MODULE_3__.inject;const StoreTypesMap=new WeakMap();function debugInfo(){const relationships={};const expensiveProperties=[];const identifier=(0,_ember_data_store__WEBPACK_IMPORTED_MODULE_5__.recordIdentifierFor)(this);const fields=this.store.schema.fields(identifier);const attrGroup={name:'Attributes',properties:['id'],expand:true};const attributes=attrGroup.properties;const groups=[attrGroup];for(const field of fields.values()){switch(field.kind){case'attribute':attributes.push(field.name);break;case'belongsTo':case'hasMany':{let properties=relationships[field.kind];if(properties===undefined){properties=relationships[field.kind]=[];groups.push({name:field.kind,properties,expand:true});}properties.push(field.name);expensiveProperties.push(field.name);break;}}}groups.push({name:'Flags',properties:['isLoaded','hasDirtyAttributes','isSaving','isDeleted','isError','isNew','isValid'],expand:false});return{propertyInfo:{// include all other mixins / properties (not just the grouped ones)\nincludeOtherProperties:true,groups:groups,// don't pre-calculate unless cached\nexpensiveProperties:expensiveProperties}};}function installDebugInfo(ModelKlass){/**\n   Provides info about the model for debugging purposes\n   by grouping the properties into more semantic groups.\n    Meant to be used by debugging tools such as the Chrome Ember Extension.\n    - Groups all attributes in \"Attributes\" group.\n   - Groups all belongsTo relationships in \"Belongs To\" group.\n   - Groups all hasMany relationships in \"Has Many\" group.\n   - Groups all flags in \"Flags\" group.\n   - Flags relationship CPs as expensive properties.\n    @internal\n   */ModelKlass.prototype._debugInfo=debugInfo;}function typesMapFor(store){let typesMap=StoreTypesMap.get(store);if(typesMap===undefined){typesMap=new Map();StoreTypesMap.set(store,typesMap);}return typesMap;}/**\n  Implements `@ember/debug/data-adapter` with for EmberData\n  integration with the ember-inspector.\n\n  @class InspectorDataAdapter\n  @extends DataAdapter\n  @private\n*/var _store=/*#__PURE__*/new WeakMap();class InspectorDataAdapter extends (_ember_debug_data_adapter__WEBPACK_IMPORTED_MODULE_1___default()){constructor(...args){super(...args);_classPrivateFieldInitSpec(this,_store,(initializeDeferredDecorator(this,\"store\"),void 0));}/**\n    Specifies how records can be filtered based on the state of the record\n    Records returned will need to have a `filterValues`\n    property with a key for every name in the returned array\n     @method getFilters\n    @private\n    @return {Array} List of objects defining filters\n     The object should have a `name` and `desc` property\n  */getFilters(){return[{name:'isNew',desc:'New'},{name:'isModified',desc:'Modified'},{name:'isClean',desc:'Clean'}];}_nameToClass(type){return this.store.modelFor(type);}/**\n    Fetch the model types and observe them for changes.\n    Maintains the list of model types without needing the Model package for detection.\n     @method watchModelTypes\n    @private\n    @param {Function} typesAdded Callback to call to add types.\n    Takes an array of objects containing wrapped types (returned from `wrapModelType`).\n    @param {Function} typesUpdated Callback to call when a type has changed.\n    Takes an array of objects containing wrapped types.\n    @return {Function} Method to call to remove all observers\n  */watchModelTypes(typesAdded,typesUpdated){const{store}=this;const discoveredTypes=typesMapFor(store);const unsub=store.notifications.subscribe('resource',(identifier,notificationType)=>{if(notificationType==='added'){this.watchTypeIfUnseen(store,discoveredTypes,identifier.type,typesAdded,typesUpdated,_releaseMethods);}});const _releaseMethods=[()=>{store.notifications.unsubscribe(unsub);}];Object.keys(store.identifierCache._cache.resourcesByType).forEach(type=>{discoveredTypes.set(type,false);});// Add any models that were added during initialization of the app, before the inspector was opened\ndiscoveredTypes.forEach((_,type)=>{this.watchTypeIfUnseen(store,discoveredTypes,type,typesAdded,typesUpdated,_releaseMethods);});const release=()=>{_releaseMethods.forEach(fn=>fn());// reset the list so the models can be added if the inspector is re-opened\n// the entries are set to false instead of removed, since the models still exist in the app\n// we just need the inspector to become aware of them\ndiscoveredTypes.forEach((value,key)=>{discoveredTypes.set(key,false);});this.releaseMethods.removeObject(release);};this.releaseMethods.pushObject(release);return release;}/**\n   * Loop over the discovered types and use the callbacks from watchModelTypes to notify\n   * the consumer of this adapter about the mdoels.\n   *\n   * @method watchTypeIfUnseen\n   * @param {store} store\n   * @param {Map} discoveredTypes\n   * @param {String} type\n   * @param {Function} typesAdded\n   * @param {Function} typesUpdated\n   * @param {Array} releaseMethods\n   * @private\n   */watchTypeIfUnseen(store,discoveredTypes,type,typesAdded,typesUpdated,releaseMethods){if(discoveredTypes.get(type)!==true){const klass=store.modelFor(type);installDebugInfo(klass);const wrapped=this.wrapModelType(klass,type);releaseMethods.push(this.observeModelType(type,typesUpdated));typesAdded([wrapped]);discoveredTypes.set(type,true);}}/**\n    Creates a human readable string used for column headers\n     @method columnNameToDesc\n    @private\n    @param {String} name The attribute name\n    @return {String} Human readable string based on the attribute name\n  */columnNameToDesc(name){return (0,_ember_data_request_utils_string__WEBPACK_IMPORTED_MODULE_4__.capitalize)((0,_ember_data_request_utils_string__WEBPACK_IMPORTED_MODULE_4__.underscore)(name).replace(/_/g,' ').trim());}/**\n    Get the columns for a given model type\n     @method columnsForType\n    @private\n    @param {Model} typeClass\n    @return {Array} An array of columns of the following format:\n     name: {String} The name of the column\n     desc: {String} Humanized description (what would show in a table column name)\n  */columnsForType(typeClass){const columns=[{name:'id',desc:'Id'}];let count=0;typeClass.attributes.forEach((meta,name)=>{if(count++>this.attributeLimit){return false;}const desc=this.columnNameToDesc(name);columns.push({name:name,desc:desc});});return columns;}/**\n    Fetches all loaded records for a given type\n     @method getRecords\n    @private\n    @param {Model} modelClass of the record\n    @param {String} modelName of the record\n    @return {Array} An array of Model records\n     This array will be observed for changes,\n     so it should update when new records are added/removed\n  */getRecords(modelClass,modelName){if(arguments.length<2){// Legacy Ember.js < 1.13 support\nconst containerKey=modelClass._debugContainerKey;if(containerKey){const match=containerKey.match(/model:(.*)/);if(match!==null){modelName=match[1];}}}(test=>{if(!test){throw new Error('Cannot find model name. Please upgrade to Ember.js >= 1.13 for Ember Inspector support');}})(!!modelName);return this.store.peekAll(modelName);}/**\n    Gets the values for each column\n    This is the attribute values for a given record\n     @method getRecordColumnValues\n    @private\n    @param {Model} record to get values from\n    @return {Object} Keys should match column names defined by the model type\n  */getRecordColumnValues(record){let count=0;const columnValues={id:record.id};record.eachAttribute(key=>{if(count++>this.attributeLimit){return false;}columnValues[key]=record[key];});return columnValues;}/**\n    Returns keywords to match when searching records\n     @method getRecordKeywords\n    @private\n    @param {Model} record\n    @return {Array} Relevant keywords for search based on the record's attribute values\n  */getRecordKeywords(record){const keywords=[record.id];record.eachAttribute(key=>{keywords.push(record[key]);});return (0,_ember_array__WEBPACK_IMPORTED_MODULE_0__.A)(keywords);}/**\n    Returns the values of filters defined by `getFilters`\n    These reflect the state of the record\n     @method getRecordFilterValues\n    @private\n    @param {Model} record\n    @return {Object} The record state filter values\n  */getRecordFilterValues(record){return{isNew:record.isNew,isModified:record.hasDirtyAttributes&&!record.isNew,isClean:!record.hasDirtyAttributes};}/**\n    Returns a color that represents the record's state\n    Possible colors: black, blue, green\n     @method getRecordColor\n    @private\n    @param {Model} record\n    @return {String} The record color\n  */getRecordColor(record){let color='black';if(record.isNew){color='green';}else if(record.hasDirtyAttributes){color='blue';}return color;}/**\n    Observes all relevant properties and re-sends the wrapped record\n    when a change occurs\n     @method observeRecord\n    @private\n    @param {Model} record\n    @param {Function} recordUpdated Callback used to notify changes\n    @return {Function} The function to call to remove all observers\n  */observeRecord(record,recordUpdated){const releaseMethods=[];const keysToObserve=['id','isNew','hasDirtyAttributes'];record.eachAttribute(key=>keysToObserve.push(key));keysToObserve.forEach(key=>{const handler=()=>{recordUpdated(this.wrapRecord(record));};(0,_ember_object_observers__WEBPACK_IMPORTED_MODULE_2__.addObserver)(record,key,handler);releaseMethods.push(function(){(0,_ember_object_observers__WEBPACK_IMPORTED_MODULE_2__.removeObserver)(record,key,handler);});});const release=function(){releaseMethods.forEach(fn=>fn());};return release;}}_InspectorDataAdapter=InspectorDataAdapter;decorateFieldV2(_InspectorDataAdapter.prototype,\"store\",[service('store')]);const dataAdapter=InspectorDataAdapter;\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@ember-data/debug/dist/data-adapter.js?");

/***/ }),

/***/ "./node_modules/@ember-data/graph/dist/-private.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ember-data/graph/dist/-private.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   graphFor: () => (/* binding */ graphFor),\n/* harmony export */   isBelongsTo: () => (/* binding */ isBelongsTo),\n/* harmony export */   peekGraph: () => (/* binding */ peekGraph)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"@ember/debug\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_data_store_private__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/store/-private */ \"./node_modules/@ember-data/store/dist/-private.js\");\n/* harmony import */ var _warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @warp-drive/core-types/-private */ \"./node_modules/@warp-drive/core-types/dist/-private.js\");\n/* harmony import */ var _embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../@embroider/macros/src/addon/runtime */ \"./node_modules/@embroider/macros/src/addon/runtime.js\");\nfunction coerceId(id){{let normalized;if(id===null||id===undefined||id===''){normalized=null;}else{normalized=String(id);}(0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(`The resource id '<${typeof id}> ${String(id)} ' is not normalized. Update your application code to use '${JSON.stringify(normalized)}' instead.`,normalized===id,{id:'ember-data:deprecate-non-strict-id',until:'6.0',for:'ember-data',since:{available:'4.13',enabled:'5.3'}});return normalized;}// removed by dead control flow\n{}// removed by dead control flow\n{}}function getStore(wrapper){(test=>{if(!test){throw new Error(`expected a private _store property`);}})('_store'in wrapper);return wrapper._store;}function expandingGet(cache,key1,key2){const mainCache=cache[key1]=cache[key1]||Object.create(null);return mainCache[key2];}function expandingSet(cache,key1,key2,value){const mainCache=cache[key1]=cache[key1]||Object.create(null);mainCache[key2]=value;}function assertValidRelationshipPayload(graph,op){const relationship=graph.get(op.record,op.field);(test=>{if(!test){throw new Error(`Cannot update an implicit relationship`);}})(isHasMany(relationship)||isBelongsTo(relationship));const payload=op.value;const{definition,identifier,state}=relationship;const{type}=identifier;const{field}=op;const{isAsync,kind}=definition;if(payload.links){(0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.warn)(`You pushed a record of type '${type}' with a relationship '${field}' configured as 'async: false'. You've included a link but no primary data, this may be an error in your payload. EmberData will treat this relationship as known-to-be-empty.`,isAsync||!!payload.data||state.hasReceivedData,{id:'ds.store.push-link-for-sync-relationship'});}else if(payload.data){if(kind==='belongsTo'){(test=>{if(!test){throw new Error(`A ${type} record was pushed into the store with the value of ${field} being ${(0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.inspect)(payload.data)}, but ${field} is a belongsTo relationship so the value must not be an array. You should probably check your data payload or serializer.`);}})(!Array.isArray(payload.data));assertRelationshipData(getStore(graph.store),identifier,payload.data,definition);}else if(kind==='hasMany'){(test=>{if(!test){throw new Error(`A ${type} record was pushed into the store with the value of ${field} being '${(0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.inspect)(payload.data)}', but ${field} is a hasMany relationship so the value must be an array. You should probably check your data payload or serializer.`);}})(Array.isArray(payload.data));if(Array.isArray(payload.data)){for(let i=0;i<payload.data.length;i++){assertRelationshipData(getStore(graph.store),identifier,payload.data[i],definition);}}}}}function isNew(identifier){if(!identifier.id){return true;}const cache=(0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_1__.peekCache)(identifier);return Boolean(cache?.isNew(identifier));}function isBelongsTo(relationship){return relationship.definition.kind==='belongsTo';}function isImplicit(relationship){return relationship.definition.isImplicit;}function isHasMany(relationship){return relationship.definition.kind==='hasMany';}function forAllRelatedIdentifiers(rel,cb){if(isBelongsTo(rel)){if(rel.remoteState){cb(rel.remoteState);}if(rel.localState&&rel.localState!==rel.remoteState){cb(rel.localState);}}else if(isHasMany(rel)){// TODO\n// rel.remoteMembers.forEach(cb);\n// might be simpler if performance is not a concern\nfor(let i=0;i<rel.remoteState.length;i++){const inverseIdentifier=rel.remoteState[i];cb(inverseIdentifier);}rel.additions?.forEach(cb);}else{rel.localMembers.forEach(cb);rel.remoteMembers.forEach(inverseIdentifier=>{if(!rel.localMembers.has(inverseIdentifier)){cb(inverseIdentifier);}});}}/*\n  Removes the given identifier from BOTH remote AND local state.\n\n  This method is useful when either a deletion or a rollback on a new record\n  needs to entirely purge itself from an inverse relationship.\n  */function removeIdentifierCompletelyFromRelationship(graph,relationship,value,silenceNotifications){if(isBelongsTo(relationship)){if(relationship.remoteState===value){relationship.remoteState=null;}if(relationship.localState===value){relationship.localState=null;// This allows dematerialized inverses to be rematerialized\n// we shouldn't be notifying here though, figure out where\n// a notification was missed elsewhere.\n{notifyChange(graph,relationship);}}}else if(isHasMany(relationship)){relationship.remoteMembers.delete(value);relationship.additions?.delete(value);const wasInRemovals=relationship.removals?.delete(value);const canonicalIndex=relationship.remoteState.indexOf(value);if(canonicalIndex!==-1){relationship.remoteState.splice(canonicalIndex,1);}if(!wasInRemovals){const currentIndex=relationship.localState?.indexOf(value);if(currentIndex!==-1&&currentIndex!==undefined){relationship.localState.splice(currentIndex,1);// This allows dematerialized inverses to be rematerialized\n// we shouldn't be notifying here though, figure out where\n// a notification was missed elsewhere.\n{notifyChange(graph,relationship);}}}}else{relationship.remoteMembers.delete(value);relationship.localMembers.delete(value);}}function notifyChange(graph,relationship){if(!relationship.accessed){return;}const identifier=relationship.identifier;const key=relationship.definition.key;if(identifier===graph._removing){{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.LOG_GRAPH||globalThis.getWarpDriveRuntimeConfig().debug.LOG_GRAPH){// eslint-disable-next-line no-console\nconsole.log(`Graph: ignoring relationship change for removed identifier ${String(identifier)} ${key}`);}}return;}{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.LOG_GRAPH||globalThis.getWarpDriveRuntimeConfig().debug.LOG_GRAPH){// eslint-disable-next-line no-console\nconsole.log(`Graph: notifying relationship change for ${String(identifier)} ${key}`);}}graph.store.notifyChange(identifier,'relationships',key);}function assertRelationshipData(store,identifier,data,meta){(test=>{if(!test){throw new Error(`A ${identifier.type} record was pushed into the store with the value of ${meta.key} being '${JSON.stringify(data)}', but ${meta.key} is a belongsTo relationship so the value must not be an array. You should probably check your data payload or serializer.`);}})(!Array.isArray(data));(test=>{if(!test){throw new Error(`Encountered a relationship identifier without a type for the ${meta.kind} relationship '${meta.key}' on <${identifier.type}:${String(identifier.id)}>, expected an identifier with type '${meta.type}' but found\\n\\n'${JSON.stringify(data,null,2)}'\\n\\nPlease check your serializer and make sure it is serializing the relationship payload into a JSON API format.`);}})(data===null||'type'in data&&typeof data.type==='string'&&data.type.length);(test=>{if(!test){throw new Error(`Encountered a relationship identifier without an id for the ${meta.kind} relationship '${meta.key}' on <${identifier.type}:${String(identifier.id)}>, expected an identifier but found\\n\\n'${JSON.stringify(data,null,2)}'\\n\\nPlease check your serializer and make sure it is serializing the relationship payload into a JSON API format.`);}})(data===null||!!coerceId(data.id));if(data?.type===meta.type){(test=>{if(!test){throw new Error(`Missing Schema: Encountered a relationship identifier { type: '${data.type}', id: '${String(data.id)}' } for the '${identifier.type}.${meta.key}' ${meta.kind} relationship on <${identifier.type}:${String(identifier.id)}>, but no schema exists for that type.`);}})(store.schema.hasResource(data));}else{(test=>{if(!test){throw new Error(`Missing Schema: Encountered a relationship identifier with type '${data.type}' for the ${meta.kind} relationship '${meta.key}' on <${identifier.type}:${String(identifier.id)}>, Expected an identifier with type '${meta.type}'. No schema was found for '${data.type}'.`);}})(data===null||!data.type||store.schema.hasResource(data));}}const RELATIONSHIP_KINDS=['belongsTo','hasMany','resource','collection'];function isLegacyField(field){return field.kind==='belongsTo'||field.kind==='hasMany';}function isRelationshipField(field){return RELATIONSHIP_KINDS.includes(field.kind);}function temporaryConvertToLegacy(field){return{kind:field.kind==='resource'?'belongsTo':'hasMany',name:field.name,type:field.type,options:Object.assign({},{async:false,inverse:null,resetOnRemoteUpdate:false},field.options)};}/**\n *\n * Given RHS (Right Hand Side)\n *\n * ```ts\n * class User extends Model {\n *   @hasMany('animal', { async: false, inverse: 'owner' }) pets;\n * }\n * ```\n *\n * Given LHS (Left Hand Side)\n *\n * ```ts\n * class Animal extends Model {\n *  @belongsTo('user', { async: false, inverse: 'pets' }) owner;\n * }\n * ```\n *\n * The UpgradedMeta for the RHS would be:\n *\n * ```ts\n * {\n *   kind: 'hasMany',\n *   key: 'pets',\n *   type: 'animal',\n *   isAsync: false,\n *   isImplicit: false,\n *   isCollection: true,\n *   isPolymorphic: false,\n *   inverseKind: 'belongsTo',\n *   inverseKey: 'owner',\n *   inverseType: 'user',\n *   inverseIsAsync: false,\n *   inverseIsImplicit: false,\n *   inverseIsCollection: false,\n *   inverseIsPolymorphic: false,\n * }\n * ```\n *\n * The UpgradeMeta for the LHS would be:\n *\n * ```ts\n * {\n *   kind: 'belongsTo',\n *   key: 'owner',\n *   type: 'user',\n *   isAsync: false,\n *   isImplicit: false,\n *   isCollection: false,\n *   isPolymorphic: false,\n *   inverseKind: 'hasMany',\n *   inverseKey: 'pets',\n *   inverseType: 'animal',\n *   inverseIsAsync: false,\n *   inverseIsImplicit: false,\n *   inverseIsCollection: true,\n *   inverseIsPolymorphic: false,\n * }\n * ```\n *\n *\n * @class UpgradedMeta\n * @internal\n */const BOOL_LATER=null;const STR_LATER='';const IMPLICIT_KEY_RAND=Date.now();function implicitKeyFor(type,key){return`implicit-${type}:${key}${IMPLICIT_KEY_RAND}`;}function syncMeta(definition,inverseDefinition){definition.inverseKind=inverseDefinition.kind;definition.inverseKey=inverseDefinition.key;definition.inverseType=inverseDefinition.type;definition.inverseIsAsync=inverseDefinition.isAsync;definition.inverseIsCollection=inverseDefinition.isCollection;definition.inverseIsPolymorphic=inverseDefinition.isPolymorphic;definition.inverseIsImplicit=inverseDefinition.isImplicit;definition.inverseIsLinksMode=inverseDefinition.isLinksMode;const resetOnRemoteUpdate=definition.resetOnRemoteUpdate===false||inverseDefinition.resetOnRemoteUpdate===false?false:true;definition.resetOnRemoteUpdate=resetOnRemoteUpdate;inverseDefinition.resetOnRemoteUpdate=resetOnRemoteUpdate;}function upgradeMeta(meta){if(!isLegacyField(meta)){meta=temporaryConvertToLegacy(meta);}const niceMeta={};const options=meta.options;niceMeta.kind=meta.kind;niceMeta.key=meta.name;niceMeta.type=meta.type;(test=>{if(!test){throw new Error(`Expected relationship definition to specify async`);}})(typeof options?.async==='boolean');niceMeta.isAsync=options.async;niceMeta.isImplicit=false;niceMeta.isCollection=meta.kind==='hasMany';niceMeta.isPolymorphic=options&&!!options.polymorphic;niceMeta.isLinksMode=options.linksMode??false;niceMeta.inverseKey=options&&options.inverse||STR_LATER;niceMeta.inverseType=STR_LATER;niceMeta.inverseIsAsync=BOOL_LATER;niceMeta.inverseIsImplicit=options&&options.inverse===null||BOOL_LATER;niceMeta.inverseIsCollection=BOOL_LATER;niceMeta.inverseIsLinksMode=BOOL_LATER;// prettier-ignore\nniceMeta.resetOnRemoteUpdate=!isLegacyField(meta)?false:meta.options?.linksMode?false:meta.options?.resetOnRemoteUpdate===false?false:true;return niceMeta;}function assertConfiguration(info,type,key){{const isSelfReferential=info.isSelfReferential;if(isSelfReferential){return true;}const _isRHS=key===info.rhs_relationshipName&&(type===info.rhs_baseModelName||// base or non-polymorphic\n// if the other side is polymorphic then we need to scan our modelNames\ninfo.lhs_isPolymorphic&&info.rhs_modelNames.includes(type));// polymorphic\nconst _isLHS=key===info.lhs_relationshipName&&(type===info.lhs_baseModelName||// base or non-polymorphic\n// if the other side is polymorphic then we need to scan our modelNames\ninfo.rhs_isPolymorphic&&info.lhs_modelNames.includes(type));// polymorphic;\nif(!_isRHS&&!_isLHS){/*\n        this occurs when we are likely polymorphic but not configured to be polymorphic\n        most often due to extending a class that has a relationship definition on it.\n         e.g.\n         ```ts\n        class Pet extends Model {\n          @belongsTo('human', { async: false, inverse: 'pet' }) owner;\n        }\n        class Human extends Model {\n          @belongsTo('pet', { async: false, inverse: 'owner' }) pet;\n        }\n        class Farmer extends Human {}\n        ```\n         In the above case, the following would trigger this error:\n         ```ts\n        let pet = store.createRecord('pet');\n        let farmer = store.createRecord('farmer');\n        farmer.pet = pet; // error\n        ```\n         The correct way to fix this is to specify the polymorphic option on Pet\n        and to specify the abstract type 'human' on the Human base class.\n         ```ts\n        class Pet extends Model {\n          @belongsTo('human', { async: false, inverse: 'pet', polymorphic: true }) owner;\n        }\n        class Human extends Model {\n          @belongsTo('pet', { async: false, inverse: 'owner', as: 'human' }) pet;\n        }\n        class Farmer extends Human {}\n        ```\n         Alternatively both Human and Farmer could declare the relationship, because relationship\n        definitions are \"structural\".\n         ```ts\n        class Pet extends Model {\n          @belongsTo('human', { async: false, inverse: 'pet', polymorphic: true }) owner;\n        }\n        class Human extends Model {\n          @belongsTo('pet', { async: false, inverse: 'owner', as: 'human' }) pet;\n        }\n        class Farmer extends Model {\n          @belongsTo('pet', { async: false, inverse: 'owner', as: 'human' }) pet;\n        }\n        ```\n        */if(key===info.lhs_relationshipName&&info.lhs_modelNames.includes(type)){// parentIdentifier, parentDefinition, addedIdentifier, store\nassertInheritedSchema(info.lhs_definition,type);}else if(key===info.rhs_relationshipName&&info.rhs_modelNames.includes(type)){assertInheritedSchema(info.lhs_definition,type);}// OPEN AN ISSUE :: we would like to improve our errors but need to understand what corner case got us here\nthrow new Error(`PLEASE OPEN AN ISSUE :: Found a relationship that is neither the LHS nor RHS of the same edge. This is not supported. Please report this to the EmberData team.`);}if(_isRHS&&_isLHS){// not sure how we get here but it's probably the result of some form of inheritance\n// without having specified polymorphism correctly leading to it not being self-referential\n// OPEN AN ISSUE :: we would like to improve our errors but need to understand what corner case got us here\nthrow new Error(`PLEASE OPEN AN ISSUE :: Found a relationship that is both the LHS and RHS of the same edge but is not self-referential. This is not supported. Please report this to the EmberData team.`);}}}function isLHS(info,type,key){const isSelfReferential=info.isSelfReferential;const isRelationship=key===info.lhs_relationshipName;{assertConfiguration(info,type,key);}if(isRelationship===true){return isSelfReferential===true||// itself\ntype===info.lhs_baseModelName||// base or non-polymorphic\n// if the other side is polymorphic then we need to scan our modelNames\ninfo.rhs_isPolymorphic&&info.lhs_modelNames.includes(type)// polymorphic\n;}return false;}function upgradeDefinition(graph,identifier,propertyName,isImplicit=false){const cache=graph._definitionCache;const storeWrapper=graph.store;const polymorphicLookup=graph._potentialPolymorphicTypes;const{type}=identifier;let cached=/*#__NOINLINE__*/expandingGet(cache,type,propertyName);// CASE: We have a cached resolution (null if no relationship exists)\nif(cached!==undefined){return cached;}(test=>{if(!test){throw new Error(`Expected to find relationship definition in the cache for the implicit relationship ${propertyName}`);}})(!isImplicit);const relationships=storeWrapper.schema.fields(identifier);(test=>{if(!test){throw new Error(`Expected to have a relationship definition for ${type} but none was found.`);}})(relationships);const meta=relationships.get(propertyName);if(!meta){// TODO potentially we should just be permissive here since this is an implicit relationship\n// and not require the lookup table to be populated\nif(polymorphicLookup[type]){const altTypes=Object.keys(polymorphicLookup[type]);for(let i=0;i<altTypes.length;i++){const _cached=expandingGet(cache,altTypes[i],propertyName);if(_cached){/*#__NOINLINE__*/expandingSet(cache,type,propertyName,_cached);_cached.rhs_modelNames.push(type);return _cached;}}}// CASE: We don't have a relationship at all\n// we should only hit this in prod\n(test=>{if(!test){throw new Error(`Expected a relationship schema for '${type}.${propertyName}', but no relationship schema was found.`);}})(meta);cache[type][propertyName]=null;return null;}(test=>{if(!test){throw new Error(`Expected ${propertyName} to be a relationship`);}})(isRelationshipField(meta));const definition=/*#__NOINLINE__*/upgradeMeta(meta);let inverseDefinition;let inverseKey;const inverseType=definition.type;// CASE: Inverse is explicitly null\nif(definition.inverseKey===null){// TODO probably dont need this assertion if polymorphic\n(test=>{if(!test){throw new Error(`Expected the inverse model to exist`);}})(getStore(storeWrapper).modelFor(inverseType));inverseDefinition=null;}else{inverseKey=/*#__NOINLINE__*/inverseForRelationship(getStore(storeWrapper),identifier,propertyName);// CASE: If we are polymorphic, and we declared an inverse that is non-null\n// we must assume that the lack of inverseKey means that there is no\n// concrete type as the baseType, so we must construct and artificial\n// placeholder\nif(!inverseKey&&definition.isPolymorphic&&definition.inverseKey){inverseDefinition={kind:'belongsTo',// this must be updated when we find the first belongsTo or hasMany definition that matches\nkey:definition.inverseKey,type:type,isAsync:false,// this must be updated when we find the first belongsTo or hasMany definition that matches\nisImplicit:false,isCollection:false,// this must be updated when we find the first belongsTo or hasMany definition that matches\nisPolymorphic:false};// the rest of the fields are populated by syncMeta\n// CASE: Inverse resolves to null\n}else if(!inverseKey){inverseDefinition=null;}else{// CASE: We have an explicit inverse or were able to resolve one\nconst inverseDefinitions=storeWrapper.schema.fields({type:inverseType});(test=>{if(!test){throw new Error(`Expected to have a relationship definition for ${inverseType} but none was found.`);}})(inverseDefinitions);const metaFromInverse=inverseDefinitions.get(inverseKey);(test=>{if(!test){throw new Error(`Expected a relationship schema for '${inverseType}.${inverseKey}' to match the inverse of '${type}.${propertyName}', but no relationship schema was found.`);}})(metaFromInverse);(test=>{if(!test){throw new Error(`Expected ${inverseKey} to be a relationship`);}})(isRelationshipField(metaFromInverse));inverseDefinition=upgradeMeta(metaFromInverse);}}// CASE: We have no inverse\nif(!inverseDefinition){// polish off meta\ninverseKey=/*#__NOINLINE__*/implicitKeyFor(type,propertyName);inverseDefinition={kind:'implicit',key:inverseKey,type:type,isAsync:false,isImplicit:true,isCollection:true,// with implicits any number of records could point at us\nisPolymorphic:false};// the rest of the fields are populated by syncMeta\nsyncMeta(definition,inverseDefinition);syncMeta(inverseDefinition,definition);const info={lhs_key:`${type}:${propertyName}`,lhs_modelNames:[type],lhs_baseModelName:type,lhs_relationshipName:propertyName,lhs_definition:definition,lhs_isPolymorphic:definition.isPolymorphic,rhs_key:inverseDefinition.key,rhs_modelNames:[inverseType],rhs_baseModelName:inverseType,rhs_relationshipName:inverseDefinition.key,rhs_definition:inverseDefinition,rhs_isPolymorphic:false,hasInverse:false,isSelfReferential:type===inverseType,// this could be wrong if we are self-referential but also polymorphic\nisReflexive:false// we can't be reflexive if we don't define an inverse\n};expandingSet(cache,inverseType,inverseKey,info);expandingSet(cache,type,propertyName,info);return info;}// CASE: We do have an inverse\nconst baseType=inverseDefinition.type;// TODO we want to assert this but this breaks all of our shoddily written tests\n/*\n    if (DEBUG) {\n      let inverseDoubleCheck = inverseFor(inverseRelationshipName, store);\n       assert(`The ${inverseBaseModelName}:${inverseRelationshipName} relationship declares 'inverse: null', but it was resolved as the inverse for ${baseModelName}:${relationshipName}.`, inverseDoubleCheck);\n    }\n  */// CASE: We may have already discovered the inverse for the baseModelName\n// CASE: We have already discovered the inverse\n(test=>{if(!test){throw new Error(`We should have determined an inverseKey by now, open an issue if this is hit`);}})(typeof inverseKey==='string'&&inverseKey.length>0);cached=expandingGet(cache,baseType,propertyName)||expandingGet(cache,inverseType,inverseKey);if(cached){// TODO this assert can be removed if the above assert is enabled\n(test=>{if(!test){throw new Error(`The ${inverseType}:${inverseKey} relationship declares 'inverse: null', but it was resolved as the inverse for ${type}:${propertyName}.`);}})(cached.hasInverse!==false);const _isLHS=cached.lhs_baseModelName===baseType;const modelNames=_isLHS?cached.lhs_modelNames:cached.rhs_modelNames;// make this lookup easier in the future by caching the key\nmodelNames.push(type);expandingSet(cache,type,propertyName,cached);return cached;}// this is our first time so polish off the metas\nsyncMeta(definition,inverseDefinition);syncMeta(inverseDefinition,definition);const lhs_modelNames=[type];if(type!==baseType){lhs_modelNames.push(baseType);}const isSelfReferential=baseType===inverseType;const info={lhs_key:`${baseType}:${propertyName}`,lhs_modelNames,lhs_baseModelName:baseType,lhs_relationshipName:propertyName,lhs_definition:definition,lhs_isPolymorphic:definition.isPolymorphic,rhs_key:`${inverseType}:${inverseKey}`,rhs_modelNames:[inverseType],rhs_baseModelName:inverseType,rhs_relationshipName:inverseKey,rhs_definition:inverseDefinition,rhs_isPolymorphic:inverseDefinition.isPolymorphic,hasInverse:true,isSelfReferential,isReflexive:isSelfReferential&&propertyName===inverseKey};// Create entries for the baseModelName as well as modelName to speed up\n//  inverse lookups\nexpandingSet(cache,baseType,propertyName,info);expandingSet(cache,type,propertyName,info);// Greedily populate the inverse\nexpandingSet(cache,inverseType,inverseKey,info);return info;}function inverseForRelationship(store,identifier,key){const definition=store.schema.fields(identifier).get(key);if(!definition){return null;}(test=>{if(!test){throw new Error(`Expected ${key} to be a relationship`);}})(isRelationshipField(definition));(test=>{if(!test){throw new Error(`Expected the relationship defintion to specify the inverse type or null.`);}})(definition.options?.inverse===null||typeof definition.options?.inverse==='string'&&definition.options.inverse.length>0);return definition.options.inverse;}/* eslint-disable @typescript-eslint/no-shadow */let assertPolymorphicType;let assertInheritedSchema;{function validateSchema(definition,meta){const errors=new Map();if(definition.inverseKey!==meta.name){errors.set('name',` <---- should be '${definition.inverseKey}'`);}if(definition.inverseType!==meta.type){errors.set('type',` <---- should be '${definition.inverseType}'`);}if(definition.inverseKind!==meta.kind){errors.set('type',` <---- should be '${definition.inverseKind}'`);}if(definition.inverseIsAsync!==meta.options.async){errors.set('async',` <---- should be ${definition.inverseIsAsync}`);}if(definition.inverseIsPolymorphic&&definition.inverseIsPolymorphic!==meta.options.polymorphic){errors.set('polymorphic',` <---- should be ${definition.inverseIsPolymorphic}`);}if(definition.key!==meta.options.inverse){errors.set('inverse',` <---- should be '${definition.key}'`);}if(definition.type!==meta.options.as){errors.set('as',` <---- should be '${definition.type}'`);}return errors;}function expectedSchema(definition){return printSchema({name:definition.inverseKey,type:definition.inverseType,kind:definition.inverseKind,options:{as:definition.type,async:definition.inverseIsAsync,polymorphic:definition.inverseIsPolymorphic||false,inverse:definition.key}});}function printSchema(config,errors){return`\n\n\\`\\`\\`\n{\n  ${config.name}: {\n    name: '${config.name}',${errors?.get('name')||''}\n    type: '${config.type}',${errors?.get('type')||''}\n    kind: '${config.kind}',${errors?.get('kind')||''}\n    options: {\n      as: '${config.options.as}',${errors?.get('as')||''}\n      async: ${config.options.async},${errors?.get('async')||''}\n      polymorphic: ${config.options.polymorphic},${errors?.get('polymorphic')||''}\n      inverse: '${config.options.inverse}'${errors?.get('inverse')||''}\n    }\n  }\n}\n\\`\\`\\`\n\n`;}function metaFrom(definition){return{name:definition.key,type:definition.type,kind:definition.kind,options:{async:definition.isAsync,polymorphic:definition.isPolymorphic,inverse:definition.inverseKey}};}function inverseMetaFrom(definition){return{name:definition.inverseKey,type:definition.inverseType,kind:definition.inverseKind,options:{as:definition.isPolymorphic?definition.type:undefined,async:definition.inverseIsAsync,polymorphic:definition.inverseIsPolymorphic,inverse:definition.key}};}function inverseDefinition(definition){return{key:definition.inverseKey,type:definition.inverseType,kind:definition.inverseKind,isAsync:definition.inverseIsAsync,isPolymorphic:true,isLinksMode:definition.isLinksMode,isCollection:definition.inverseIsCollection,isImplicit:definition.inverseIsImplicit,inverseKey:definition.key,inverseType:definition.type,inverseKind:definition.kind,inverseIsAsync:definition.isAsync,inverseIsPolymorphic:definition.isPolymorphic,inverseIsLinksMode:definition.inverseIsLinksMode,inverseIsImplicit:definition.isImplicit,inverseIsCollection:definition.isCollection,resetOnRemoteUpdate:definition.resetOnRemoteUpdate};}function definitionWithPolymorphic(definition){return Object.assign({},definition,{inverseIsPolymorphic:true});}assertInheritedSchema=function assertInheritedSchema(definition,type){const meta1=metaFrom(definition);const meta2=inverseMetaFrom(definition);const errors1=validateSchema(inverseDefinition(definition),meta1);const errors2=validateSchema(definitionWithPolymorphic(definition),meta2);if(errors2.size===0&&errors1.size>0){throw new Error(`The schema for the relationship '${type}.${definition.key}' is not configured to satisfy '${definition.inverseType}' and thus cannot utilize the '${definition.inverseType}.${definition.key}' relationship to connect with '${definition.type}.${definition.inverseKey}'\\n\\nIf using this relationship in a polymorphic manner is desired, the relationships schema definition for '${type}' should include:${printSchema(meta1,errors1)}`);}else if(errors1.size>0){throw new Error(`The schema for the relationship '${type}.${definition.key}' is not configured to satisfy '${definition.inverseType}' and thus cannot utilize the '${definition.inverseType}.${definition.key}' relationship to connect with '${definition.type}.${definition.inverseKey}'\\n\\nIf using this relationship in a polymorphic manner is desired, the relationships schema definition for '${type}' should include:${printSchema(meta1,errors1)} and the relationships schema definition for '${definition.type}' should include:${printSchema(meta2,errors2)}`);}else if(errors2.size>0){throw new Error(`The schema for the relationship '${type}.${definition.key}' satisfies '${definition.inverseType}' but cannot utilize the '${definition.inverseType}.${definition.key}' relationship to connect with '${definition.type}.${definition.inverseKey}' because that relationship is not polymorphic.\\n\\nIf using this relationship in a polymorphic manner is desired, the relationships schema definition for '${definition.type}' should include:${printSchema(meta2,errors2)}`);}};assertPolymorphicType=function assertPolymorphicType(parentIdentifier,parentDefinition,addedIdentifier,store){if(parentDefinition.inverseIsImplicit){return;}if(parentDefinition.isPolymorphic){let meta=store.schema.fields(addedIdentifier).get(parentDefinition.inverseKey);(test=>{if(!test){throw new Error(`No '${parentDefinition.inverseKey}' field exists on '${addedIdentifier.type}'. To use this type in the polymorphic relationship '${parentDefinition.inverseType}.${parentDefinition.key}' the relationships schema definition for ${addedIdentifier.type} should include:${expectedSchema(parentDefinition)}`);}})(meta);(test=>{if(!test){throw new Error(`Expected the field ${parentDefinition.inverseKey} to be a relationship`);}})(meta&&isRelationshipField(meta));meta=isLegacyField(meta)?meta:temporaryConvertToLegacy(meta);(test=>{if(!test){throw new Error(`You should not specify both options.as and options.inverse as null on ${addedIdentifier.type}.${parentDefinition.inverseKey}, as if there is no inverse field there is no abstract type to conform to. You may have intended for this relationship to be polymorphic, or you may have mistakenly set inverse to null.`);}})(!(meta.options.inverse===null&&meta?.options.as?.length));const errors=validateSchema(parentDefinition,meta);(test=>{if(!test){throw new Error(`The schema for the relationship '${parentDefinition.inverseKey}' on '${addedIdentifier.type}' type does not correctly implement '${parentDefinition.type}' and thus cannot be assigned to the '${parentDefinition.key}' relationship in '${parentIdentifier.type}'. If using this record in this polymorphic relationship is desired, correct the errors in the schema shown below:${printSchema(meta,errors)}`);}})(errors.size===0);}else if(addedIdentifier.type!==parentDefinition.type){// if we are not polymorphic\n// then the addedIdentifier.type must be the same as the parentDefinition.type\nlet meta=store.schema.fields(addedIdentifier).get(parentDefinition.inverseKey);(test=>{if(!test){throw new Error(`Expected the field ${parentDefinition.inverseKey} to be a relationship`);}})(!meta||isRelationshipField(meta));meta=meta&&(isLegacyField(meta)?meta:temporaryConvertToLegacy(meta));if(meta?.options.as===parentDefinition.type){// inverse is likely polymorphic but missing the polymorphic flag\nlet meta=store.schema.fields({type:parentDefinition.inverseType}).get(parentDefinition.key);(test=>{if(!test){throw new Error(`Expected the field ${parentDefinition.key} to be a relationship`);}})(meta&&isRelationshipField(meta));meta=isLegacyField(meta)?meta:temporaryConvertToLegacy(meta);const errors=validateSchema(definitionWithPolymorphic(inverseDefinition(parentDefinition)),meta);(test=>{{throw new Error(`The '<${addedIdentifier.type}>.${parentDefinition.inverseKey}' relationship cannot be used polymorphically because '<${parentDefinition.inverseType}>.${parentDefinition.key} is not a polymorphic relationship. To use this relationship in a polymorphic manner, fix the following schema issues on the relationships schema for '${parentDefinition.inverseType}':${printSchema(meta,errors)}`);}})();}else{(test=>{{throw new Error(`The '${addedIdentifier.type}' type does not implement '${parentDefinition.type}' and thus cannot be assigned to the '${parentDefinition.key}' relationship in '${parentIdentifier.type}'. If this relationship should be polymorphic, mark ${parentDefinition.inverseType}.${parentDefinition.key} as \\`polymorphic: true\\` and ${addedIdentifier.type}.${parentDefinition.inverseKey} as implementing it via \\`as: '${parentDefinition.type}'\\`.`);}})();}}};}function count(label){// @ts-expect-error\n// eslint-disable-next-line\nglobalThis.__WarpDriveMetricCountData[label]=(globalThis.__WarpDriveMetricCountData[label]||0)+1;}/*\n    case many:1\n    ========\n    In a bi-directional graph with Many:1 edges, adding a value\n    results in up-to 3 discrete value transitions, while removing\n    a value is only 2 transitions.\n\n    For adding C to A\n    If: A <<-> B, C <->> D is the initial state,\n    and: B <->> A <<-> C, D is the final state\n\n    then we would undergo the following transitions.\n\n    add C to A\n    remove C from D\n    add A to C\n\n    For removing B from A\n    If: A <<-> B, C <->> D is the initial state,\n    and: A, B, C <->> D is the final state\n\n    then we would undergo the following transitions.\n\n    remove B from A\n    remove A from B\n\n    case many:many\n    ===========\n    In a bi-directional graph with Many:Many edges, adding or\n    removing a value requires only 2 value transitions.\n\n    For Adding\n    If: A<<->>B, C<<->>D is the initial state (double arrows representing the many side)\n    And: D<<->>C<<->>A<<->>B is the final state\n\n    Then we would undergo two transitions.\n\n    add C to A.\n    add A to C\n\n    For Removing\n    If: A<<->>B, C<<->>D is the initial state (double arrows representing the many side)\n    And: A, B, C<<->>D is the final state\n\n    Then we would undergo two transitions.\n\n    remove B from A\n    remove A from B\n\n    case many:?\n    ========\n    In a uni-directional graph with Many:? edges (modeled in EmberData with `inverse:null`) with\n    artificial (implicit) inverses, replacing a value results in 2 discrete value transitions.\n    This is because a Many:? relationship is effectively Many:Many.\n  */function replaceRelatedRecords(graph,op,isRemote){if(isRemote){replaceRelatedRecordsRemote(graph,op,isRemote);}else{replaceRelatedRecordsLocal(graph,op,isRemote);}}function replaceRelatedRecordsLocal(graph,op,isRemote){const identifiers=op.value;const relationship=graph.get(op.record,op.field);(test=>{if(!test){throw new Error(`expected hasMany relationship`);}})(isHasMany(relationship));relationship.state.hasReceivedData=true;const{additions,removals}=relationship;const{inverseKey,type}=relationship.definition;const{record}=op;const wasDirty=relationship.isDirty;let localBecameDirty=false;{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.LOG_METRIC_COUNTS||globalThis.getWarpDriveRuntimeConfig().debug.LOG_METRIC_COUNTS){count(`replaceRelatedRecordsLocal ${'type'in record?record.type:'<document>'} ${op.field}`);}}const onAdd=identifier=>{// Since we are diffing against the remote state, we check\n// if our previous local state did not contain this identifier\nconst removalsHas=removals?.has(identifier);if(removalsHas||!additions?.has(identifier)){if(type!==identifier.type){{assertPolymorphicType(relationship.identifier,relationship.definition,identifier,graph.store);}graph.registerPolymorphicType(type,identifier.type);}// we've added a record locally that wasn't in the local state before\nlocalBecameDirty=true;addToInverse(graph,identifier,inverseKey,op.record,isRemote);if(removalsHas){removals.delete(identifier);}}};const onRemove=identifier=>{// Since we are diffing against the remote state, we check\n// if our previous local state had contained this identifier\nconst additionsHas=additions?.has(identifier);if(additionsHas||!removals?.has(identifier)){// we've removed a record locally that was in the local state before\nlocalBecameDirty=true;removeFromInverse(graph,identifier,inverseKey,record,isRemote);if(additionsHas){additions.delete(identifier);}}};const diff=diffCollection(identifiers,relationship,onAdd,onRemove);// any additions no longer in the local state\n// also need to be removed from the inverse\nif(additions&&additions.size>0){additions.forEach(identifier=>{if(!diff.add.has(identifier)){localBecameDirty=true;onRemove(identifier);}});}// any removals no longer in the local state\n// also need to be added back to the inverse\nif(removals&&removals.size>0){removals.forEach(identifier=>{if(!diff.del.has(identifier)){localBecameDirty=true;onAdd(identifier);}});}const becameDirty=diff.changed||localBecameDirty;relationship.additions=diff.add;relationship.removals=diff.del;relationship.localState=diff.finalState;// we only notify if the localState changed and were not already dirty before\n// because if we were already dirty then we have already notified\nif(becameDirty&&!wasDirty){notifyChange(graph,relationship);}}function replaceRelatedRecordsRemote(graph,op,isRemote){const identifiers=op.value;const relationship=graph.get(op.record,op.field);{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.LOG_METRIC_COUNTS||globalThis.getWarpDriveRuntimeConfig().debug.LOG_METRIC_COUNTS){count(`replaceRelatedRecordsRemote ${'type'in op.record?op.record.type:'<document>'}  ${op.field}`);}}(test=>{if(!test){throw new Error(`You can only '${op.op}' on a hasMany relationship. ${op.record.type}.${op.field} is a ${relationship.definition.kind}`);}})(isHasMany(relationship));if(isRemote){graph._addToTransaction(relationship);}const wasDirty=relationship.isDirty;// if this is our first time receiving data\n// we need to mark the relationship as dirty\n// so that non-materializing APIs like `hasManyReference.value()`\n// will get notified and updated.\nif(!relationship.state.hasReceivedData){relationship.isDirty=true;}relationship.state.hasReceivedData=true;// cache existing state\nconst{definition}=relationship;const{type}=relationship.definition;const diff=diffCollection(identifiers,relationship,identifier=>{if(type!==identifier.type){{assertPolymorphicType(relationship.identifier,relationship.definition,identifier,graph.store);}graph.registerPolymorphicType(type,identifier.type);}// commit additions\n// TODO build this into the diff?\n// because we are not dirty if this was a committed local addition\nif(relationship.additions?.has(identifier)){relationship.additions.delete(identifier);}else{{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.DEBUG_RELATIONSHIP_NOTIFICATIONS||globalThis.getWarpDriveRuntimeConfig().debug.DEBUG_RELATIONSHIP_NOTIFICATIONS){if(!relationship.isDirty){// eslint-disable-next-line no-console\nconsole.log(`setting relationship to dirty because the remote addition was not in our previous list of local additions`);}}}}addToInverse(graph,identifier,definition.inverseKey,op.record,isRemote);},identifier=>{// commit removals\n// TODO build this into the diff?\n// because we are not dirty if this was a committed local addition\nif(relationship.removals?.has(identifier)){relationship.removals.delete(identifier);}else{{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.DEBUG_RELATIONSHIP_NOTIFICATIONS||globalThis.getWarpDriveRuntimeConfig().debug.DEBUG_RELATIONSHIP_NOTIFICATIONS){if(!relationship.isDirty){// eslint-disable-next-line no-console\nconsole.log(`setting relationship to dirty because the remote removal was not in our previous list of local removals`);}}}}removeFromInverse(graph,identifier,definition.inverseKey,op.record,isRemote);});// replace existing state\nrelationship.remoteMembers=diff.finalSet;relationship.remoteState=diff.finalState;// changed also indicates a change in order\nif(diff.changed){relationship.isDirty=true;}// TODO unsure if we need this but it\n// may allow us to more efficiently patch\n// the associated ManyArray\nrelationship._diff=diff;{// only do this for legacy hasMany, not collection\n// and provide a way to incrementally migrate\nif(// we do not guard by diff.changed here\n// because we want to clear local changes even if\n// no change has occurred to preserve the legacy behavior\nrelationship.definition.kind==='hasMany'&&relationship.definition.resetOnRemoteUpdate!==false&&(diff.changed||wasDirty)){const deprecationInfo={removals:[],additions:[],triggered:false};if(relationship.removals){relationship.isDirty=true;relationship.removals.forEach(identifier=>{deprecationInfo.triggered=true;deprecationInfo.removals.push(identifier);// reverse the removal\n// if we are still in removals at this point then\n// we were not \"committed\" which means we are present\n// in the remoteMembers. So we \"add back\" on the inverse.\naddToInverse(graph,identifier,definition.inverseKey,op.record,false);});relationship.removals=null;}if(relationship.additions){relationship.additions.forEach(identifier=>{// reverse the addition\n// if we are still in additions at this point then\n// we were not \"committed\" which means we are not present\n// in the remoteMembers. So we \"remove\" from the inverse.\n// however we only do this if we are not a \"new\" record.\nif(!isNew(identifier)){deprecationInfo.triggered=true;deprecationInfo.additions.push(identifier);relationship.isDirty=true;relationship.additions.delete(identifier);removeFromInverse(graph,identifier,definition.inverseKey,op.record,false);}});if(relationship.additions.size===0){relationship.additions=null;}}if(deprecationInfo.triggered){(0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(`EmberData is changing the default semantics of updates to the remote state of relationships.\\n\\nThe following local state was cleared from the <${relationship.identifier.type}>.${relationship.definition.key} hasMany relationship but will not be once this deprecation is resolved by opting into the new behavior:\\n\\n\\tAdded: [${deprecationInfo.additions.map(i=>i.lid).join(', ')}]\\n\\tRemoved: [${deprecationInfo.removals.map(i=>i.lid).join(', ')}]`,false,{id:'ember-data:deprecate-relationship-remote-update-clearing-local-state',for:'ember-data',since:{enabled:'5.3',available:'4.13'},until:'6.0',url:'https://deprecations.emberjs.com/v5.x#ember-data-deprecate-relationship-remote-update-clearing-local-state'});}}}if(relationship.isDirty&&!wasDirty){flushCanonical(graph,relationship);}}function addToInverse(graph,identifier,key,value,isRemote){const relationship=graph.get(identifier,key);const{type}=relationship.definition;if(type!==value.type){{assertPolymorphicType(relationship.identifier,relationship.definition,value,graph.store);}graph.registerPolymorphicType(type,value.type);}if(isBelongsTo(relationship)){relationship.state.hasReceivedData=true;relationship.state.isEmpty=false;if(isRemote){graph._addToTransaction(relationship);if(relationship.remoteState!==null){removeFromInverse(graph,relationship.remoteState,relationship.definition.inverseKey,identifier,isRemote);}relationship.remoteState=value;}if(relationship.localState!==value){if(!isRemote&&relationship.localState){removeFromInverse(graph,relationship.localState,relationship.definition.inverseKey,identifier,isRemote);}relationship.localState=value;notifyChange(graph,relationship);}}else if(isHasMany(relationship)){if(isRemote){// TODO this needs to alert stuffs\n// And patch state better\n// This is almost definitely wrong\n// WARNING WARNING WARNING\nif(!relationship.remoteMembers.has(value)){graph._addToTransaction(relationship);relationship.remoteState.push(value);relationship.remoteMembers.add(value);if(relationship.additions?.has(value)){relationship.additions.delete(value);}else{relationship.isDirty=true;relationship.state.hasReceivedData=true;flushCanonical(graph,relationship);}}}else{// if we are not dirty but have a null localState then we\n// are mutating a relationship that has never been fetched\n// so we initialize localState to an empty array\nif(!relationship.isDirty&&!relationship.localState){relationship.localState=[];}if(_add(graph,identifier,relationship,value,null,isRemote)){notifyChange(graph,relationship);}}}else{if(isRemote){if(!relationship.remoteMembers.has(value)){relationship.remoteMembers.add(value);relationship.localMembers.add(value);}}else{if(!relationship.localMembers.has(value)){relationship.localMembers.add(value);}}}}function notifyInverseOfPotentialMaterialization(graph,identifier,key,value,isRemote){const relationship=graph.get(identifier,key);if(isHasMany(relationship)&&isRemote&&relationship.remoteMembers.has(value)){notifyChange(graph,relationship);}}function removeFromInverse(graph,identifier,key,value,isRemote){const relationship=graph.get(identifier,key);if(isBelongsTo(relationship)){relationship.state.isEmpty=true;if(isRemote){graph._addToTransaction(relationship);relationship.remoteState=null;}if(relationship.localState===value){relationship.localState=null;notifyChange(graph,relationship);}}else if(isHasMany(relationship)){if(isRemote){graph._addToTransaction(relationship);if(_removeRemote(relationship,value)){notifyChange(graph,relationship);}}else{if(_removeLocal(relationship,value)){notifyChange(graph,relationship);}}}else{if(isRemote){relationship.remoteMembers.delete(value);relationship.localMembers.delete(value);}else{if(value&&relationship.localMembers.has(value)){relationship.localMembers.delete(value);}}}}function flushCanonical(graph,rel){if(rel.accessed){graph._scheduleLocalSync(rel);}}function replaceRelatedRecord(graph,op,isRemote=false){const relationship=graph.get(op.record,op.field);(test=>{if(!test){throw new Error(`You can only '${op.op}' on a belongsTo relationship. ${op.record.type}.${op.field} is a ${relationship.definition.kind}`);}})(isBelongsTo(relationship));if(isRemote){graph._addToTransaction(relationship);}const{definition,state}=relationship;const prop=isRemote?'remoteState':'localState';const existingState=relationship[prop];/*\n    case 1:1\n    ========\n    In a bi-directional graph with 1:1 edges, replacing a value\n    results in up-to 4 discrete value transitions.\n     If: A <-> B, C <-> D is the initial state,\n    and: A <-> C, B, D is the final state\n     then we would undergo the following 4 transitions.\n     remove A from B\n    add C to A\n    remove C from D\n    add A to C\n     case 1:many\n    ===========\n    In a bi-directional graph with 1:Many edges, replacing a value\n    results in up-to 3 discrete value transitions.\n     If: A<->>B<<->D, C<<->D is the initial state (double arrows representing the many side)\n    And: A<->>C<<->D, B<<->D is the final state\n     Then we would undergo three transitions.\n     remove A from B\n    add C to A.\n    add A to C\n     case 1:?\n    ========\n    In a uni-directional graph with 1:? edges (modeled in EmberData with `inverse:null`) with\n    artificial (implicit) inverses, replacing a value results in up-to 3 discrete value transitions.\n    This is because a 1:? relationship is effectively 1:many.\n     If: A->B, C->B is the initial state\n    And: A->C, C->B is the final state\n     Then we would undergo three transitions.\n     Remove A from B\n    Add C to A\n    Add A to C\n  */// nothing for us to do\nif(op.value===existingState){// if we were empty before but now know we are empty this needs to be true\nstate.hasReceivedData=true;// if this is a remote update we still sync\nif(isRemote){const{localState}=relationship;// don't sync if localState is a new record and our remoteState is null\nif(localState&&isNew(localState)&&!existingState){return;}if(existingState&&localState===existingState){notifyInverseOfPotentialMaterialization(graph,existingState,definition.inverseKey,op.record,isRemote);}else{// if localState does not match existingState then we know\n// we have a local mutation that has not been persisted yet\nif(localState!==op.value&&relationship.definition.resetOnRemoteUpdate!==false){relationship.localState=existingState;(0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(`EmberData is changing the default semantics of updates to the remote state of relationships.\\n\\nThe following local state was cleared from the <${relationship.identifier.type}>.${relationship.definition.key} belongsTo relationship but will not be once this deprecation is resolved:\\n\\n\\t${localState?'Added: '+localState.lid+'\\n\\t':''}${existingState?'Removed: '+existingState.lid:''}`,false,{id:'ember-data:deprecate-relationship-remote-update-clearing-local-state',for:'ember-data',since:{enabled:'5.3',available:'4.13'},until:'6.0',url:'https://deprecations.emberjs.com/v5.x#ember-data-deprecate-relationship-remote-update-clearing-local-state'});notifyChange(graph,relationship);}}}return;}// remove this value from the inverse if required\nif(existingState){removeFromInverse(graph,existingState,definition.inverseKey,op.record,isRemote);}// update value to the new value\nrelationship[prop]=op.value;state.hasReceivedData=true;state.isEmpty=op.value===null;state.isStale=false;state.hasFailedLoadAttempt=false;if(op.value){if(definition.type!==op.value.type){// assert(\n//   `The '<${definition.inverseType}>.${op.field}' relationship expects only '${definition.type}' records since it is not polymorphic. Received a Record of type '${op.value.type}'`,\n//   definition.isPolymorphic\n// );\n// TODO this should now handle the deprecation warning if isPolymorphic is not set\n// but the record does turn out to be polymorphic\n// this should still assert if the user is relying on legacy inheritance/mixins to\n// provide polymorphic behavior and has not yet added the polymorphic flags\n{assertPolymorphicType(relationship.identifier,definition,op.value,graph.store);}graph.registerPolymorphicType(definition.type,op.value.type);}addToInverse(graph,op.value,definition.inverseKey,op.record,isRemote);}if(isRemote){const{localState,remoteState}=relationship;if(localState&&isNew(localState)&&!remoteState){return;}// when localState does not match the new remoteState and\n// localState === existingState then we had no local mutation\n// and we can safely sync the new remoteState to local\nif(localState!==remoteState&&localState===existingState){relationship.localState=remoteState;notifyChange(graph,relationship);// But when localState does not match the new remoteState and\n// and localState !== existingState then we know we have a local mutation\n// that has not been persisted yet.\n}else{if(localState!==remoteState&&localState!==existingState&&relationship.definition.resetOnRemoteUpdate!==false){relationship.localState=remoteState;(0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(`EmberData is changing the default semantics of updates to the remote state of relationships.\\n\\nThe following local state was cleared from the <${relationship.identifier.type}>.${relationship.definition.key} belongsTo relationship but will not be once this deprecation is resolved:\\n\\n\\t${localState?'Added: '+localState.lid+'\\n\\t':''}${existingState?'Removed: '+existingState.lid:''}`,false,{id:'ember-data:deprecate-relationship-remote-update-clearing-local-state',for:'ember-data',since:{enabled:'5.3',available:'4.13'},until:'6.0',url:'https://deprecations.emberjs.com/v5.x#ember-data-deprecate-relationship-remote-update-clearing-local-state'});notifyChange(graph,relationship);}}}else{notifyChange(graph,relationship);}}function _deprecatedCompare(priorLocalState,newState,newMembers,prevState,prevSet,onAdd,onDel,remoteClearsLocal){const newLength=newState.length;const prevLength=prevState.length;const iterationLength=Math.max(newLength,prevLength);let changed=newMembers.size!==prevSet.size;let remoteOrderChanged=false;const added=new Set();const removed=new Set();const duplicates=new Map();const finalSet=new Set();const finalState=[];const priorLocalLength=priorLocalState?.length??0;for(let i=0,j=0;i<iterationLength;i++){let adv=false;let member;// accumulate anything added\nif(i<newLength){member=newState[i];if(!finalSet.has(member)){finalState[j]=member;finalSet.add(member);adv=true;if(!prevSet.has(member)){// Avoid unnecessarily notifying a change that already exists locally\nif(i<priorLocalLength){const priorLocalMember=priorLocalState[i];if(priorLocalMember!==member){changed=true;}}added.add(member);onAdd(member);}}else{let list=duplicates.get(member);if(list===undefined){list=[];duplicates.set(member,list);}list.push(i);}}// accumulate anything removed\nif(i<prevLength){const prevMember=prevState[i];// detect reordering, adjusting index for duplicates\n// j is always less than i and so if i < prevLength, j < prevLength\nif(member!==prevState[j]){// the new remote order does not match the current remote order\n// indicating a change in membership or reordering\nremoteOrderChanged=true;// however: if the new remote order matches the current local order\n// we can disregard the change notification generation so long as\n// we are not configured to reset on remote update (which is deprecated)\n{if(!remoteClearsLocal&&i<priorLocalLength){const priorLocalMember=priorLocalState[j];if(priorLocalMember!==member){changed=true;}}else{changed=true;}}// if remote order hasn't changed but local order differs\n// and we are configured to reset on remote update (which is deprecated)\n// then we still need to mark the relationship as changed\n}else{if(remoteClearsLocal){if(!changed&&j<priorLocalLength){const priorLocalMember=priorLocalState[j];if(priorLocalMember!==member){changed=true;}}}}if(!newMembers.has(prevMember)){changed=true;removed.add(prevMember);onDel(prevMember);}}else if(adv&&j<prevLength&&member!==prevState[j]){changed=true;}if(adv){j++;}}const diff={add:added,del:removed,finalState,finalSet,changed,remoteOrderChanged};return{diff,duplicates};}function _compare(priorLocalState,finalState,finalSet,prevState,prevSet,onAdd,onDel,remoteClearsLocal){const finalLength=finalState.length;const prevLength=prevState.length;const iterationLength=Math.max(finalLength,prevLength);const equalLength=priorLocalState?finalLength===priorLocalState.length:finalLength===prevLength;let remoteOrderChanged=finalSet.size!==prevSet.size;let changed=priorLocalState?finalSet.size!==priorLocalState.length:remoteOrderChanged;const added=new Set();const removed=new Set();const priorLocalLength=priorLocalState?.length??0;{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.DEBUG_RELATIONSHIP_NOTIFICATIONS||globalThis.getWarpDriveRuntimeConfig().debug.DEBUG_RELATIONSHIP_NOTIFICATIONS){// eslint-disable-next-line @typescript-eslint/no-unused-expressions\nchanged&&// eslint-disable-next-line no-console\nconsole.log(`changed because ${priorLocalState?'finalSet.size !== priorLocalState.length':'finalSet.size !== prevSet.size'}`);}}for(let i=0;i<iterationLength;i++){let member;// accumulate anything added\nif(i<finalLength){member=finalState[i];if(!prevSet.has(member)){// Avoid unnecessarily notifying a change that already exists locally\nif(i<priorLocalLength){const priorLocalMember=priorLocalState[i];if(priorLocalMember!==member){{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.DEBUG_RELATIONSHIP_NOTIFICATIONS||globalThis.getWarpDriveRuntimeConfig().debug.DEBUG_RELATIONSHIP_NOTIFICATIONS){// eslint-disable-next-line @typescript-eslint/no-unused-expressions, no-console\n!changed&&console.log(`changed because priorLocalMember !== member && !prevSet.has(member)`);}}changed=true;}}added.add(member);onAdd(member);}}// accumulate anything removed\nif(i<prevLength){const prevMember=prevState[i];// detect reordering\nif(equalLength&&member!==prevMember){// the new remote order does not match the current remote order\n// indicating a change in membership or reordering\nremoteOrderChanged=true;// however: if the new remote order matches the current local order\n// we can disregard the change notification generation so long as\n// we are not configured to reset on remote update (which is deprecated)\nif(i<priorLocalLength){const priorLocalMember=priorLocalState[i];if(priorLocalMember!==member){{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.DEBUG_RELATIONSHIP_NOTIFICATIONS||globalThis.getWarpDriveRuntimeConfig().debug.DEBUG_RELATIONSHIP_NOTIFICATIONS){// eslint-disable-next-line @typescript-eslint/no-unused-expressions, no-console\n!changed&&console.log(`changed because priorLocalMember !== member && member !== prevMember`);}}changed=true;}}else if(i<finalLength){// if we have exceeded the length of priorLocalState and we are within the range\n// of the finalState then we must have changed\n{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.DEBUG_RELATIONSHIP_NOTIFICATIONS||globalThis.getWarpDriveRuntimeConfig().debug.DEBUG_RELATIONSHIP_NOTIFICATIONS){// eslint-disable-next-line @typescript-eslint/no-unused-expressions, no-console\n!changed&&console.log(`changed because priorMember !== member && index >= priorLocalLength`);}}changed=true;}// if remote order hasn't changed but local order differs\n// and we are configured to reset on remote update (which is deprecated)\n// then we still need to mark the relationship as changed\n}else{if(remoteClearsLocal){if(equalLength&&!changed&&i<priorLocalLength){const priorLocalMember=priorLocalState[i];if(priorLocalMember!==prevMember){{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.DEBUG_RELATIONSHIP_NOTIFICATIONS||globalThis.getWarpDriveRuntimeConfig().debug.DEBUG_RELATIONSHIP_NOTIFICATIONS){// eslint-disable-next-line @typescript-eslint/no-unused-expressions, no-console\n!changed&&console.log(`changed because priorLocalMember !== prevMember && remoteClearsLocal`);}}changed=true;}}}}if(!finalSet.has(prevMember)){// if we are within finalLength, we can only be \"changed\" if we've already exceeded\n// the index range of priorLocalState, as otherwise the previous member may still\n// be removed.\n//\n// prior local: [1, 2, 3, 4]\n// final state: [1, 2, 3]\n// prev remote state: [1, 2, 5, 3, 4]\n// i === 2\n// prevMember === 5\n// !finalSet.has(prevMember) === true\n//\n// because we will become changed at i===3,\n// we do not need to worry about becoming changed at i===2\n// as the arrays until now are still the same\n//\n// prior local: [1, 2, 3]\n// final state: [1, 2, 3, 4]\n// prev remote state: [1, 2, 5, 3, 4]\n// i === 2\n// prevMember === 5\n// !finalSet.has(prevMember) === true\n//\n// because we will become changed at i===3\n// we do not need to worry about becoming changed at i===2\n//\n// prior local: [1, 2, 3]\n// final state: [1, 2, 3]\n// prev remote state: [1, 2, 5, 3, 4]\n// i === 2\n// prevMember === 5\n// !finalSet.has(prevMember) === true\n//\n// because we have same length and same membership order\n// we do not need to worry about becoming changed at i===2\n//\n// if you do not have a priorLocalState you can't be changed\n// ergo, we never need to set changed in this branch.\n// this log can still be useful for debugging.\n{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.DEBUG_RELATIONSHIP_NOTIFICATIONS||globalThis.getWarpDriveRuntimeConfig().debug.DEBUG_RELATIONSHIP_NOTIFICATIONS){// eslint-disable-next-line @typescript-eslint/no-unused-expressions\n!changed&&// eslint-disable-next-line no-console\nconsole.log(`changed because i >= priorLocalLength && i < finalLength && !finalSet.has(prevMember)`);}}//\n// we do still set remoteOrderChanged as it has\nremoteOrderChanged=true;removed.add(prevMember);onDel(prevMember);}}}return{add:added,del:removed,finalState,finalSet,changed,remoteOrderChanged};}function diffCollection(finalState,relationship,onAdd,onDel){const finalSet=new Set(finalState);const{localState:priorLocalState,remoteState,remoteMembers}=relationship;{if(finalState.length!==finalSet.size){const{diff,duplicates}=_deprecatedCompare(priorLocalState,finalState,finalSet,remoteState,remoteMembers,onAdd,onDel,relationship.definition.resetOnRemoteUpdate);{(0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(`Expected all entries in the relationship ${relationship.definition.type}:${relationship.definition.key} to be unique, see log for a list of duplicate entry indeces`,false,{id:'ember-data:deprecate-non-unique-relationship-entries',for:'ember-data',until:'6.0',since:{available:'4.13',enabled:'5.3'}});// eslint-disable-next-line no-console\nconsole.log(duplicates);}return diff;}}return _compare(priorLocalState,finalState,finalSet,remoteState,remoteMembers,onAdd,onDel,relationship.definition.resetOnRemoteUpdate);}function computeLocalState(storage){if(!storage.isDirty){(test=>{if(!test){throw new Error(`Expected localState to be present`);}})(Array.isArray(storage.localState));return storage.localState;}const state=storage.remoteState.slice();storage.removals?.forEach(v=>{const index=state.indexOf(v);state.splice(index,1);});storage.additions?.forEach(v=>{state.push(v);});storage.localState=state;storage.isDirty=false;return state;}/**\n * A function which attempts to add a value to the local state of a collection\n * relationship, and returns true if the value was added, or false if it was\n * already present.\n *\n * It will not generate a notification, will not update the relationships to dirty,\n * and will not update the inverse relationships, making it suitable for use as\n * an internal util to perform the just the addition to a specific side of a\n * relationship.\n *\n * @internal\n */function _add(graph,record,relationship,value,index,isRemote){return!isRemote?_addLocal(graph,record,relationship,value,index):_addRemote(graph,record,relationship,value,index);}function _addRemote(graph,record,relationship,value,index){(test=>{if(!test){throw new Error(`expected an identifier to add to the collection relationship`);}})(value);const{remoteMembers,additions,removals,remoteState}=relationship;(test=>{if(!test){throw new Error(`Cannot add a resource that is already present`);}})(!remoteMembers.has(value));if(remoteMembers.has(value)){return false;}// add to the remote state\nremoteMembers.add(value);(test=>{if(!test){throw new Error(`Cannot insert at an index that is not in bounds`);}})(index===null||index>=0&&index<remoteState.length);const hasValidIndex=index!==null&&index>=0&&index<remoteState.length;if(hasValidIndex){remoteState.splice(index,0,value);}else{remoteState.push(value);}// remove from additions if present\nif(additions?.has(value)){additions.delete(value);// nothing more to do this was our state already\nreturn false;}(test=>{if(!test){throw new Error(`Remote state indicated addition of a resource that was present only as a local mutation`);}})(!removals?.has(value));// if the relationship already needs to recalc, we don't bother\n// attempting to patch the localState\nif(relationship.isDirty){return true;}// if we have existing localState\n// we attempt to patch it without blowing it away\n// as this is more efficient than recomputing\n// it allows us to preserve local ordering\n// to a small extent. Local ordering should not\n// be relied upon as any remote change could blow it away\nif(relationship.localState){if(!hasValidIndex){relationship.localState.push(value);}else if(index===0){relationship.localState.unshift(value);}else if(!removals?.size){relationship.localState.splice(index,0,value);}else{relationship.isDirty=true;}}return true;}function _addLocal(graph,record,relationship,value,index){const{remoteMembers,removals}=relationship;let additions=relationship.additions;const hasPresence=remoteMembers.has(value)||additions?.has(value);if(hasPresence&&!removals?.has(value)){(test=>{if(!test){throw new Error(`Attempted to add the resource '${value.lid}' to the collection <${relationship.identifier.type}>.${relationship.definition.key} it was already in`);}})(hasPresence&&!removals?.has(value));return false;}if(removals?.has(value)){removals.delete(value);}else{if(!additions){additions=relationship.additions=new Set();}relationship.state.hasReceivedData=true;additions.add(value);const{type}=relationship.definition;if(type!==value.type){{assertPolymorphicType(record,relationship.definition,value,graph.store);}graph.registerPolymorphicType(value.type,type);}}// if we have existing localState\n// and we have an index\n// apply the change, as this is more efficient\n// than recomputing localState and\n// it allows us to preserve local ordering\n// to a small extend. Local ordering should not\n// be relied upon as any remote change will blow it away\nif(relationship.localState){if(index!==null){relationship.localState.splice(index,0,value);}else{relationship.localState.push(value);}}return true;}function _remove(graph,record,relationship,value,index,isRemote){return!isRemote?_removeLocal(relationship,value):_removeRemote(relationship,value);}function _removeLocal(relationship,value){(test=>{if(!test){throw new Error(`expected an identifier to remove from the collection relationship`);}})(value);const{remoteMembers,additions}=relationship;let removals=relationship.removals;const hasPresence=remoteMembers.has(value)||additions?.has(value);if(!hasPresence||removals?.has(value)){(test=>{if(!test){throw new Error(`Attempted to remove the resource '${value.lid}' from the collection <${relationship.identifier.type}>.${relationship.definition.key} but it was not present`);}})(!hasPresence||removals?.has(value));return false;}if(additions?.has(value)){additions.delete(value);}else{if(!removals){removals=relationship.removals=new Set();}removals.add(value);}// if we have existing localState\n// apply the change, as this is more efficient\n// than recomputing localState and\n// it allows us to preserve local ordering\n// to a small extend. Local ordering should not\n// be relied upon as any remote change will blow it away\nif(relationship.localState){const index=relationship.localState.indexOf(value);(test=>{if(!test){throw new Error(`Cannot remove a resource that is not present`);}})(index!==-1);relationship.localState.splice(index,1);}(test=>{if(!test){throw new Error(`Expected relationship to be dirty when performing a local mutation`);}})(relationship.localState||relationship.isDirty);return true;}function _removeRemote(relationship,value){(test=>{if(!test){throw new Error(`expected an identifier to remove from the collection relationship`);}})(value);const{remoteMembers,additions,removals,remoteState}=relationship;(test=>{if(!test){throw new Error(`Cannot remove a resource that is not present`);}})(remoteMembers.has(value));if(!remoteMembers.has(value)){return false;}// remove from remote state\nremoteMembers.delete(value);let index=remoteState.indexOf(value);(test=>{if(!test){throw new Error(`Cannot remove a resource that is not present`);}})(index!==-1);remoteState.splice(index,1);// remove from removals if present\nif(removals?.has(value)){removals.delete(value);// nothing more to do this was our state already\nreturn false;}(test=>{if(!test){throw new Error(`Remote state indicated removal of a resource that was present only as a local mutation`);}})(!additions?.has(value));// if we have existing localState\n// and we have an index\n// apply the change, as this is more efficient\n// than recomputing localState and\n// it allows us to preserve local ordering\n// to a small extend. Local ordering should not\n// be relied upon as any remote change will blow it away\nif(relationship.localState){index=relationship.localState.indexOf(value);(test=>{if(!test){throw new Error(`Cannot remove a resource that is not present`);}})(index!==-1);relationship.localState.splice(index,1);}(test=>{if(!test){throw new Error(`Expected relationship to be dirty when performing a local mutation`);}})(relationship.localState||relationship.isDirty);return true;}function rollbackRelationship(graph,identifier,field,relationship){if(isBelongsTo(relationship)){replaceRelatedRecord(graph,{op:'replaceRelatedRecord',record:identifier,field,value:relationship.remoteState},false);}else{replaceRelatedRecords(graph,{op:'replaceRelatedRecords',record:identifier,field,value:relationship.remoteState.slice()},false);// when the change was a \"reorder\" only we wont have generated\n// a notification yet.\n// if we give rollback a unique operation we can use the ability of\n// diff to report a separate `remoteOrderChanged` flag to trigger this\n// if needed to avoid the duplicate.\nnotifyChange(graph,relationship);}}function createState(){return{hasReceivedData:false,isEmpty:true,isStale:false,hasFailedLoadAttempt:false,shouldForceReload:false,hasDematerializedInverse:false};}function createCollectionEdge(definition,identifier){return{definition,identifier,state:createState(),remoteMembers:new Set(),remoteState:[],additions:null,removals:null,meta:null,links:null,localState:null,isDirty:false,transactionRef:0,accessed:false,_diff:undefined};}function legacyGetCollectionRelationshipData(source,getRemoteState){source.accessed=true;const payload={};if(source.state.hasReceivedData){payload.data=getRemoteState?source.remoteState.slice():computeLocalState(source);}if(source.links){payload.links=source.links;}if(source.meta){payload.meta=source.meta;}return payload;}function createImplicitEdge(definition,identifier){return{definition,identifier,localMembers:new Set(),remoteMembers:new Set()};}/*\n * @module @ember-data/graph\n *\n * Stores the data for one side of a \"single\" resource relationship.\n *\n * @class ResourceEdge\n * @internal\n */function createResourceEdge(definition,identifier){return{definition,identifier,state:createState(),transactionRef:0,localState:null,remoteState:null,meta:null,links:null,accessed:false};}function legacyGetResourceRelationshipData(source,getRemoteState){source.accessed=true;let data;const payload={};if(getRemoteState&&source.remoteState){data=source.remoteState;}else if(!getRemoteState&&source.localState){data=source.localState;}if((getRemoteState&&source.remoteState===null||source.localState===null)&&source.state.hasReceivedData){data=null;}if(source.links){payload.links=source.links;}if(data!==undefined){payload.data=data;}if(source.meta){payload.meta=source.meta;}return payload;}function addToRelatedRecords(graph,op,isRemote){const{record,value,index}=op;const relationship=graph.get(record,op.field);const _isBelongsTo=isBelongsTo(relationship);if(isRemote&&_isBelongsTo){if(value!==relationship.remoteState){const newOp={op:'replaceRelatedRecord',record,field:op.field,value:value};return replaceRelatedRecord(graph,newOp,isRemote);}(test=>{if(!test){throw new Error(`Expected '${value?.lid}' (the value to add) to NOT be the same as the remote state '${relationship.remoteState?.lid??'<null>'}'`);}})(value===relationship.remoteState);return;}(test=>{if(!test){throw new Error(`You can only '${op.op}' on a hasMany relationship. ${record.type}.${op.field} is a ${relationship.definition.kind}`);}})(isHasMany(relationship));// if we are not dirty but have a null localState then we\n// are mutating a relationship that has never been fetched\n// so we initialize localState to an empty array\nif(!relationship.isDirty&&!relationship.localState){relationship.localState=[];}if(Array.isArray(value)){for(let i=0;i<value.length;i++){addRelatedRecord(graph,relationship,record,value[i],index!==undefined?index+i:null,isRemote);}}else{addRelatedRecord(graph,relationship,record,value,index??null,isRemote);}notifyChange(graph,relationship);}function addRelatedRecord(graph,relationship,record,value,index,isRemote){(test=>{if(!test){throw new Error(`expected an identifier to add to the collection relationship`);}})(value);if(_add(graph,record,relationship,value,index,isRemote)){addToInverse(graph,value,relationship.definition.inverseKey,record,isRemote);}}function mergeIdentifier(graph,op,relationships){Object.keys(relationships).forEach(key=>{const rel=relationships[key];if(!rel){return;}mergeIdentifierForRelationship(graph,op,rel);});}function mergeIdentifierForRelationship(graph,op,rel){rel.identifier=op.value;forAllRelatedIdentifiers(rel,identifier=>{const inverse=graph.get(identifier,rel.definition.inverseKey);mergeInRelationship(graph,inverse,op);});}function mergeInRelationship(graph,rel,op){if(isBelongsTo(rel)){mergeBelongsTo(graph,rel,op);}else if(isHasMany(rel)){mergeHasMany(graph,rel,op);}else{mergeImplicit(graph,rel,op);}}function mergeBelongsTo(graph,rel,op){if(rel.remoteState===op.record){rel.remoteState=op.value;}if(rel.localState===op.record){rel.localState=op.value;notifyChange(graph,rel);}}function mergeHasMany(graph,rel,op){if(rel.remoteMembers.has(op.record)){rel.remoteMembers.delete(op.record);rel.remoteMembers.add(op.value);const index=rel.remoteState.indexOf(op.record);rel.remoteState.splice(index,1,op.value);rel.isDirty=true;}if(rel.additions?.has(op.record)){rel.additions.delete(op.record);rel.additions.add(op.value);rel.isDirty=true;}if(rel.removals?.has(op.record)){rel.removals.delete(op.record);rel.removals.add(op.value);rel.isDirty=true;}if(rel.isDirty){notifyChange(graph,rel);}}function mergeImplicit(graph,rel,op){if(rel.remoteMembers.has(op.record)){rel.remoteMembers.delete(op.record);rel.remoteMembers.add(op.value);}if(rel.localMembers.has(op.record)){rel.localMembers.delete(op.record);rel.localMembers.add(op.value);}}function removeFromRelatedRecords(graph,op,isRemote){const{record,value}=op;const relationship=graph.get(record,op.field);const _isBelongsTo=isBelongsTo(relationship);if(isRemote&&_isBelongsTo){if(value===relationship.remoteState){const newOp={op:'replaceRelatedRecord',record,field:op.field,value:null};return replaceRelatedRecord(graph,newOp,isRemote);}(test=>{if(!test){throw new Error(`Expected '${value?.lid}' (the value to remove) to be the same as the remote state '${relationship.remoteState?.lid??'<null>'}'`);}})(value===relationship.remoteState);return;}(test=>{if(!test){throw new Error(`You can only '${op.op}' on a hasMany relationship. ${record.type}.${op.field} is a ${relationship.definition.kind}`);}})(isHasMany(relationship));if(Array.isArray(value)){for(let i=0;i<value.length;i++){removeRelatedRecord(graph,record,relationship,value[i],op.index??null,isRemote);}}else{removeRelatedRecord(graph,record,relationship,value,op.index??null,isRemote);}notifyChange(graph,relationship);}function removeRelatedRecord(graph,record,relationship,value,index,isRemote){(test=>{if(!test){throw new Error(`expected an identifier to remove from the collection relationship`);}})(value);if(_remove(graph,record,relationship,value,index,isRemote)){removeFromInverse(graph,value,relationship.definition.inverseKey,record,isRemote);}}/*\n  This method normalizes a link to an \"links object\". If the passed link is\n  already an object it's returned without any modifications.\n\n  See http://jsonapi.org/format/#document-links for more information.\n*/function _normalizeLink(link){switch(typeof link){case'object':return link;case'string':return{href:link};}}/*\n    Updates the \"canonical\" or \"remote\" state of a relationship, replacing any existing\n    state and blowing away any local changes (excepting new records).\n*/function updateRelationshipOperation(graph,op){const relationship=graph.get(op.record,op.field);(test=>{if(!test){throw new Error(`Cannot update an implicit relationship`);}})(isHasMany(relationship)||isBelongsTo(relationship));const{definition,state,identifier}=relationship;const{isCollection}=definition;const payload=op.value;let hasRelationshipDataProperty=false;let hasUpdatedLink=false;if(payload.meta){relationship.meta=payload.meta;}if(payload.data!==undefined){hasRelationshipDataProperty=true;if(isCollection){// TODO deprecate this case. We\n// have tests saying we support it.\nif(payload.data===null){payload.data=[];}(test=>{if(!test){throw new Error(`Expected an array`);}})(Array.isArray(payload.data));const cache=graph.store.identifierCache;graph.update({op:'replaceRelatedRecords',record:identifier,field:op.field,value:upgradeIdentifiers(payload.data,cache)},true);}else{graph.update({op:'replaceRelatedRecord',record:identifier,field:op.field,value:payload.data?graph.store.identifierCache.upgradeIdentifier(payload.data):null},true);}}else if(definition.isAsync===false&&!state.hasReceivedData){hasRelationshipDataProperty=true;if(isCollection){graph.update({op:'replaceRelatedRecords',record:identifier,field:op.field,value:[]},true);}else{graph.update({op:'replaceRelatedRecord',record:identifier,field:op.field,value:null},true);}}if(payload.links){const originalLinks=relationship.links;relationship.links=payload.links;if(payload.links.related){const relatedLink=_normalizeLink(payload.links.related);const currentLink=originalLinks&&originalLinks.related?_normalizeLink(originalLinks.related):null;const currentLinkHref=currentLink?currentLink.href:null;if(relatedLink&&relatedLink.href&&relatedLink.href!==currentLinkHref){(0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.warn)(`You pushed a record of type '${identifier.type}' with a relationship '${definition.key}' configured as 'async: false'. You've included a link but no primary data, this may be an error in your payload. EmberData will treat this relationship as known-to-be-empty.`,definition.isAsync||state.hasReceivedData,{id:'ds.store.push-link-for-sync-relationship'});(test=>{if(!test){throw new Error(`You have pushed a record of type '${identifier.type}' with '${definition.key}' as a link, but the value of that link is not a string.`);}})(typeof relatedLink.href==='string'||relatedLink.href===null);hasUpdatedLink=true;}}}/*\n       Data being pushed into the relationship might contain only data or links,\n       or a combination of both.\n        IF contains only data\n       IF contains both links and data\n        state.isEmpty -> true if is empty array (has-many) or is null (belongs-to)\n        state.hasReceivedData -> true\n        hasDematerializedInverse -> false\n        state.isStale -> false\n        allInverseRecordsAreLoaded -> run-check-to-determine\n        IF contains only links\n        state.isStale -> true\n       */relationship.state.hasFailedLoadAttempt=false;if(hasRelationshipDataProperty){const relationshipIsEmpty=payload.data===null||Array.isArray(payload.data)&&payload.data.length===0;// we don't need to notify here as the update op we pushed in above will notify once\n// membership is in the correct state.\nrelationship.state.hasReceivedData=true;relationship.state.isStale=false;relationship.state.hasDematerializedInverse=false;relationship.state.isEmpty=relationshipIsEmpty;}else if(hasUpdatedLink){// only notify stale if we have not previously received membership data.\n// within this same transaction\n// this prevents refetching when only one side of the relationship in the\n// payload contains the info while the other side contains just a link\n// this only works when the side with just a link is a belongsTo, as we\n// don't know if a hasMany has full information or not.\n// see #7049 for context.\nif(isCollection||!relationship.state.hasReceivedData||isStaleTransaction(relationship.transactionRef,graph._transaction)){relationship.state.isStale=true;notifyChange(graph,relationship);}else{relationship.state.isStale=false;}}}function isStaleTransaction(relationshipTransactionId,graphTransactionId){return relationshipTransactionId===0||// relationship has never notified\ngraphTransactionId===null||// we are not in a transaction\nrelationshipTransactionId<graphTransactionId// we are not part of the current transaction\n;}function upgradeIdentifiers(arr,cache){for(let i=0;i<arr.length;i++){arr[i]=cache.upgradeIdentifier(arr[i]);}return arr;}const Graphs=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_2__.getOrSetGlobal)('Graphs',new Map());/*\n * Graph acts as the cache for relationship data. It allows for\n * us to ask about and update relationships for a given Identifier\n * without requiring other objects for that Identifier to be\n * instantiated (such as `RecordData` or a `Record`)\n *\n * This also allows for us to make more substantive changes to relationships\n * with increasingly minor alterations to other portions of the internals\n * over time.\n *\n * The graph is made up of nodes and edges. Each unique identifier gets\n * its own node, which is a dictionary with a list of that node's edges\n * (or connections) to other nodes. In `Model` terms, a node represents a\n * record instance, with each key (an edge) in the dictionary correlating\n * to either a `hasMany` or `belongsTo` field on that record instance.\n *\n * The value for each key, or `edge` is the identifier(s) the node relates\n * to in the graph from that key.\n */class Graph{constructor(store){this._definitionCache=Object.create(null);this._metaCache=Object.create(null);this._potentialPolymorphicTypes=Object.create(null);this.identifiers=new Map();this.store=store;this.isDestroyed=false;this._willSyncRemote=false;this._willSyncLocal=false;this._pushedUpdates={belongsTo:undefined,hasMany:undefined,deletions:[]};this._updatedRelationships=new Set();this._transaction=null;this._removing=null;this.silenceNotifications=false;}has(identifier,propertyName){const relationships=this.identifiers.get(identifier);if(!relationships){return false;}return relationships[propertyName]!==undefined;}getDefinition(identifier,propertyName){let defs=this._metaCache[identifier.type];let meta=defs?.[propertyName];if(!meta){const info=/*#__NOINLINE__*/upgradeDefinition(this,identifier,propertyName);(test=>{if(!test){throw new Error(`Could not determine relationship information for ${identifier.type}.${propertyName}`);}})(info!==null);// if (info.rhs_definition?.kind === 'implicit') {\n// we should possibly also do this\n// but it would result in being extremely permissive for other relationships by accident\n// this.registerPolymorphicType(info.rhs_baseModelName, identifier.type);\n// }\nmeta=/*#__NOINLINE__*/isLHS(info,identifier.type,propertyName)?info.lhs_definition:info.rhs_definition;defs=this._metaCache[identifier.type]=defs||{};defs[propertyName]=meta;}return meta;}get(identifier,propertyName){(test=>{if(!test){throw new Error(`expected propertyName`);}})(propertyName);let relationships=this.identifiers.get(identifier);if(!relationships){relationships=Object.create(null);this.identifiers.set(identifier,relationships);}let relationship=relationships[propertyName];if(!relationship){const meta=this.getDefinition(identifier,propertyName);if(meta.kind==='belongsTo'){relationship=relationships[propertyName]=createResourceEdge(meta,identifier);}else if(meta.kind==='hasMany'){relationship=relationships[propertyName]=createCollectionEdge(meta,identifier);}else{(test=>{if(!test){throw new Error(`Expected kind to be implicit`);}})(meta.kind==='implicit'&&meta.isImplicit===true);relationship=relationships[propertyName]=createImplicitEdge(meta,identifier);}}return relationship;}getData(identifier,propertyName){const relationship=this.get(identifier,propertyName);(test=>{if(!test){throw new Error(`Cannot getData() on an implicit relationship`);}})(!isImplicit(relationship));if(isBelongsTo(relationship)){return legacyGetResourceRelationshipData(relationship,false);}return legacyGetCollectionRelationshipData(relationship,false);}getRemoteData(identifier,propertyName){const relationship=this.get(identifier,propertyName);(test=>{if(!test){throw new Error(`Cannot getRemoteData() on an implicit relationship`);}})(!isImplicit(relationship));if(isBelongsTo(relationship)){return legacyGetResourceRelationshipData(relationship,true);}return legacyGetCollectionRelationshipData(relationship,true);}/*\n   * Allows for the graph to dynamically discover polymorphic connections\n   * without needing to walk prototype chains.\n   *\n   * Used by edges when an added `type` does not match the expected `type`\n   * for that edge.\n   *\n   * Currently we assert before calling this. For a public API we will want\n   * to call out to the schema manager to ask if we should consider these\n   * types as equivalent for a given relationship.\n   */registerPolymorphicType(type1,type2){const typeCache=this._potentialPolymorphicTypes;let t1=typeCache[type1];if(!t1){t1=typeCache[type1]=Object.create(null);}t1[type2]=true;let t2=typeCache[type2];if(!t2){t2=typeCache[type2]=Object.create(null);}t2[type1]=true;}/*\n   TODO move this comment somewhere else\n   implicit relationships are relationships which have not been declared but the inverse side exists on\n   another record somewhere\n    For example if there was:\n    ```app/models/comment.js\n   import Model, { attr } from '@ember-data/model';\n    export default class Comment extends Model {\n     @attr text;\n   }\n   ```\n    and there is also:\n    ```app/models/post.js\n   import Model, { attr, hasMany } from '@ember-data/model';\n    export default class Post extends Model {\n     @attr title;\n     @hasMany('comment', { async: true, inverse: null }) comments;\n   }\n   ```\n    Then we would have a implicit 'post' relationship for the comment record in order\n   to be do things like remove the comment from the post if the comment were to be deleted.\n  */isReleasable(identifier){const relationships=this.identifiers.get(identifier);if(!relationships){{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.LOG_GRAPH||globalThis.getWarpDriveRuntimeConfig().debug.LOG_GRAPH){// eslint-disable-next-line no-console\nconsole.log(`graph: RELEASABLE ${String(identifier)}`);}}return true;}const keys=Object.keys(relationships);for(let i=0;i<keys.length;i++){const relationship=relationships[keys[i]];// account for previously unloaded relationships\n// typically from a prior deletion of a record that pointed to this one implicitly\nif(relationship===undefined){continue;}(test=>{if(!test){throw new Error(`Expected a relationship`);}})(relationship);if(relationship.definition.inverseIsAsync&&!isNew(identifier)){{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.LOG_GRAPH||globalThis.getWarpDriveRuntimeConfig().debug.LOG_GRAPH){// eslint-disable-next-line no-console\nconsole.log(`graph: <<NOT>> RELEASABLE ${String(identifier)}`);}}return false;}}{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.LOG_GRAPH||globalThis.getWarpDriveRuntimeConfig().debug.LOG_GRAPH){// eslint-disable-next-line no-console\nconsole.log(`graph: RELEASABLE ${String(identifier)}`);}}return true;}unload(identifier,silenceNotifications){{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.LOG_GRAPH||globalThis.getWarpDriveRuntimeConfig().debug.LOG_GRAPH){// eslint-disable-next-line no-console\nconsole.log(`graph: unload ${String(identifier)}`);}}const relationships=this.identifiers.get(identifier);if(relationships){// cleans up the graph but retains some nodes\n// to allow for rematerialization\nObject.keys(relationships).forEach(key=>{const rel=relationships[key];if(!rel){return;}/*#__NOINLINE__*/destroyRelationship(this,rel,silenceNotifications);if(/*#__NOINLINE__*/isImplicit(rel)){// @ts-expect-error\nrelationships[key]=undefined;}});}}_isDirty(identifier,field){const relationships=this.identifiers.get(identifier);if(!relationships){return false;}const relationship=relationships[field];if(!relationship){return false;}if(isBelongsTo(relationship)){return relationship.localState!==relationship.remoteState;}else if(isHasMany(relationship)){const hasAdditions=relationship.additions!==null&&relationship.additions.size>0;const hasRemovals=relationship.removals!==null&&relationship.removals.size>0;return hasAdditions||hasRemovals||isReordered(relationship);}return false;}getChanged(identifier){const relationships=this.identifiers.get(identifier);const changed=new Map();if(!relationships){return changed;}const keys=Object.keys(relationships);for(let i=0;i<keys.length;i++){const field=keys[i];const relationship=relationships[field];if(!relationship){continue;}if(isBelongsTo(relationship)){if(relationship.localState!==relationship.remoteState){changed.set(field,{kind:'resource',remoteState:relationship.remoteState,localState:relationship.localState});}}else if(isHasMany(relationship)){const hasAdditions=relationship.additions!==null&&relationship.additions.size>0;const hasRemovals=relationship.removals!==null&&relationship.removals.size>0;const reordered=isReordered(relationship);if(hasAdditions||hasRemovals||reordered){changed.set(field,{kind:'collection',additions:new Set(relationship.additions),removals:new Set(relationship.removals),remoteState:relationship.remoteState,localState:legacyGetCollectionRelationshipData(relationship,false).data||[],reordered});}}}return changed;}hasChanged(identifier){const relationships=this.identifiers.get(identifier);if(!relationships){return false;}const keys=Object.keys(relationships);for(let i=0;i<keys.length;i++){if(this._isDirty(identifier,keys[i])){return true;}}return false;}rollback(identifier){const relationships=this.identifiers.get(identifier);const changed=[];if(!relationships){return changed;}const keys=Object.keys(relationships);for(let i=0;i<keys.length;i++){const field=keys[i];const relationship=relationships[field];if(!relationship){continue;}if(this._isDirty(identifier,field)){rollbackRelationship(this,identifier,field,relationship);changed.push(field);}}return changed;}remove(identifier){{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.LOG_GRAPH||globalThis.getWarpDriveRuntimeConfig().debug.LOG_GRAPH){// eslint-disable-next-line no-console\nconsole.log(`graph: remove ${String(identifier)}`);}}(test=>{if(!test){throw new Error(`Cannot remove ${String(identifier)} while still removing ${String(this._removing)}`);}})(!this._removing);this._removing=identifier;this.unload(identifier);this.identifiers.delete(identifier);this._removing=null;}/*\n   * Remote state changes\n   */push(op){{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.LOG_GRAPH||globalThis.getWarpDriveRuntimeConfig().debug.LOG_GRAPH){// eslint-disable-next-line no-console\nconsole.log(`graph: push ${String(op.record)}`,op);}}if(op.op==='deleteRecord'){this._pushedUpdates.deletions.push(op);}else{const definition=this.getDefinition(op.record,op.field);(test=>{if(!test){throw new Error(`Cannot push a remote update for an implicit relationship`);}})(definition.kind!=='implicit');addPending(this._pushedUpdates,definition,op);}if(!this._willSyncRemote){this._willSyncRemote=true;const store=getStore(this.store);if(!store._cbs){store._run(()=>this._flushRemoteQueue());}else{store._schedule('coalesce',()=>this._flushRemoteQueue());}}}/*\n   * Local state changes\n   */update(op,isRemote=false){(test=>{if(!test){throw new Error(`Cannot update an implicit relationship`);}})(op.op==='deleteRecord'||op.op==='mergeIdentifiers'||!isImplicit(this.get(op.record,op.field)));{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.LOG_GRAPH||globalThis.getWarpDriveRuntimeConfig().debug.LOG_GRAPH){// eslint-disable-next-line no-console\nconsole.log(`graph: update (${isRemote?'remote':'local'}) ${String(op.record)}`,op);}}switch(op.op){case'mergeIdentifiers':{const relationships=this.identifiers.get(op.record);if(relationships){/*#__NOINLINE__*/mergeIdentifier(this,op,relationships);}break;}case'update':case'updateRelationship':(test=>{if(!test){throw new Error(`Can only perform the operation updateRelationship on remote state`);}})(isRemote);{// in debug, assert payload validity eagerly\n// TODO add deprecations/assertion here for duplicates\nassertValidRelationshipPayload(this,op);}/*#__NOINLINE__*/updateRelationshipOperation(this,op);break;case'deleteRecord':{(test=>{if(!test){throw new Error(`Can only perform the operation deleteRelationship on remote state`);}})(isRemote);const identifier=op.record;const relationships=this.identifiers.get(identifier);if(relationships){Object.keys(relationships).forEach(key=>{const rel=relationships[key];if(!rel){return;}// works together with the has check\n// @ts-expect-error\nrelationships[key]=undefined;/*#__NOINLINE__*/removeCompletelyFromInverse(this,rel);});this.identifiers.delete(identifier);}break;}case'replaceRelatedRecord':/*#__NOINLINE__*/replaceRelatedRecord(this,op,isRemote);break;case'add':/*#__NOINLINE__*/addToRelatedRecords(this,op,isRemote);break;case'remove':/*#__NOINLINE__*/removeFromRelatedRecords(this,op,isRemote);break;case'replaceRelatedRecords':/*#__NOINLINE__*/replaceRelatedRecords(this,op,isRemote);break;default:(test=>{{throw new Error(`No local relationship update operation exists for '${op.op}'`);}})();}}_scheduleLocalSync(relationship){this._updatedRelationships.add(relationship);if(!this._willSyncLocal){this._willSyncLocal=true;getStore(this.store)._schedule('sync',()=>this._flushLocalQueue());}}_flushRemoteQueue(){if(!this._willSyncRemote){return;}{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.LOG_GRAPH||globalThis.getWarpDriveRuntimeConfig().debug.LOG_GRAPH){// eslint-disable-next-line no-console\nconsole.groupCollapsed(`Graph: Initialized Transaction`);}}let transactionRef=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_2__.peekTransient)('transactionRef')??0;this._transaction=++transactionRef;(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_2__.setTransient)('transactionRef',transactionRef);this._willSyncRemote=false;const updates=this._pushedUpdates;const{deletions,hasMany,belongsTo}=updates;updates.deletions=[];updates.hasMany=undefined;updates.belongsTo=undefined;for(let i=0;i<deletions.length;i++){this.update(deletions[i],true);}if(hasMany){flushPending(this,hasMany);}if(belongsTo){flushPending(this,belongsTo);}this._transaction=null;{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.LOG_GRAPH||globalThis.getWarpDriveRuntimeConfig().debug.LOG_GRAPH){// eslint-disable-next-line no-console\nconsole.log(`Graph: transaction finalized`);// eslint-disable-next-line no-console\nconsole.groupEnd();}}}_addToTransaction(relationship){(test=>{if(!test){throw new Error(`expected a transaction`);}})(this._transaction!==null);{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.LOG_GRAPH||globalThis.getWarpDriveRuntimeConfig().debug.LOG_GRAPH){// eslint-disable-next-line no-console\nconsole.log(`Graph: ${String(relationship.identifier)} ${relationship.definition.key} added to transaction`);}}relationship.transactionRef=this._transaction;}_flushLocalQueue(){if(!this._willSyncLocal){return;}if(this.silenceNotifications){this.silenceNotifications=false;this._updatedRelationships=new Set();return;}this._willSyncLocal=false;const updated=this._updatedRelationships;this._updatedRelationships=new Set();updated.forEach(rel=>notifyChange(this,rel));}destroy(){Graphs.delete(this.store);{Graphs.delete(getStore(this.store));if(Graphs.size){Graphs.forEach((_,key)=>{(test=>{if(!test){throw new Error(`Memory Leak Detected, likely the test or app instance previous to this was not torn down properly`);}})(!key.isDestroyed&&!key.isDestroying);});}}this.identifiers.clear();this.store=null;this.isDestroyed=true;}}function flushPending(graph,ops){ops.forEach(type=>{type.forEach(opList=>{flushPendingList(graph,opList);});});}function flushPendingList(graph,opList){for(let i=0;i<opList.length;i++){graph.update(opList[i],true);}}// Handle dematerialization for relationship `rel`.  In all cases, notify the\n// relationship of the dematerialization: this is done so the relationship can\n// notify its inverse which needs to update state\n//\n// If the inverse is sync, unloading this record is treated as a client-side\n// delete, so we remove the inverse records from this relationship to\n// disconnect the graph.  Because it's not async, we don't need to keep around\n// the identifier as an id-wrapper for references\nfunction destroyRelationship(graph,rel,silenceNotifications){if(isImplicit(rel)){if(graph.isReleasable(rel.identifier)){/*#__NOINLINE__*/removeCompletelyFromInverse(graph,rel);}return;}const{identifier}=rel;const{inverseKey}=rel.definition;if(!rel.definition.inverseIsImplicit){/*#__NOINLINE__*/forAllRelatedIdentifiers(rel,inverseIdentifer=>/*#__NOINLINE__*/notifyInverseOfDematerialization(graph,inverseIdentifer,inverseKey,identifier,silenceNotifications));}if(!rel.definition.inverseIsImplicit&&!rel.definition.inverseIsAsync){rel.state.isStale=true;/*#__NOINLINE__*/clearRelationship(rel);// necessary to clear relationships in the ui from dematerialized records\n// hasMany is managed by Model which calls `retreiveLatest` after\n// dematerializing the resource-cache instance.\n// but sync belongsTo requires this since they don't have a proxy to update.\n// so we have to notify so it will \"update\" to null.\n// we should discuss whether we still care about this, probably fine to just\n// leave the ui relationship populated since the record is destroyed and\n// internally we've fully cleaned up.\nif(!rel.definition.isAsync&&!silenceNotifications){/*#__NOINLINE__*/notifyChange(graph,rel);}}}function notifyInverseOfDematerialization(graph,inverseIdentifier,inverseKey,identifier,silenceNotifications){if(!graph.has(inverseIdentifier,inverseKey)){return;}const relationship=graph.get(inverseIdentifier,inverseKey);(test=>{if(!test){throw new Error(`expected no implicit`);}})(!isImplicit(relationship));// For remote members, it is possible that inverseRecordData has already been associated to\n// to another record. For such cases, do not dematerialize the inverseRecordData\nif(!isBelongsTo(relationship)||!relationship.localState||identifier===relationship.localState){/*#__NOINLINE__*/removeDematerializedInverse(graph,relationship,identifier,silenceNotifications);}}function clearRelationship(relationship){if(isBelongsTo(relationship)){relationship.localState=null;relationship.remoteState=null;relationship.state.hasReceivedData=false;relationship.state.isEmpty=true;}else{relationship.remoteMembers.clear();relationship.remoteState=[];relationship.additions=null;relationship.removals=null;relationship.localState=null;}}function removeDematerializedInverse(graph,relationship,inverseIdentifier,silenceNotifications){if(isBelongsTo(relationship)){const localInverse=relationship.localState;if(!relationship.definition.isAsync||localInverse&&isNew(localInverse)){// unloading inverse of a sync relationship is treated as a client-side\n// delete, so actually remove the models don't merely invalidate the cp\n// cache.\n// if the record being unloaded only exists on the client, we similarly\n// treat it as a client side delete\nif(relationship.localState===localInverse&&localInverse!==null){relationship.localState=null;}if(relationship.remoteState===localInverse&&localInverse!==null){relationship.remoteState=null;relationship.state.hasReceivedData=true;relationship.state.isEmpty=true;if(relationship.localState&&!isNew(relationship.localState)){relationship.localState=null;}}}else{relationship.state.hasDematerializedInverse=true;}if(!silenceNotifications){notifyChange(graph,relationship);}}else{if(!relationship.definition.isAsync||inverseIdentifier&&isNew(inverseIdentifier)){// unloading inverse of a sync relationship is treated as a client-side\n// delete, so actually remove the models don't merely invalidate the cp\n// cache.\n// if the record being unloaded only exists on the client, we similarly\n// treat it as a client side delete\n/*#__NOINLINE__*/removeIdentifierCompletelyFromRelationship(graph,relationship,inverseIdentifier);}else{relationship.state.hasDematerializedInverse=true;}if(!silenceNotifications){notifyChange(graph,relationship);}}}function removeCompletelyFromInverse(graph,relationship){const{identifier}=relationship;const{inverseKey}=relationship.definition;forAllRelatedIdentifiers(relationship,inverseIdentifier=>{if(graph.has(inverseIdentifier,inverseKey)){removeIdentifierCompletelyFromRelationship(graph,graph.get(inverseIdentifier,inverseKey),identifier);}});if(isBelongsTo(relationship)){if(!relationship.definition.isAsync){clearRelationship(relationship);}relationship.localState=null;}else if(isHasMany(relationship)){if(!relationship.definition.isAsync){clearRelationship(relationship);notifyChange(graph,relationship);}}else{relationship.remoteMembers.clear();relationship.localMembers.clear();}}function addPending(cache,definition,op){const cacheForKind=cache[definition.kind]=cache[definition.kind]||new Map();let cacheForType=cacheForKind.get(definition.inverseType);if(!cacheForType){cacheForType=new Map();cacheForKind.set(definition.inverseType,cacheForType);}let cacheForField=cacheForType.get(op.field);if(!cacheForField){cacheForField=[];cacheForType.set(op.field,cacheForField);}cacheForField.push(op);}function isReordered(relationship){// if we are dirty we are never re-ordered because accessing\n// the state would flush away any reordering.\nif(relationship.isDirty){return false;}const{remoteState,localState,additions,removals}=relationship;if(localState===null){// the relationship has never been accessed, so it hasn't been reordered either\nreturn false;}for(let i=0,j=0;i<remoteState.length;i++){const member=remoteState[i];const localMember=localState[j];if(member!==localMember){if(removals&&removals.has(member)){// dont increment j because we want to skip this\ncontinue;}if(additions&&additions.has(localMember)){// increment j to skip this localMember\n// decrement i to repeat this remoteMember\nj++;i--;continue;}return true;}// if we made it here, increment j\nj++;}return false;}/**\n * <p align=\"center\">\n  <img\n    class=\"project-logo\"\n    src=\"https://raw.githubusercontent.com/emberjs/data/4612c9354e4c54d53327ec2cf21955075ce21294/ember-data-logo-light.svg#gh-light-mode-only\"\n    alt=\"EmberData\"\n    width=\"240px\"\n    title=\"EmberData\"\n    />\n</p>\n\n<p align=\"center\">Provides a performance tuned normalized graph for intelligently managing relationships between resources based on identity</p>\n\nWhile this Graph is abstract, it currently is a private implementation required as a peer-dependency by the [JSON:API Cache Implementation](https://github.com/emberjs/data/tree/main/packages/json-api).\n\nWe intend to make this Graph public API after some additional iteration during the 5.x timeframe, until then all APIs should be considered experimental and unstable, not fit for direct application or 3rd party library usage.\n\n## Installation\n\nInstall using your javascript package manager of choice. For instance with [pnpm](https://pnpm.io/)\n\n```no-highlight\npnpm add @ember-data/graph\n```\n\n  @module @ember-data/graph\n  @main @ember-data/graph\n*/function isStore(maybeStore){return maybeStore._instanceCache!==undefined;}function getWrapper(store){return isStore(store)?store._instanceCache._storeWrapper:store;}function peekGraph(store){return Graphs.get(getWrapper(store));}function graphFor(store){const wrapper=getWrapper(store);let graph=Graphs.get(wrapper);if(!graph){graph=new Graph(wrapper);Graphs.set(wrapper,graph);getStore(wrapper)._graph=graph;{if(getStore(wrapper).isDestroying){throw new Error(`Memory Leak Detected During Teardown`);}}}return graph;}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@ember-data/graph/dist/-private.js?");

/***/ }),

/***/ "./node_modules/@ember-data/json-api/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ember-data/json-api/dist/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ JSONAPICache)\n/* harmony export */ });\n/* harmony import */ var _ember_data_graph_private__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember-data/graph/-private */ \"./node_modules/@ember-data/graph/dist/-private.js\");\n/* harmony import */ var _ember_data_store_private__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/store/-private */ \"./node_modules/@ember-data/store/dist/-private.js\");\n/* harmony import */ var fuse_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! fuse.js */ \"./node_modules/fuse.js/dist/fuse.mjs\");\n/* harmony import */ var json_to_ast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! json-to-ast */ \"./node_modules/json-to-ast/build.js\");\n/* harmony import */ var json_to_ast__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(json_to_ast__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../@embroider/macros/src/addon/runtime */ \"./node_modules/@embroider/macros/src/addon/runtime.js\");\nfunction _defineProperty(e,r,t){return(r=_toPropertyKey(r))in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e;}function _toPropertyKey(t){var i=_toPrimitive(t,\"string\");return\"symbol\"==typeof i?i:i+\"\";}function _toPrimitive(t,r){if(\"object\"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||\"default\");if(\"object\"!=typeof i)return i;throw new TypeError(\"@@toPrimitive must return a primitive value.\");}return(\"string\"===r?String:Number)(t);}function validateDocumentFields(schema,jsonApiDoc){const{data,included}=jsonApiDoc;if(data===null){return;}if(typeof jsonApiDoc.data!=='object'){throw new Error(`Expected a resource object in the 'data' property in the document provided to the cache, but was ${typeof jsonApiDoc.data}`);}if(Array.isArray(data)){for(const resource of data){validateResourceFields(schema,resource,{verifyIncluded:true,included});}}else{validateResourceFields(schema,data,{verifyIncluded:true,included});}if(included){for(const resource of included){validateResourceFields(schema,resource,{verifyIncluded:false});}}}function validateResourceFields(schema,resource,options){if(!resource.relationships){return;}const resourceType=resource.type;const fields=schema.fields({type:resource.type});for(const[type,relationshipDoc]of Object.entries(resource.relationships)){const field=fields.get(type);if(!field){return;}switch(field.kind){case'belongsTo':{if(field.options.linksMode){validateBelongsToLinksMode(resourceType,field,relationshipDoc,options);}break;}case'hasMany':{if(field.options.linksMode){validateHasManyToLinksMode(resourceType,field);}break;}}}}function validateBelongsToLinksMode(resourceType,field,relationshipDoc,options){if(field.options.async){throw new Error(`Cannot fetch ${resourceType}.${field.name} because the field is in linksMode but async is not yet supported`);}if(!relationshipDoc.links?.related){throw new Error(`Cannot fetch ${resourceType}.${field.name} because the field is in linksMode but the related link is missing`);}const relationshipData=relationshipDoc.data;if(Array.isArray(relationshipData)){throw new Error(`Cannot fetch ${resourceType}.${field.name} because the relationship data for a belongsTo relationship is unexpectedly an array`);}// Explicitly allow `null`! Missing key or `undefined` are always invalid.\nif(relationshipData===undefined){throw new Error(`Cannot fetch ${resourceType}.${field.name} because the field is in linksMode but the relationship data is undefined`);}if(relationshipData===null){return;}if(!options.verifyIncluded){return;}const includedDoc=options.included?.find(doc=>doc.type===relationshipData.type&&doc.id===relationshipData.id);if(!includedDoc){throw new Error(`Cannot fetch ${resourceType}.${field.name} because the field is in linksMode but the related data is not included`);}}function validateHasManyToLinksMode(resourceType,field,_relationshipDoc,_options){if(field.options.async){throw new Error(`Cannot fetch ${resourceType}.${field.name} because the field is in linksMode but async hasMany is not yet supported`);}}function inspectType(obj){if(obj===null){return'null';}if(Array.isArray(obj)){return'array';}if(typeof obj==='object'){const proto=Object.getPrototypeOf(obj);if(proto===null){return'object';}if(proto===Object.prototype){return'object';}return`object (${proto.constructor?.name})`;}if(typeof obj==='function'){return'function';}if(typeof obj==='string'){return'string';}if(typeof obj==='number'){return'number';}if(typeof obj==='boolean'){return'boolean';}if(typeof obj==='symbol'){return'symbol';}if(typeof obj==='bigint'){return'bigint';}if(typeof obj==='undefined'){return'undefined';}return'unknown';}function isSimpleObject(obj){if(obj===null){return false;}if(Array.isArray(obj)){return false;}if(typeof obj!=='object'){return false;}const proto=Object.getPrototypeOf(obj);if(proto===null){return true;}if(proto===Object.prototype){return true;}return false;}const RELATIONSHIP_FIELD_KINDS=['belongsTo','hasMany','resource','collection'];class Reporter{constructor(capabilities,doc){_defineProperty(this,\"capabilities\",void 0);_defineProperty(this,\"contextDocument\",void 0);_defineProperty(this,\"errors\",[]);_defineProperty(this,\"ast\",void 0);_defineProperty(this,\"jsonStr\",void 0);// TODO @runspired make this configurable to consuming apps before\n// activating by default\n_defineProperty(this,\"strict\",{linkage:true,unknownType:true,unknownAttribute:true,unknownRelationship:true});_defineProperty(this,\"_fieldFilters\",new Map());this.capabilities=capabilities;this.contextDocument=doc;this.jsonStr=JSON.stringify(doc.content,null,2);this.ast=json_to_ast__WEBPACK_IMPORTED_MODULE_2___default()(this.jsonStr,{loc:true});}searchTypes(type){if(!this._typeFilter){const allTypes=this.schema.resourceTypes();this._typeFilter=new fuse_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](allTypes);}const result=this._typeFilter.search(type);return result;}searchFields(type,field){if(!this._fieldFilters.has(type)){const allFields=this.schema.fields({type});const attrs=Array.from(allFields.values()).filter(isRemoteField).map(v=>v.name);this._fieldFilters.set(type,new fuse_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](attrs));}const result=this._fieldFilters.get(type).search(field);return result;}get schema(){return this.capabilities.schema;}getLocation(path,kind){if(path.length===0){return this.ast.loc;}let priorNode=this.ast;let node=this.ast;for(const segment of path){//\n// handle array paths\n//\nif(typeof segment==='number'){(test=>{if(!test){throw new Error(`Because the segment is a number, expected a node of type Array`);}})(node.type==='Array');if(node.children&&node.children[segment]){priorNode=node;const childNode=node.children[segment];if(childNode.type==='Object'||childNode.type==='Array'){node=childNode;}else{// set to the closest node we can find\nreturn node.loc;}}else{// set to the closest node we can find\n// as we had no children\nreturn priorNode.loc;}//\n// handle object paths\n//\n}else{(test=>{if(!test){throw new Error(`Because the segment is a string, expected a node of type Object`);}})(node.type==='Object');const child=node.children.find(childCandidate=>{if(childCandidate.type==='Property'){return childCandidate.key.type==='Identifier'&&childCandidate.key.value===segment;}return false;});if(child){if(child.value.type==='Object'||child.value.type==='Array'){priorNode=node;node=child.value;}else{// set to the closest node we can find\nreturn kind==='key'?child.key.loc:child.value.loc;}}else{// set to the closest node we can find\nreturn priorNode.loc;}}}return node.loc;}error(path,message,kind='key'){const loc=this.getLocation(path,kind);this.errors.push({path,message,loc,type:'error',kind});}warn(path,message,kind='key'){const loc=this.getLocation(path,kind);this.errors.push({path,message,loc,type:'warning',kind});}info(path,message,kind='key'){const loc=this.getLocation(path,kind);this.errors.push({path,message,loc,type:'info',kind});}hasExtension(extensionName){return REGISTERED_EXTENSIONS.has(extensionName);}getExtension(extensionName){return REGISTERED_EXTENSIONS.get(extensionName);}report(colorize=true){const lines=this.jsonStr.split('\\n');// sort the errors by line, then by column, then by type\nconst{errors}=this;if(!errors.length){return;}errors.sort((a,b)=>{return a.loc.end.line<b.loc.end.line?-1:a.loc.end.column<b.loc.end.column?-1:compareType(a.type,b.type);});// store the errors in a map by line\nconst errorMap=new Map();for(const error of errors){const line=error.loc.end.line;if(!errorMap.has(line)){errorMap.set(line,[]);}errorMap.get(line).push(error);}// splice the errors into the lines\nconst errorLines=[];const colors=[];const counts={error:0,warning:0,info:0};const LINE_SIZE=String(lines.length).length;for(let i=0;i<lines.length;i++){const line=lines[i];errorLines.push(colorize?`${String(i+1).padEnd(LINE_SIZE,' ')}  \\t%c${line}%c`:`${String(i+1).padEnd(LINE_SIZE,' ')}  \\t${line}`);colors.push(`color: grey; background-color: transparent;`,// first color sets color\n`color: inherit; background-color: transparent;`// second color resets the color profile\n);if(errorMap.has(i+1)){const errorsForLine=errorMap.get(i+1);for(const error of errorsForLine){counts[error.type]++;const{loc,message}=error;const start=loc.end.line===loc.start.line?loc.start.column-1:loc.end.column-1;const end=loc.end.column-1;const symbol=error.type==='error'?'❌':error.type==='warning'?'⚠️':'ℹ️';const errorLine=colorize?`${''.padStart(LINE_SIZE,' ')+symbol}\\t${' '.repeat(start)}%c^${'~'.repeat(end-start)} %c//%c ${message}%c`:`${''.padStart(LINE_SIZE,' ')+symbol}\\t${' '.repeat(start)}^${'~'.repeat(end-start)} // ${message}`;errorLines.push(errorLine);colors.push(error.type==='error'?'color: red;':error.type==='warning'?'color: orange;':'color: blue;','color: grey;',error.type==='error'?'color: red;':error.type==='warning'?'color: orange;':'color: blue;','color: inherit; background-color: transparent;'// reset color\n);}}}const contextStr=`${counts.error} errors and ${counts.warning} warnings found in the {JSON:API} document returned by ${this.contextDocument.request?.method} ${this.contextDocument.request?.url}`;const errorString=contextStr+`\\n\\n`+errorLines.join('\\n');// eslint-disable-next-line no-console, @typescript-eslint/no-unused-expressions\ncolorize?console.log(errorString,...colors):console.log(errorString);}}// we always want to sort errors first, then warnings, then info\nfunction compareType(a,b){if(a===b){return 0;}if(a==='error'){return-1;}if(b==='error'){return 1;}if(a==='warning'){return-1;}if(b==='warning'){return 1;}return 0;}const REGISTERED_EXTENSIONS=new Map();function isMetaDocument(doc){return!(doc instanceof Error)&&doc.content&&!('data'in doc.content)&&!('included'in doc.content)&&'meta'in doc.content;}function isErrorDocument(doc){return doc instanceof Error;}function isPushedDocument(doc){return!!doc&&typeof doc==='object'&&'content'in doc&&!('request'in doc)&&!('response'in doc);}function logPotentialMatches(matches,kind){if(matches.length===0){return'';}if(matches.length===1){return`  Did you mean this available ${kind} \"${matches[0].item}\"?`;}const potentialMatches=matches.map(match=>match.item).join('\", \"');return`  Did you mean one of these available ${kind}s: \"${potentialMatches}\"?`;}function isRemoteField(v){return!(v.kind==='@local'||v.kind==='alias'||v.kind==='derived');}function getRemoteField(fields,key){const field=fields.get(key);if(!field){return undefined;}if(!isRemoteField(field)){return undefined;}return field;}const VALID_TOP_LEVEL_MEMBERS=['data','included','meta','jsonapi','links'];/**\n * Reports issues which violate the JSON:API spec for top-level members.\n *\n * Version: 1.1\n * Section: 7.1\n * Link: https://jsonapi.org/format/#document-top-level\n *\n * @internal\n */function validateTopLevelDocumentMembers(reporter,doc){const keys=Object.keys(doc);for(const key of keys){if(!VALID_TOP_LEVEL_MEMBERS.includes(key)){if(key.includes(':')){// TODO @runspired expose the API to enable folks to add validation for their own extensions\nconst extensionName=key.split(':')[0];if(reporter.hasExtension(extensionName)){const extension=reporter.getExtension(extensionName);extension(reporter,[key]);}else{reporter.warn([key],`Unrecognized extension ${extensionName}. The data provided by \"${key}\" will be ignored as it is not a valid {JSON:API} member`);}}else{reporter.error([key],`Unrecognized top-level member. The data it provides is ignored as it is not a valid {JSON:API} member`);}}}// additional rules for top-level members\n// ======================================\n// 1. MUST have either `data`, `errors`, or `meta`\nif(!('data'in doc)&&!('errors'in doc)&&!('meta'in doc)){reporter.error([],'A {JSON:API} Document must contain one-of `data` `errors` or `meta`');}// 2. MUST NOT have both `data` and `errors`\nif('data'in doc&&'errors'in doc){reporter.error(['data'],'A {JSON:API} Document MUST NOT contain both `data` and `errors` members');}// 3. MUST NOT have both `included` and `errors`\n// while not explicitly stated in the spec, this is a logical extension of the above rule\n// since `included` is only valid when `data` is present.\nif('included'in doc&&'errors'in doc){reporter.error(['included'],'A {JSON:API} Document MUST NOT contain both `included` and `errors` members');}// 4. MUST NOT have `included` if `data` is not present\nif('included'in doc&&!('data'in doc)){reporter.error(['included'],'A {JSON:API} Document MUST NOT contain `included` if `data` is not present');}// 5. MUST NOT have `included` if `data` is null\n// when strictly enforcing full linkage, we need to ensure that `included` is not present if `data` is null\n// however, most APIs will ignore this rule for DELETE requests, so unless strict linkage is enabled, we will only warn\n// about this issue.\nif('included'in doc&&doc.data===null){const isMaybeDelete=reporter.contextDocument.request?.method?.toUpperCase()==='DELETE'||reporter.contextDocument.request?.op==='deleteRecord';const method=!reporter.strict.linkage&&isMaybeDelete?'warn':'error';reporter[method](['included'],'A {JSON:API} Document MUST NOT contain `included` if `data` is null');}// Simple Validation of Top-Level Members\n// ==========================================\n// 1. `data` MUST be a single resource object or an array of resource objects or `null`\nif('data'in doc){const dataMemberHasAppropriateForm=doc.data===null||Array.isArray(doc.data)||isSimpleObject(doc.data);if(!dataMemberHasAppropriateForm){reporter.error(['data'],`The 'data' member MUST be a single resource object or an array of resource objects or null. Received data of type \"${inspectType(doc.data)}\"`);}}// 2. `included` MUST be an array of resource objects\nif('included'in doc){if(!Array.isArray(doc.included)){reporter.error(['included'],`The 'included' member MUST be an array of resource objects. Received data of type \"${inspectType(doc.included)}\"`);}}// 3. `meta` MUST be a simple object\nif('meta'in doc){if(!isSimpleObject(doc.meta)){reporter.error(['meta'],`The 'meta' member MUST be a simple object. Received data of type \"${inspectType(doc.meta)}\"`);}}// 4. `jsonapi` MUST be a simple object\nif('jsonapi'in doc){if(!isSimpleObject(doc.jsonapi)){reporter.error(['jsonapi'],`The 'jsonapi' member MUST be a simple object. Received data of type \"${inspectType(doc.jsonapi)}\"`);}}// 5. `links` MUST be a simple object\nif('links'in doc){if(!isSimpleObject(doc.links)){reporter.error(['links'],`The 'links' member MUST be a simple object. Received data of type \"${inspectType(doc.links)}\"`);}}// 6. `errors` MUST be an array of error objects\nif('errors'in doc){if(!Array.isArray(doc.errors)){reporter.error(['errors'],`The 'errors' member MUST be an array of error objects. Received data of type \"${inspectType(doc.errors)}\"`);}}}const VALID_COLLECTION_LINKS=['self','related','first','last','prev','next'];const VALID_RESOURCE_RELATIONSHIP_LINKS=['self','related'];const VALID_RESOURCE_LINKS=['self'];/**\n * Validates the links object in a top-level JSON API document or resource object\n *\n * Version: 1.1\n *\n * Section: 7.1 Top Level\n * Link: https://jsonapi.org/format/#document-top-level\n *\n * Section: 7.2.3 Resource Objects\n * Link: https://jsonapi.org/format/#document-resource-object-links\n *\n * Section: 7.2.2.2 Resource Relationships\n * Link: https://jsonapi.org/format/#document-resource-object-relationships\n *\n * Section: 7.6 Document Links\n * Link: https://jsonapi.org/format/#document-links\n *\n * @internal\n */function validateLinks(reporter,doc,type,path=['links']){if(!('links'in doc)){return;}if(!isSimpleObject(doc.links)){// this is a violation but we report it when validating section 7.1\nreturn;}// prettier-ignore\nconst VALID_TOP_LEVEL_LINKS=type==='collection-document'||type==='collection-relationship'?VALID_COLLECTION_LINKS:type==='resource-document'||type==='resource-relationship'?VALID_RESOURCE_RELATIONSHIP_LINKS:type==='resource'?VALID_RESOURCE_LINKS:[];const links=doc.links;const keys=Object.keys(links);for(const key of keys){if(!VALID_TOP_LEVEL_LINKS.includes(key)){reporter.warn([...path,key],`Unrecognized top-level link. The data it provides may be ignored as it is not a valid {JSON:API} link for a ${type}`);}// links may be either a string or an object with an href property or null\nif(links[key]===null);else if(typeof links[key]==='string'){if(links[key].length===0){reporter.warn([...path,key],`Expected a non-empty string, but received an empty string`);}// valid, though we should potentially validate the URL here\n}else if(isSimpleObject(links[key])){if('href'in links[key]){const linksKeys=Object.keys(links[key]);if(linksKeys.length>1){reporter.warn([...path,key],`Expected the links object to only have an href property, but received unknown keys ${linksKeys.filter(k=>k!=='href').join(', ')}`);}if(typeof links[key].href!=='string'){reporter.error([...path,key,'href'],`Expected a string value, but received ${inspectType(links[key].href)}`);}else{if(links[key].href.length===0){reporter.warn([...path,key,'href'],`Expected a non-empty string, but received an empty string`);}// valid, though we should potentially validate the URL here\n}}else{const linksKeys=Object.keys(links[key]);if(linksKeys.length>0){reporter.error([...path,key],`Expected the links object to have an href property, but received only the unknown keys ${linksKeys.join(', ')}`);}else{reporter.error([...path,key],`Expected the links object to have an href property`);}}}else{// invalid\nreporter.error([...path,key],`Expected a string, null, or an object with an href property for the link \"${key}\", but received ${inspectType(links[key])}`);}}}const SINGULAR_OPS=['createRecord','updateRecord','deleteRecord','findRecord','queryRecord'];/**\n * Validates the resource objects in either the `data` or `included` members of\n * JSON:API document.\n *\n * Version: 1.1\n * Section: 7.2\n * Link: https://jsonapi.org/format/#document-resource-objects\n *\n * @internal\n */function validateDocumentResources(reporter,doc){if('data'in doc){// scan for common mistakes of single vs multiple resource objects\nconst op=reporter.contextDocument.request?.op;if(op&&SINGULAR_OPS.includes(op)){if(Array.isArray(doc.data)){reporter.error(['data'],`\"${op}\" requests expect a single resource object in the returned data, but received an array`);}}// guard for a common mistake around deleteRecord\nif(op==='deleteRecord'){if(doc.data!==null){reporter.warn(['data'],`\"deleteRecord\" requests expect the data member to be null, but received ${inspectType(doc.data)}. This can sometimes cause unexpected resurrection of the deleted record.`);}}if(Array.isArray(doc.data)){doc.data.forEach((resource,index)=>{if(!isSimpleObject(resource)){reporter.error(['data',index],`Expected a resource object, but received ${inspectType(resource)}`);}else{validateResourceObject(reporter,resource,['data',index]);}});}else if(doc.data!==null){if(!isSimpleObject(doc.data)){reporter.error(['data'],`Expected a resource object, but received ${inspectType(doc.data)}`);}else{validateResourceObject(reporter,doc.data,['data']);}}}if('included'in doc&&Array.isArray(doc.included)){doc.included.forEach((resource,index)=>{if(!isSimpleObject(resource)){reporter.error(['included',index],`Expected a resource object, but received ${inspectType(resource)}`);}else{validateResourceObject(reporter,resource,['included',index]);}});}}function validateResourceObject(reporter,resource,path){validateTopLevelResourceShape(reporter,resource,path);}const VALID_TOP_LEVEL_RESOURCE_KEYS=['lid','id','type','attributes','relationships','meta','links'];function validateTopLevelResourceShape(reporter,resource,path){// a resource MUST have a string type\nif(!('type'in resource)){reporter.error([...path,'type'],`Expected a ResourceObject to have a type property`);}else if(typeof resource.type!=='string'){reporter.error([...path,'type'],`Expected a string value for the type property, but received ${inspectType(resource.type)}`,'value');}else if(resource.type.length===0){reporter.error([...path,'type'],`Expected a non-empty string value for the type property, but received an empty string`,'value');}else if(!reporter.schema.hasResource({type:resource.type})){const method=reporter.strict.unknownType?'error':'warn';const potentialTypes=reporter.searchTypes(resource.type);reporter[method]([...path,'type'],`Expected a schema to be available for the ResourceType \"${resource.type}\" but none was found.${logPotentialMatches(potentialTypes,'ResourceType')}`,'value');}// a resource MUST have a string ID\nif(!('id'in resource)){reporter.error([...path,'id'],`Expected a ResourceObject to have an id property`);}else if(typeof resource.id!=='string'){reporter.error([...path,'id'],`Expected a string value for the id property, but received ${inspectType(resource.id)}`,'value');}else if(resource.id.length===0){reporter.error([...path,'id'],`Expected a non-empty string value for the id property, but received an empty string`,'value');}// a resource MAY have a lid property\nif('lid'in resource&&typeof resource.lid!=='string'){reporter.error([...path,'lid'],`Expected a string value for the lid property, but received ${inspectType(resource.lid)}`,'value');}// a resource MAY have a meta property\nif('meta'in resource&&!isSimpleObject(resource.meta)){reporter.error([...path,'meta'],`Expected a simple object for the meta property, but received ${inspectType(resource.meta)}`,'value');}// a resource MAY have a links property\nif('links'in resource&&!isSimpleObject(resource.links)){reporter.error([...path,'links'],`Expected a simple object for the links property, but received ${inspectType(resource.links)}`,'value');}else if('links'in resource){validateLinks(reporter,resource,'resource',[...path,'links']);}const hasAttributes='attributes'in resource&&isSimpleObject(resource.attributes);const hasRelationships='relationships'in resource&&isSimpleObject(resource.relationships);// We expect at least one of attributes or relationships to be present\nif(!hasAttributes&&!hasRelationships){reporter.warn(path,`Expected a ResourceObject to have either attributes or relationships`);}// we expect at least one of attributes or relationships to be non-empty\nconst attributesLength=hasAttributes?Object.keys(resource.attributes).length:0;const relationshipsLength=hasRelationships?Object.keys(resource.relationships).length:0;if((hasAttributes||hasRelationships)&&attributesLength===0&&relationshipsLength===0){reporter.warn([...path,hasAttributes?'attributes':hasRelationships?'relationships':'attributes'],`Expected a ResourceObject to have either non-empty attributes or non-empty relationships`);}// check for unknown keys on the resource object\nconst keys=Object.keys(resource);for(const key of keys){if(!VALID_TOP_LEVEL_RESOURCE_KEYS.includes(key)){// check for extension keys\nif(key.includes(':')){const extensionName=key.split(':')[0];if(reporter.hasExtension(extensionName)){const extension=reporter.getExtension(extensionName);extension(reporter,[...path,key]);}else{reporter.warn([...path,key],`Unrecognized extension ${extensionName}. The data provided by \"${key}\" will be ignored as it is not a valid {JSON:API} ResourceObject member`);}}else{// check if this is an attribute or relationship\nlet didYouMean='  Likely this field should have been inside of either \"attributes\" or \"relationships\"';const type='type'in resource?resource.type:undefined;if(type&&reporter.schema.hasResource({type})){const fields=reporter.schema.fields({type});const field=getRemoteField(fields,key);if(field){const isRelationship=RELATIONSHIP_FIELD_KINDS.includes(field.kind);didYouMean=`  Based on the ResourceSchema for \"${type}\" this field is likely a ${field.kind} and belongs inside of ${isRelationship?'relationships':'attributes'}, e.g. \"${isRelationship?'relationships':'attributes'}\": { \"${key}\": { ... } }`;}else{const fieldMatches=reporter.searchFields(type,key);if(fieldMatches.length===1){const matchedField=fields.get(fieldMatches[0].item);const isRelationship=RELATIONSHIP_FIELD_KINDS.includes(matchedField.kind);didYouMean=`  Based on the ResourceSchema for \"${type}\" this field is likely a ${matchedField.kind} and belongs inside of ${isRelationship?'relationships':'attributes'}, e.g. \"${isRelationship?'relationships':'attributes'}\": { \"${matchedField.name}\": { ... } }`;}else if(fieldMatches.length>1){const matchedField=fields.get(fieldMatches[0].item);const isRelationship=RELATIONSHIP_FIELD_KINDS.includes(matchedField.kind);didYouMean=`  Based on the ResourceSchema for \"${type}\" this field is likely one of \"${fieldMatches.map(v=>v.item).join('\", \"')}\" and belongs inside of either \"attributes\" or \"relationships\", e.g. \"${isRelationship?'relationships':'attributes'}\": { \"${matchedField.name}\": { ... } }`;}}}reporter.error([...path,key],`Unrecognized ResourceObject member. The data it provides is ignored as it is not a valid {JSON:API} ResourceObject member.${didYouMean}`);}}}// if we have a schema, validate the individual attributes and relationships\nconst type='type'in resource?resource.type:undefined;if(type&&reporter.schema.hasResource({type})){if('attributes'in resource){validateResourceAttributes(reporter,type,resource.attributes,[...path,'attributes']);}if('relationships'in resource){validateResourceRelationships(reporter,type,resource.relationships,[...path,'relationships']);}}}function validateResourceAttributes(reporter,type,resource,path){const schema=reporter.schema.fields({type});for(const[key]of Object.entries(resource)){const field=getRemoteField(schema,key);const actualField=schema.get(key);if(!field&&actualField){reporter.warn([...path,key],`Expected the ${actualField.kind} field to not have its own resource data. Likely this field should either not be returned in this payload or the field definition should be updated in the schema.`);}else if(!field){if(key.includes(':')){const extensionName=key.split(':')[0];if(reporter.hasExtension(extensionName)){const extension=reporter.getExtension(extensionName);extension(reporter,[...path,key]);}else{reporter.warn([...path,key],`Unrecognized extension ${extensionName}. The data provided by \"${key}\" will be ignored as it is not a valid {JSON:API} ResourceObject member`);}}else{const method=reporter.strict.unknownAttribute?'error':'warn';// TODO @runspired when we check for fuzzy matches we can adjust the message to say\n// whether the expected field is an attribute or a relationship\nconst potentialFields=reporter.searchFields(type,key);reporter[method]([...path,key],`Unrecognized attribute. The data it provides is ignored as it is not part of the ResourceSchema for \"${type}\".${logPotentialMatches(potentialFields,'field')}`);}}else if(field&&RELATIONSHIP_FIELD_KINDS.includes(field.kind)){reporter.error([...path,key],`Expected the \"${key}\" field to be in \"relationships\" as it has kind \"${field.kind}\", but received data for it in \"attributes\".`);}}// TODO @runspired we should also deep-validate the field value\n// TODO @runspired we should validate that field values are valid JSON and not instances\n}function validateResourceRelationships(reporter,type,resource,path){const schema=reporter.schema.fields({type});for(const[key]of Object.entries(resource)){const field=getRemoteField(schema,key);const actualField=schema.get(key);if(!field&&actualField){reporter.warn([...path,key],`Expected the ${actualField.kind} field to not have its own resource data. Likely this field should either not be returned in this payload or the field definition should be updated in the schema.`);}else if(!field){if(key.includes(':')){const extensionName=key.split(':')[0];if(reporter.hasExtension(extensionName)){const extension=reporter.getExtension(extensionName);extension(reporter,[...path,key]);}else{reporter.warn([...path,key],`Unrecognized extension ${extensionName}. The data provided by \"${key}\" will be ignored as it is not a valid {JSON:API} ResourceObject member`);}}else{const method=reporter.strict.unknownRelationship?'error':'warn';// TODO @runspired when we check for fuzzy matches we can adjust the message to say\n// whether the expected field is an attribute or a relationship\nconst potentialFields=reporter.searchFields(type,key);reporter[method]([...path,key],`Unrecognized relationship. The data it provides is ignored as it is not part of the ResourceSchema for \"${type}\".${logPotentialMatches(potentialFields,'field')}`);}}else if(field&&!RELATIONSHIP_FIELD_KINDS.includes(field.kind)){reporter.error([...path,key],`Expected the \"${key}\" field to be in \"attributes\" as it has kind \"${field.kind}\", but received data for it in \"relationships\".`);}}// TODO @runspired we should also deep-validate the relationship payload\n// TODO @runspired we should validate linksMode requirements for both Polaris and Legacy modes\n// TODO @runspired we should warn if the discovered resource-type in a relationship is the abstract\n//   type instead of the concrete type.\n}function validateDocument(capabilities,doc){(test=>{if(!test){throw new Error(`Expected a JSON:API Document as the content provided to the cache, received ${typeof doc.content}`);}})(doc instanceof Error||typeof doc.content==='object'&&doc.content!==null);// if the feature is not active and the payloads are not being logged\n// we don't need to validate the payloads\n{}if(isErrorDocument(doc)){return;// return validateErrorDocument(reporter, doc);\n}else if(isMetaDocument(doc)){return;// return validateMetaDocument(reporter, doc);\n}else if(isPushedDocument(doc)){return;// return validatePushedDocument(reporter, doc);\n}const reporter=new Reporter(capabilities,doc);return validateResourceDocument(reporter,doc);}// function validateErrorDocument(reporter: Reporter, doc: StructuredErrorDocument) {}\n// function validateMetaDocument(reporter: Reporter, doc: StructuredDataDocument<ResourceMetaDocument>) {}\n// function validatePushedDocument(reporter: Reporter, doc: StructuredDataDocument<ResourceDocument>) {}\nfunction validateResourceDocument(reporter,doc){validateTopLevelDocumentMembers(reporter,doc.content);validateLinks(reporter,doc.content,'data'in doc.content&&Array.isArray(doc.content?.data)?'collection-document':'resource-document');validateDocumentResources(reporter,doc.content);// TODO @runspired - validateMeta on document\n// TODO @runspired - validateMeta on resource\n// TODO @runspired - validateMeta on resource relationships\n// TODO @runspired - validate no-meta on resource identifiers\n//\n// ---------------------------------\n// super-strict-mode\n//\n// TODO @runspired - validate that all referenced resource identifiers are present in the document (full linkage)\n// TODO @runspired - validate that all included resources have a path back to `data` (full linkage)\n//\n// ---------------------------------\n// nice-to-haves\n//\n// TODO @runspired - validate links objects more thoroughly for spec props we don't use\n// TODO @runspired - validate request includes are in fact included\n// TODO @runspired - validate request fields are in fact present\n// TODO @runspired - MAYBE validate request sort is in fact sorted? (useful for catching Mocking bugs)\n// TODO @runspired - MAYBE validate request pagination is in fact paginated? (useful for catching Mocking bugs)\nreporter.report();}/**\n * @module @ember-data/json-api\n */function isImplicit(relationship){return relationship.definition.isImplicit;}function upgradeCapabilities(obj){}const EMPTY_ITERATOR={iterator(){return{next(){return{done:true,value:undefined};}};}};function makeCache(){return{id:null,remoteAttrs:null,localAttrs:null,defaultAttrs:null,inflightAttrs:null,changes:null,errors:null,isNew:false,isDeleted:false,isDeletionCommitted:false};}/**\n  A JSON:API Cache implementation.\n\n  What cache the store uses is configurable. Using a different\n  implementation can be achieved by implementing the store's\n  createCache hook.\n\n  This is the cache implementation used by `ember-data`.\n\n  ```js\n  import Cache from '@ember-data/json-api';\n  import Store from '@ember-data/store';\n\n  export default class extends Store {\n    createCache(wrapper) {\n      return new Cache(wrapper);\n    }\n  }\n  ```\n\n  @class Cache\n  @public\n */class JSONAPICache{/**\n   * The Cache Version that this implementation implements.\n   *\n   * @type {'2'}\n   * @public\n   * @property version\n   */constructor(capabilities){this.version='2';this._capabilities=capabilities;this.__cache=new Map();this.__graph=(0,_ember_data_graph_private__WEBPACK_IMPORTED_MODULE_0__.graphFor)(capabilities);this.__destroyedCache=new Map();this.__documents=new Map();}// Cache Management\n// ================\n/**\n   * Cache the response to a request\n   *\n   * Implements `Cache.put`.\n   *\n   * Expects a StructuredDocument whose `content` member is a JsonApiDocument.\n   *\n   * ```js\n   * cache.put({\n   *   request: { url: 'https://api.example.com/v1/user/1' },\n   *   content: {\n   *     data: {\n   *       type: 'user',\n   *       id: '1',\n   *       attributes: {\n   *         name: 'Chris'\n   *       }\n   *     }\n   *   }\n   * })\n   * ```\n   *\n   * > **Note**\n   * > The nested `content` and `data` members are not a mistake. This is because\n   * > there are two separate concepts involved here, the `StructuredDocument` which contains\n   * > the context of a given Request that has been issued with the returned contents as its\n   * > `content` property, and a `JSON:API Document` which is the json contents returned by\n   * > this endpoint and which uses its `data` property to signify which resources are the\n   * > primary resources associated with the request.\n   *\n   * StructuredDocument's with urls will be cached as full documents with\n   * associated resource membership order and contents preserved but linked\n   * into the cache.\n   *\n   * @method put\n   * @param {StructuredDocument} doc\n   * @return {ResourceDocument}\n   * @public\n   */put(doc){{validateDocument(this._capabilities,doc);}if(isErrorDocument(doc)){return this._putDocument(doc,undefined,undefined);}else if(isMetaDocument(doc)){return this._putDocument(doc,undefined,undefined);}const jsonApiDoc=doc.content;const included=jsonApiDoc.included;let i,length;const{identifierCache}=this._capabilities;{validateDocumentFields(this._capabilities.schema,jsonApiDoc);}{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.LOG_CACHE||globalThis.getWarpDriveRuntimeConfig().debug.LOG_CACHE){const Counts=new Map();let totalCount=0;if(included){for(i=0,length=included.length;i<length;i++){const type=included[i].type;Counts.set(type,(Counts.get(type)||0)+1);totalCount++;}}if(Array.isArray(jsonApiDoc.data)){for(i=0,length=jsonApiDoc.data.length;i<length;i++){const type=jsonApiDoc.data[i].type;Counts.set(type,(Counts.get(type)||0)+1);totalCount++;}}else if(jsonApiDoc.data){const type=jsonApiDoc.data.type;Counts.set(type,(Counts.get(type)||0)+1);totalCount++;}(0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_1__.logGroup)('cache','put','<@document>',doc.content?.lid||doc.request?.url||'unknown-request',`(${totalCount}) records`,'');let str=`\\tContent Counts:`;Counts.forEach((count,type)=>{str+=`\\n\\t\\t${type}: ${count} record${count>1?'s':''}`;});if(Counts.size===0){str+=`\\t(empty)`;}// eslint-disable-next-line no-console\nconsole.log(str);// eslint-disable-next-line no-console\nconsole.log({lid:doc.content?.lid,content:structuredClone(doc.content),// we may need a specialized copy here\nrequest:doc.request,// structuredClone(doc.request),\nresponse:doc.response// structuredClone(doc.response),\n});// eslint-disable-next-line no-console\nconsole.groupEnd();}}if(included){for(i=0,length=included.length;i<length;i++){included[i]=putOne(this,identifierCache,included[i]);}}if(Array.isArray(jsonApiDoc.data)){length=jsonApiDoc.data.length;const identifiers=[];for(i=0;i<length;i++){identifiers.push(putOne(this,identifierCache,jsonApiDoc.data[i]));}return this._putDocument(doc,identifiers,included);}if(jsonApiDoc.data===null){return this._putDocument(doc,null,included);}const identifier=putOne(this,identifierCache,jsonApiDoc.data);return this._putDocument(doc,identifier,included);}_putDocument(doc,data,included){// @ts-expect-error narrowing within is just horrible  in TS :/\nconst resourceDocument=isErrorDocument(doc)?fromStructuredError(doc):fromBaseDocument(doc);if(data!==undefined){resourceDocument.data=data;}if(included!==undefined){(test=>{if(!test){throw new Error(`There should not be included data on an Error document`);}})(!isErrorDocument(doc));(test=>{if(!test){throw new Error(`There should not be included data on a Meta document`);}})(!isMetaDocument(doc));resourceDocument.included=included;}const request=doc.request;const identifier=request?this._capabilities.identifierCache.getOrCreateDocumentIdentifier(request):null;if(identifier){resourceDocument.lid=identifier.lid;// @ts-expect-error\ndoc.content=resourceDocument;const hasExisting=this.__documents.has(identifier.lid);this.__documents.set(identifier.lid,doc);this._capabilities.notifyChange(identifier,hasExisting?'updated':'added',null);}if(doc.request?.op==='findHasMany'){const parentIdentifier=doc.request.options?.identifier;const parentField=doc.request.options?.field;(test=>{if(!test){throw new Error(`Expected a hasMany field`);}})(parentField?.kind==='hasMany');(test=>{if(!test){throw new Error(`Expected a parent identifier for a findHasMany request`);}})(parentIdentifier&&(0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_1__.isStableIdentifier)(parentIdentifier));if(parentField&&parentIdentifier){this.__graph.push({op:'updateRelationship',record:parentIdentifier,field:parentField.name,value:resourceDocument});}}return resourceDocument;}/**\n   * Update the \"remote\" or \"canonical\" (persisted) state of the Cache\n   * by merging new information into the existing state.\n   *\n   * @method patch\n   * @public\n   * @param {Operation|Operation[]} op the operation or list of operations to perform\n   * @return {void}\n   */patch(op){if(Array.isArray(op)){{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.LOG_CACHE||globalThis.getWarpDriveRuntimeConfig().debug.LOG_CACHE){(0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_1__.logGroup)('cache','patch','<BATCH>',String(op.length)+' operations','','');}}upgradeCapabilities(this._capabilities);this._capabilities._store._join(()=>{for(const operation of op){patchCache(this,operation);}});{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.LOG_CACHE||globalThis.getWarpDriveRuntimeConfig().debug.LOG_CACHE){// eslint-disable-next-line no-console\nconsole.groupEnd();}}}else{patchCache(this,op);}}/**\n   * Update the \"local\" or \"current\" (unpersisted) state of the Cache\n   *\n   * @method mutate\n   * @param {Mutation} mutation\n   * @return {void}\n   * @public\n   */mutate(mutation){{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.LOG_CACHE||globalThis.getWarpDriveRuntimeConfig().debug.LOG_CACHE){(0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_1__.logGroup)('cache','mutate',mutation.record.type,mutation.record.lid,mutation.field,mutation.op);try{const _data=JSON.parse(JSON.stringify(mutation));// eslint-disable-next-line no-console\nconsole.log(_data);}catch{// eslint-disable-next-line no-console\nconsole.log(mutation);}}}this.__graph.update(mutation,false);{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.LOG_CACHE||globalThis.getWarpDriveRuntimeConfig().debug.LOG_CACHE){// eslint-disable-next-line no-console\nconsole.groupEnd();}}}/**\n   * Peek resource data from the Cache.\n   *\n   * In development, if the return value\n   * is JSON the return value\n   * will be deep-cloned and deep-frozen\n   * to prevent mutation thereby enforcing cache\n   * Immutability.\n   *\n   * This form of peek is useful for implementations\n   * that want to feed raw-data from cache to the UI\n   * or which want to interact with a blob of data\n   * directly from the presentation cache.\n   *\n   * An implementation might want to do this because\n   * de-referencing records which read from their own\n   * blob is generally safer because the record does\n   * not require retainining connections to the Store\n   * and Cache to present data on a per-field basis.\n   *\n   * This generally takes the place of `getAttr` as\n   * an API and may even take the place of `getRelationship`\n   * depending on implementation specifics, though this\n   * latter usage is less recommended due to the advantages\n   * of the Graph handling necessary entanglements and\n   * notifications for relational data.\n   *\n   * @method peek\n   * @public\n   * @param {StableRecordIdentifier | StableDocumentIdentifier} identifier\n   * @return {ResourceDocument | ResourceObject | null} the known resource data\n   */peek(identifier){if('type'in identifier){const peeked=this.__safePeek(identifier,false);if(!peeked){return null;}const{type,id,lid}=identifier;const attributes=Object.assign({},peeked.remoteAttrs,peeked.inflightAttrs,peeked.localAttrs);const relationships={};const rels=this.__graph.identifiers.get(identifier);if(rels){Object.keys(rels).forEach(key=>{const rel=rels[key];if(rel.definition.isImplicit){return;}else{relationships[key]=this.__graph.getData(identifier,key);}});}upgradeCapabilities(this._capabilities);const store=this._capabilities._store;const attrs=this._capabilities.schema.fields(identifier);attrs.forEach((attr,key)=>{if(attr.kind==='alias'){return;}if(key in attributes&&attributes[key]!==undefined){return;}const defaultValue=getDefaultValue(attr,identifier,store);if(defaultValue!==undefined){attributes[key]=defaultValue;}});return{type,id,lid,attributes,relationships};}const document=this.peekRequest(identifier);if(document){if('content'in document)return document.content;}return null;}peekRemoteState(identifier){if('type'in identifier){const peeked=this.__safePeek(identifier,false);if(!peeked){return null;}const{type,id,lid}=identifier;const attributes=Object.assign({},peeked.remoteAttrs);const relationships={};const rels=this.__graph.identifiers.get(identifier);if(rels){Object.keys(rels).forEach(key=>{const rel=rels[key];if(rel.definition.isImplicit){return;}else{relationships[key]=this.__graph.getData(identifier,key);}});}upgradeCapabilities(this._capabilities);const store=this._capabilities._store;const attrs=this._capabilities.schema.fields(identifier);attrs.forEach((attr,key)=>{if(key in attributes&&attributes[key]!==undefined){return;}const defaultValue=getDefaultValue(attr,identifier,store);if(defaultValue!==undefined){attributes[key]=defaultValue;}});return{type,id,lid,attributes,relationships};}const document=this.peekRequest(identifier);if(document){if('content'in document)return document.content;}return null;}/**\n   * Peek the Cache for the existing request data associated with\n   * a cacheable request.\n   *\n   * This is effectively the reverse of `put` for a request in\n   * that it will return the the request, response, and content\n   * whereas `peek` will return just the `content`.\n   *\n   * @method peekRequest\n   * @param {StableDocumentIdentifier}\n   * @return {StructuredDocument<ResourceDocument> | null}\n   * @public\n   */peekRequest(identifier){return this.__documents.get(identifier.lid)||null;}/**\n   * Push resource data from a remote source into the cache for this identifier\n   *\n   * @method upsert\n   * @public\n   * @param identifier\n   * @param data\n   * @param hasRecord\n   * @return {void | string[]} if `hasRecord` is true then calculated key changes should be returned\n   */upsert(identifier,data,calculateChanges){upgradeCapabilities(this._capabilities);const store=this._capabilities._store;if(!store._cbs){let result=undefined;store._run(()=>{result=cacheUpsert(this,identifier,data,calculateChanges);});return result;}return cacheUpsert(this,identifier,data,calculateChanges);}// Cache Forking Support\n// =====================\n/**\n   * Create a fork of the cache from the current state.\n   *\n   * Applications should typically not call this method themselves,\n   * preferring instead to fork at the Store level, which will\n   * utilize this method to fork the cache.\n   *\n   * @method fork\n   * @internal\n   * @return Promise<Cache>\n   */fork(){throw new Error(`Not Implemented`);}/**\n   * Merge a fork back into a parent Cache.\n   *\n   * Applications should typically not call this method themselves,\n   * preferring instead to merge at the Store level, which will\n   * utilize this method to merge the caches.\n   *\n   * @method merge\n   * @param {Cache} cache\n   * @public\n   * @return Promise<void>\n   */merge(cache){throw new Error(`Not Implemented`);}/**\n   * Generate the list of changes applied to all\n   * record in the store.\n   *\n   * Each individual resource or document that has\n   * been mutated should be described as an individual\n   * `Change` entry in the returned array.\n   *\n   * A `Change` is described by an object containing up to\n   * three properties: (1) the `identifier` of the entity that\n   * changed; (2) the `op` code of that change being one of\n   * `upsert` or `remove`, and if the op is `upsert` a `patch`\n   * containing the data to merge into the cache for the given\n   * entity.\n   *\n   * This `patch` is opaque to the Store but should be understood\n   * by the Cache and may expect to be utilized by an Adapter\n   * when generating data during a `save` operation.\n   *\n   * It is generally recommended that the `patch` contain only\n   * the updated state, ignoring fields that are unchanged\n   *\n   * ```ts\n   * interface Change {\n   *  identifier: StableRecordIdentifier | StableDocumentIdentifier;\n   *  op: 'upsert' | 'remove';\n   *  patch?: unknown;\n   * }\n   * ```\n   *\n   * @method diff\n   * @public\n   */diff(){throw new Error(`Not Implemented`);}// SSR Support\n// ===========\n/**\n   * Serialize the entire contents of the Cache into a Stream\n   * which may be fed back into a new instance of the same Cache\n   * via `cache.hydrate`.\n   *\n   * @method dump\n   * @return {Promise<ReadableStream>}\n   * @public\n   */dump(){throw new Error(`Not Implemented`);}/**\n   * hydrate a Cache from a Stream with content previously serialized\n   * from another instance of the same Cache, resolving when hydration\n   * is complete.\n   *\n   * This method should expect to be called both in the context of restoring\n   * the Cache during application rehydration after SSR **AND** at unknown\n   * times during the lifetime of an already booted application when it is\n   * desired to bulk-load additional information into the cache. This latter\n   * behavior supports optimizing pre/fetching of data for route transitions\n   * via data-only SSR modes.\n   *\n   * @method hydrate\n   * @param {ReadableStream} stream\n   * @return {Promise<void>}\n   * @public\n   */hydrate(stream){throw new Error('Not Implemented');}// Resource Support\n// ================\n/**\n   * [LIFECYCLE] Signal to the cache that a new record has been instantiated on the client\n   *\n   * It returns properties from options that should be set on the record during the create\n   * process. This return value behavior is deprecated.\n   *\n   * @method clientDidCreate\n   * @public\n   * @param identifier\n   * @param createArgs\n   */clientDidCreate(identifier,options){{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.LOG_CACHE||globalThis.getWarpDriveRuntimeConfig().debug.LOG_CACHE){try{const _data=options?JSON.parse(JSON.stringify(options)):options;// eslint-disable-next-line no-console\nconsole.log(`EmberData | Mutation - clientDidCreate ${identifier.lid}`,_data);}catch{// eslint-disable-next-line no-console\nconsole.log(`EmberData | Mutation - clientDidCreate ${identifier.lid}`,options);}}}const cached=this._createCache(identifier);cached.isNew=true;const createOptions={};if(options!==undefined){const storeWrapper=this._capabilities;const fields=storeWrapper.schema.fields(identifier);const graph=this.__graph;const propertyNames=Object.keys(options);for(let i=0;i<propertyNames.length;i++){const name=propertyNames[i];const propertyValue=options[name];if(name==='id'){continue;}const fieldType=fields.get(name);const kind=fieldType!==undefined?'kind'in fieldType?fieldType.kind:'attribute':null;let relationship;switch(kind){case'attribute':this.setAttr(identifier,name,propertyValue);createOptions[name]=propertyValue;break;case'belongsTo':this.mutate({op:'replaceRelatedRecord',field:name,record:identifier,value:propertyValue});relationship=graph.get(identifier,name);relationship.state.hasReceivedData=true;relationship.state.isEmpty=false;break;case'hasMany':this.mutate({op:'replaceRelatedRecords',field:name,record:identifier,value:propertyValue});relationship=graph.get(identifier,name);relationship.state.hasReceivedData=true;relationship.state.isEmpty=false;break;default:// reflect back (pass-thru) unknown properties\ncreateOptions[name]=propertyValue;}}}this._capabilities.notifyChange(identifier,'added',null);return createOptions;}/**\n   * [LIFECYCLE] Signals to the cache that a resource\n   * will be part of a save transaction.\n   *\n   * @method willCommit\n   * @public\n   * @param identifier\n   */willCommit(identifier){const cached=this.__peek(identifier,false);/*\n      if we have multiple saves in flight at once then\n      we have information loss no matter what. This\n      attempts to lose the least information.\n       If we were to clear inflightAttrs, previous requests\n      would not be able to use it during their didCommit.\n       If we upsert inflightattrs, previous requests incorrectly\n      see more recent inflight changes as part of their own and\n      will incorrectly mark the new state as the correct remote state.\n       We choose this latter behavior to avoid accidentally removing\n      earlier changes.\n       If apps do not want this behavior they can either\n      - chain save requests serially vs allowing concurrent saves\n      - move to using a request handler that caches the inflight state\n        on a per-request basis\n      - change their save requests to only send a \"PATCH\" instead of a \"PUT\"\n        so that only latest changes are involved in each request, and then also\n        ensure that the API or their handler reflects only those changes back\n        for upsert into the cache.\n    */if(cached.inflightAttrs){if(cached.localAttrs){Object.assign(cached.inflightAttrs,cached.localAttrs);}}else{cached.inflightAttrs=cached.localAttrs;}cached.localAttrs=null;{}}/**\n   * [LIFECYCLE] Signals to the cache that a resource\n   * was successfully updated as part of a save transaction.\n   *\n   * @method didCommit\n   * @public\n   * @param identifier\n   * @param data\n   */didCommit(committedIdentifier,result){const payload=result.content;const operation=result.request.op;const data=payload&&payload.data;{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.LOG_CACHE||globalThis.getWarpDriveRuntimeConfig().debug.LOG_CACHE){try{const payloadCopy=payload?JSON.parse(JSON.stringify(payload)):payload;// eslint-disable-next-line no-console\nconsole.log(`EmberData | Payload - ${operation}`,payloadCopy);}catch{// eslint-disable-next-line no-console\nconsole.log(`EmberData | Payload - ${operation}`,payload);}}}if(!data){(test=>{if(!test){throw new Error(`Your ${committedIdentifier.type} record was saved to the server, but the response does not have an id and no id has been set client side. Records must have ids. Please update the server response to provide an id in the response or generate the id on the client side either before saving the record or while normalizing the response.`);}})(committedIdentifier.id);}const{identifierCache}=this._capabilities;const existingId=committedIdentifier.id;const identifier=operation!=='deleteRecord'&&data?identifierCache.updateRecordIdentifier(committedIdentifier,data):committedIdentifier;const cached=this.__peek(identifier,false);if(cached.isDeleted){this.__graph.push({op:'deleteRecord',record:identifier,isNew:false});cached.isDeletionCommitted=true;this._capabilities.notifyChange(identifier,'removed',null);// TODO @runspired should we early exit here?\n}{if(cached.isNew&&!identifier.id&&(typeof data?.id!=='string'||data.id.length>0)){const error=new Error(`Expected an id ${String(identifier)} in response ${JSON.stringify(data)}`);//@ts-expect-error\nerror.isAdapterError=true;//@ts-expect-error\nerror.code='InvalidError';throw error;}}const fields=this._capabilities.schema.fields(identifier);cached.isNew=false;let newCanonicalAttributes;if(data){if(data.id&&!cached.id){cached.id=data.id;}if(identifier===committedIdentifier&&identifier.id!==existingId){this._capabilities.notifyChange(identifier,'identity',null);}(test=>{if(!test){throw new Error(`Expected the ID received for the primary '${identifier.type}' resource being saved to match the current id '${cached.id}' but received '${identifier.id}'.`);}})(identifier.id===cached.id);if(data.relationships){{}setupRelationships(this.__graph,fields,identifier,data);}newCanonicalAttributes=data.attributes;}const changedKeys=newCanonicalAttributes&&calculateChangedKeys(cached,newCanonicalAttributes,fields);cached.remoteAttrs=Object.assign(cached.remoteAttrs||Object.create(null),cached.inflightAttrs,newCanonicalAttributes);cached.inflightAttrs=null;patchLocalAttributes(cached,changedKeys);if(cached.errors){cached.errors=null;this._capabilities.notifyChange(identifier,'errors',null);}if(changedKeys?.size)notifyAttributes(this._capabilities,identifier,changedKeys);this._capabilities.notifyChange(identifier,'state',null);const included=payload&&payload.included;if(included){for(let i=0,length=included.length;i<length;i++){putOne(this,identifierCache,included[i]);}}return{data:identifier};}/**\n   * [LIFECYCLE] Signals to the cache that a resource\n   * was update via a save transaction failed.\n   *\n   * @method commitWasRejected\n   * @public\n   * @param identifier\n   * @param errors\n   */commitWasRejected(identifier,errors){const cached=this.__peek(identifier,false);if(cached.inflightAttrs){const keys=Object.keys(cached.inflightAttrs);if(keys.length>0){const attrs=cached.localAttrs=cached.localAttrs||Object.create(null);for(let i=0;i<keys.length;i++){if(attrs[keys[i]]===undefined){attrs[keys[i]]=cached.inflightAttrs[keys[i]];}}}cached.inflightAttrs=null;}if(errors){cached.errors=errors;}this._capabilities.notifyChange(identifier,'errors',null);}/**\n   * [LIFECYCLE] Signals to the cache that all data for a resource\n   * should be cleared.\n   *\n   * This method is a candidate to become a mutation\n   *\n   * @method unloadRecord\n   * @public\n   * @param identifier\n   */unloadRecord(identifier){const storeWrapper=this._capabilities;// TODO this is necessary because\n// we maintain memebership inside InstanceCache\n// for peekAll, so even though we haven't created\n// any data we think this exists.\n// TODO can we eliminate that membership now?\nif(!this.__cache.has(identifier)){// the graph may still need to unload identity\n(0,_ember_data_graph_private__WEBPACK_IMPORTED_MODULE_0__.peekGraph)(storeWrapper)?.unload(identifier);return;}const removeFromRecordArray=!this.isDeletionCommitted(identifier);let removed=false;const cached=this.__peek(identifier,false);if(cached.isNew||cached.isDeletionCommitted){(0,_ember_data_graph_private__WEBPACK_IMPORTED_MODULE_0__.peekGraph)(storeWrapper)?.push({op:'deleteRecord',record:identifier,isNew:cached.isNew});}else{(0,_ember_data_graph_private__WEBPACK_IMPORTED_MODULE_0__.peekGraph)(storeWrapper)?.unload(identifier);}// effectively clearing these is ensuring that\n// we report as `isEmpty` during teardown.\ncached.localAttrs=null;cached.remoteAttrs=null;cached.defaultAttrs=null;cached.inflightAttrs=null;const relatedIdentifiers=_allRelatedIdentifiers(storeWrapper,identifier);if(areAllModelsUnloaded(storeWrapper,relatedIdentifiers)){for(let i=0;i<relatedIdentifiers.length;++i){const relatedIdentifier=relatedIdentifiers[i];storeWrapper.notifyChange(relatedIdentifier,'removed',null);removed=true;storeWrapper.disconnectRecord(relatedIdentifier);}}this.__cache.delete(identifier);this.__destroyedCache.set(identifier,cached);/*\n     * The destroy cache is a hack to prevent applications\n     * from blowing up during teardown. Accessing state\n     * on a destroyed record is not safe, but historically\n     * was possible due to a combination of teardown timing\n     * and retention of cached state directly on the\n     * record itself.\n     *\n     * Once we have deprecated accessing state on a destroyed\n     * instance we may remove this. The timing isn't a huge deal\n     * as momentarily retaining the objects outside the bounds\n     * of a test won't cause issues.\n     */if(this.__destroyedCache.size===1){// TODO do we still need this?\nsetTimeout(()=>{this.__destroyedCache.clear();},100);}if(!removed&&removeFromRecordArray){storeWrapper.notifyChange(identifier,'removed',null);}}// Granular Resource Data APIs\n// ===========================\n/**\n   * Retrieve the data for an attribute from the cache\n   *\n   * @method getAttr\n   * @public\n   * @param identifier\n   * @param field\n   * @return {unknown}\n   */getAttr(identifier,attr){const isSimplePath=!Array.isArray(attr)||attr.length===1;if(Array.isArray(attr)&&attr.length===1){attr=attr[0];}if(isSimplePath){const attribute=attr;const cached=this.__peek(identifier,true);(test=>{if(!test){throw new Error(`Cannot retrieve attributes for identifier ${String(identifier)} as it is not present in the cache`);}})(cached);// in Prod we try to recover when accessing something that\n// doesn't exist\nif(!cached){return undefined;}if(cached.localAttrs&&attribute in cached.localAttrs){return cached.localAttrs[attribute];}else if(cached.inflightAttrs&&attribute in cached.inflightAttrs){return cached.inflightAttrs[attribute];}else if(cached.remoteAttrs&&attribute in cached.remoteAttrs){return cached.remoteAttrs[attribute];}else if(cached.defaultAttrs&&attribute in cached.defaultAttrs){return cached.defaultAttrs[attribute];}else{const attrSchema=this._capabilities.schema.fields(identifier).get(attribute);upgradeCapabilities(this._capabilities);const defaultValue=getDefaultValue(attrSchema,identifier,this._capabilities._store);if(schemaHasLegacyDefaultValueFn(attrSchema)){cached.defaultAttrs=cached.defaultAttrs||Object.create(null);cached.defaultAttrs[attribute]=defaultValue;}return defaultValue;}}// TODO @runspired consider whether we need a defaultValue cache in SchemaRecord\n// like we do for the simple case above.\nconst path=attr;const cached=this.__peek(identifier,true);const basePath=path[0];let current=cached.localAttrs&&basePath in cached.localAttrs?cached.localAttrs[basePath]:undefined;if(current===undefined){current=cached.inflightAttrs&&basePath in cached.inflightAttrs?cached.inflightAttrs[basePath]:undefined;}if(current===undefined){current=cached.remoteAttrs&&basePath in cached.remoteAttrs?cached.remoteAttrs[basePath]:undefined;}if(current===undefined){return undefined;}for(let i=1;i<path.length;i++){current=current[path[i]];if(current===undefined){return undefined;}}return current;}getRemoteAttr(identifier,attr){const isSimplePath=!Array.isArray(attr)||attr.length===1;if(Array.isArray(attr)&&attr.length===1){attr=attr[0];}if(isSimplePath){const attribute=attr;const cached=this.__peek(identifier,true);(test=>{if(!test){throw new Error(`Cannot retrieve remote attributes for identifier ${String(identifier)} as it is not present in the cache`);}})(cached);// in Prod we try to recover when accessing something that\n// doesn't exist\nif(!cached){return undefined;}if(cached.remoteAttrs&&attribute in cached.remoteAttrs){return cached.remoteAttrs[attribute];// we still show defaultValues in the case of a remoteAttr access\n}else if(cached.defaultAttrs&&attribute in cached.defaultAttrs){return cached.defaultAttrs[attribute];}else{const attrSchema=this._capabilities.schema.fields(identifier).get(attribute);upgradeCapabilities(this._capabilities);const defaultValue=getDefaultValue(attrSchema,identifier,this._capabilities._store);if(schemaHasLegacyDefaultValueFn(attrSchema)){cached.defaultAttrs=cached.defaultAttrs||Object.create(null);cached.defaultAttrs[attribute]=defaultValue;}return defaultValue;}}// TODO @runspired consider whether we need a defaultValue cache in SchemaRecord\n// like we do for the simple case above.\nconst path=attr;const cached=this.__peek(identifier,true);const basePath=path[0];let current=cached.remoteAttrs&&basePath in cached.remoteAttrs?cached.remoteAttrs[basePath]:undefined;if(current===undefined){return undefined;}for(let i=1;i<path.length;i++){current=current[path[i]];if(current===undefined){return undefined;}}return current;}/**\n   * Mutate the data for an attribute in the cache\n   *\n   * This method is a candidate to become a mutation\n   *\n   * @method setAttr\n   * @public\n   * @param identifier\n   * @param field\n   * @param value\n   */setAttr(identifier,attr,value){// this assert works to ensure we have a non-empty string and/or a non-empty array\n(test=>{if(!test){throw new Error('setAttr must receive at least one attribute path');}})(attr.length>0);const isSimplePath=!Array.isArray(attr)||attr.length===1;if(Array.isArray(attr)&&attr.length===1){attr=attr[0];}if(isSimplePath){const cached=this.__peek(identifier,false);const currentAttr=attr;const existing=cached.inflightAttrs&&currentAttr in cached.inflightAttrs?cached.inflightAttrs[currentAttr]:cached.remoteAttrs&&currentAttr in cached.remoteAttrs?cached.remoteAttrs[currentAttr]:undefined;if(existing!==value){cached.localAttrs=cached.localAttrs||Object.create(null);cached.localAttrs[currentAttr]=value;cached.changes=cached.changes||Object.create(null);cached.changes[currentAttr]=[existing,value];}else if(cached.localAttrs){delete cached.localAttrs[currentAttr];delete cached.changes[currentAttr];}if(cached.defaultAttrs&&currentAttr in cached.defaultAttrs){delete cached.defaultAttrs[currentAttr];}this._capabilities.notifyChange(identifier,'attributes',currentAttr);return;}// get current value from local else inflight else remote\n// structuredClone current if not local (or always?)\n// traverse path, update value at path\n// notify change at first link in path.\n// second pass optimization is change notifyChange signature to take an array path\n// guaranteed that we have path of at least 2 in length\nconst path=attr;const cached=this.__peek(identifier,false);// get existing cache record for base path\nconst basePath=path[0];const existing=cached.inflightAttrs&&basePath in cached.inflightAttrs?cached.inflightAttrs[basePath]:cached.remoteAttrs&&basePath in cached.remoteAttrs?cached.remoteAttrs[basePath]:undefined;let existingAttr;if(existing){existingAttr=existing[path[1]];for(let i=2;i<path.length;i++){// the specific change we're making is at path[length - 1]\nexistingAttr=existingAttr[path[i]];}}if(existingAttr!==value){cached.localAttrs=cached.localAttrs||Object.create(null);cached.localAttrs[basePath]=cached.localAttrs[basePath]||structuredClone(existing);cached.changes=cached.changes||Object.create(null);let currentLocal=cached.localAttrs[basePath];let nextLink=1;while(nextLink<path.length-1){currentLocal=currentLocal[path[nextLink++]];}currentLocal[path[nextLink]]=value;cached.changes[basePath]=[existing,cached.localAttrs[basePath]];// since we initiaize the value as basePath as a clone of the value at the remote basePath\n// then in theory we can use JSON.stringify to compare the two values as key insertion order\n// ought to be consistent.\n// we try/catch this because users have a habit of doing \"Bad Things\"TM wherein the cache contains\n// stateful values that are not JSON serializable correctly such as Dates.\n// in the case that we error, we fallback to not removing the local value\n// so that any changes we don't understand are preserved. Thse objects would then sometimes\n// appear to be dirty unnecessarily, and for folks that open an issue we can guide them\n// to make their cache data less stateful.\n}else if(cached.localAttrs){try{if(!existing){return;}const existingStr=JSON.stringify(existing);const newStr=JSON.stringify(cached.localAttrs[basePath]);if(existingStr!==newStr){delete cached.localAttrs[basePath];delete cached.changes[basePath];}}catch{// noop\n}}this._capabilities.notifyChange(identifier,'attributes',basePath);}/**\n   * Query the cache for the changed attributes of a resource.\n   *\n   * @method changedAttrs\n   * @public\n   * @param identifier\n   * @return {ChangedAttributesHash} { <field>: [<old>, <new>] }\n   */changedAttrs(identifier){const cached=this.__peek(identifier,false);(test=>{if(!test){throw new Error(`Cannot retrieve changed attributes for identifier ${String(identifier)} as it is not present in the cache`);}})(cached);// in Prod we try to recover when accessing something that\n// doesn't exist\nif(!cached){return Object.create(null);}// TODO freeze in dev\nreturn cached.changes||Object.create(null);}/**\n   * Query the cache for whether any mutated attributes exist\n   *\n   * @method hasChangedAttrs\n   * @public\n   * @param identifier\n   * @return {boolean}\n   */hasChangedAttrs(identifier){const cached=this.__peek(identifier,true);(test=>{if(!test){throw new Error(`Cannot retrieve changed attributes for identifier ${String(identifier)} as it is not present in the cache`);}})(cached);// in Prod we try to recover when accessing something that\n// doesn't exist\nif(!cached){return false;}return cached.inflightAttrs!==null&&Object.keys(cached.inflightAttrs).length>0||cached.localAttrs!==null&&Object.keys(cached.localAttrs).length>0;}/**\n   * Tell the cache to discard any uncommitted mutations to attributes\n   *\n   * This method is a candidate to become a mutation\n   *\n   * @method rollbackAttrs\n   * @public\n   * @param identifier\n   * @return {string[]} the names of fields that were restored\n   */rollbackAttrs(identifier){const cached=this.__peek(identifier,false);let dirtyKeys;cached.isDeleted=false;if(cached.localAttrs!==null){dirtyKeys=Object.keys(cached.localAttrs);cached.localAttrs=null;cached.changes=null;}if(cached.isNew){// > Note: Graph removal handled by unloadRecord\ncached.isDeletionCommitted=true;cached.isDeleted=true;cached.isNew=false;}cached.inflightAttrs=null;cached.defaultAttrs=null;if(cached.errors){cached.errors=null;this._capabilities.notifyChange(identifier,'errors',null);}this._capabilities.notifyChange(identifier,'state',null);if(dirtyKeys&&dirtyKeys.length){notifyAttributes(this._capabilities,identifier,new Set(dirtyKeys));}return dirtyKeys||[];}/**\n     * Query the cache for the changes to relationships of a resource.\n     *\n     * Returns a map of relationship names to RelationshipDiff objects.\n     *\n     * ```ts\n     * type RelationshipDiff =\n    | {\n        kind: 'collection';\n        remoteState: StableRecordIdentifier[];\n        additions: Set<StableRecordIdentifier>;\n        removals: Set<StableRecordIdentifier>;\n        localState: StableRecordIdentifier[];\n        reordered: boolean;\n      }\n    | {\n        kind: 'resource';\n        remoteState: StableRecordIdentifier | null;\n        localState: StableRecordIdentifier | null;\n      };\n      ```\n     *\n     * @method changedRelationships\n     * @public\n     * @param {StableRecordIdentifier} identifier\n     * @return {Map<string, RelationshipDiff>}\n     */changedRelationships(identifier){return this.__graph.getChanged(identifier);}/**\n   * Query the cache for whether any mutated relationships exist\n   *\n   * @method hasChangedRelationships\n   * @public\n   * @param {StableRecordIdentifier} identifier\n   * @return {boolean}\n   */hasChangedRelationships(identifier){return this.__graph.hasChanged(identifier);}/**\n   * Tell the cache to discard any uncommitted mutations to relationships.\n   *\n   * This will also discard the change on any appropriate inverses.\n   *\n   * This method is a candidate to become a mutation\n   *\n   * @method rollbackRelationships\n   * @public\n   * @param {StableRecordIdentifier} identifier\n   * @return {string[]} the names of relationships that were restored\n   */rollbackRelationships(identifier){upgradeCapabilities(this._capabilities);let result;this._capabilities._store._join(()=>{result=this.__graph.rollback(identifier);});return result;}/**\n   * Query the cache for the current state of a relationship property\n   *\n   * @method getRelationship\n   * @public\n   * @param identifier\n   * @param field\n   * @return resource relationship object\n   */getRelationship(identifier,field){return this.__graph.getData(identifier,field);}getRemoteRelationship(identifier,field){return this.__graph.getRemoteData(identifier,field);}// Resource State\n// ===============\n/**\n   * Update the cache state for the given resource to be marked\n   * as locally deleted, or remove such a mark.\n   *\n   * This method is a candidate to become a mutation\n   *\n   * @method setIsDeleted\n   * @public\n   * @param identifier\n   * @param isDeleted {boolean}\n   */setIsDeleted(identifier,isDeleted){const cached=this.__peek(identifier,false);cached.isDeleted=isDeleted;// > Note: Graph removal for isNew handled by unloadRecord\nthis._capabilities.notifyChange(identifier,'state',null);}/**\n   * Query the cache for any validation errors applicable to the given resource.\n   *\n   * @method getErrors\n   * @public\n   * @param identifier\n   * @return {JsonApiError[]}\n   */getErrors(identifier){return this.__peek(identifier,true).errors||[];}/**\n   * Query the cache for whether a given resource has any available data\n   *\n   * @method isEmpty\n   * @public\n   * @param identifier\n   * @return {boolean}\n   */isEmpty(identifier){const cached=this.__safePeek(identifier,true);return cached?cached.remoteAttrs===null&&cached.inflightAttrs===null&&cached.localAttrs===null:true;}/**\n   * Query the cache for whether a given resource was created locally and not\n   * yet persisted.\n   *\n   * @method isNew\n   * @public\n   * @param identifier\n   * @return {boolean}\n   */isNew(identifier){// TODO can we assert here?\nreturn this.__safePeek(identifier,true)?.isNew||false;}/**\n   * Query the cache for whether a given resource is marked as deleted (but not\n   * necessarily persisted yet).\n   *\n   * @method isDeleted\n   * @public\n   * @param identifier\n   * @return {boolean}\n   */isDeleted(identifier){// TODO can we assert here?\nreturn this.__safePeek(identifier,true)?.isDeleted||false;}/**\n   * Query the cache for whether a given resource has been deleted and that deletion\n   * has also been persisted.\n   *\n   * @method isDeletionCommitted\n   * @public\n   * @param identifier\n   * @return {boolean}\n   */isDeletionCommitted(identifier){// TODO can we assert here?\nreturn this.__safePeek(identifier,true)?.isDeletionCommitted||false;}/**\n   * Private method used to populate an entry for the identifier\n   *\n   * @method _createCache\n   * @internal\n   * @param {StableRecordIdentifier} identifier\n   * @return {CachedResource}\n   */_createCache(identifier){(test=>{if(!test){throw new Error(`Expected no resource data to yet exist in the cache`);}})(!this.__cache.has(identifier));const cache=makeCache();this.__cache.set(identifier,cache);return cache;}/**\n   * Peek whether we have cached resource data matching the identifier\n   * without asserting if the resource data is missing.\n   *\n   * @method __safePeek\n   * @param {StableRecordIdentifier} identifier\n   * @param {Boolean} allowDestroyed\n   * @internal\n   * @return {CachedResource | undefined}\n   */__safePeek(identifier,allowDestroyed){let resource=this.__cache.get(identifier);if(!resource&&allowDestroyed){resource=this.__destroyedCache.get(identifier);}return resource;}/**\n   * Peek whether we have cached resource data matching the identifier\n   * Asserts if the resource data is missing.\n   *\n   * @method __Peek\n   * @param {StableRecordIdentifier} identifier\n   * @param {Boolean} allowDestroyed\n   * @internal\n   * @return {CachedResource}\n   */__peek(identifier,allowDestroyed){const resource=this.__safePeek(identifier,allowDestroyed);(test=>{if(!test){throw new Error(`Expected Cache to have a resource entry for the identifier ${String(identifier)} but none was found`);}})(resource);return resource;}}function addResourceToDocument(cache,op){(test=>{if(!test){throw new Error(`Expected field to be either 'data' or 'included'`);}})(op.field==='data'||op.field==='included');const doc=cache.__documents.get(op.record.lid);(test=>{if(!test){throw new Error(`Expected to have a cached document on which to perform the add operation`);}})(doc);(test=>{if(!test){throw new Error(`Expected to have content on the document`);}})(doc.content);const{content}=doc;if(op.field==='data'){let shouldNotify=false;(test=>{if(!test){throw new Error(`Expected to have a data property on the document`);}})('data'in content);// if data is not an array, we set the data property directly\nif(!Array.isArray(content.data)){(test=>{if(!test){throw new Error(`Expected to have a single record as the operation value`);}})(op.value&&!Array.isArray(op.value));shouldNotify=content.data!==op.value;if(shouldNotify)content.data=op.value;(test=>{if(!test){throw new Error(`The value '${op.value.lid}' cannot be added from the data of document '${op.record.lid}' as it is already the current value '${content.data?content.data.lid:'<null>'}'`);}})(shouldNotify);}else{(test=>{if(!test){throw new Error(`Expected to have a non-null operation value`);}})(op.value);if(Array.isArray(op.value)){if(op.index!==undefined){// for collections, because we allow duplicates we are always changed.\nshouldNotify=true;content.data.splice(op.index,0,...op.value);}else{// for collections, because we allow duplicates we are always changed.\nshouldNotify=true;content.data.push(...op.value);}}else{if(op.index!==undefined){// for collections, because we allow duplicates we are always changed.\nshouldNotify=true;content.data.splice(op.index,0,op.value);}else{// for collections, because we allow duplicates we are always changed.\nshouldNotify=true;content.data.push(op.value);}}}// notify\nif(shouldNotify)cache._capabilities.notifyChange(op.record,'updated',null);return;}content.included=content.included||[];(test=>{if(!test){throw new Error(`Expected to have a non-null operation value`);}})(op.value);if(Array.isArray(op.value)){// included is not allowed to have duplicates, so we do a dirty check here\n(test=>{if(!test){throw new Error(`included should not contain duplicate members`);}})(new Set([...content.included,...op.value]).size===content.included.length+op.value.length);content.included=content.included.concat(op.value);}else{// included is not allowed to have duplicates, so we do a dirty check here\n(test=>{if(!test){throw new Error(`included should not contain duplicate members`);}})(content.included.includes(op.value)===false);content.included.push(op.value);}// we don't notify in the included case because this is not reactively\n// exposed. We should possibly consider doing so though for subscribers\n}function removeResourceFromDocument(cache,op){(test=>{if(!test){throw new Error(`Expected field to be either 'data' or 'included'`);}})(op.field==='data'||op.field==='included');const doc=cache.__documents.get(op.record.lid);(test=>{if(!test){throw new Error(`Expected to have a cached document on which to perform the remove operation`);}})(doc);(test=>{if(!test){throw new Error(`Expected to have content on the document`);}})(doc.content);const{content}=doc;if(op.field==='data'){let shouldNotify=false;(test=>{if(!test){throw new Error(`Expected to have a data property on the document`);}})('data'in content);// if data is not an array, we set the data property directly\nif(!Array.isArray(content.data)){(test=>{if(!test){throw new Error(`Expected to have a single record as the operation value`);}})(op.value&&!Array.isArray(op.value));shouldNotify=content.data===op.value;// we only remove the value if it was our existing value\nif(shouldNotify)content.data=null;(test=>{if(!test){throw new Error(`The value '${op.value.lid}' cannot be removed from the data of document '${op.record.lid}' as it is not the current value '${content.data?content.data.lid:'<null>'}'`);}})(shouldNotify);}else{(test=>{if(!test){throw new Error(`Expected to have a non-null operation value`);}})(op.value);const toRemove=Array.isArray(op.value)?op.value:[op.value];for(let i=0;i<toRemove.length;i++){const value=toRemove[i];if(op.index!==undefined){// in production we want to recover gracefully\n// so we fallback to first-index-of\nconst index=op.index<content.data.length&&content.data[op.index]===value?op.index:content.data.indexOf(value);(test=>{if(!test){throw new Error(`Mismatched Index: Expected index '${op.index}' to contain the value '${value.lid}' but that value is at index '${index}'`);}})(op.index<content.data.length&&content.data[op.index]===value);if(index!==-1){// we remove the first occurrence of the value\nshouldNotify=true;content.data.splice(index,1);}}else{// we remove the first occurrence of the value\nconst index=content.data.indexOf(value);if(index!==-1){shouldNotify=true;content.data.splice(index,1);}}}}// notify\nif(shouldNotify)cache._capabilities.notifyChange(op.record,'updated',null);}else{content.included=content.included||[];(test=>{if(!test){throw new Error(`Expected to have a non-null operation value`);}})(op.value);const toRemove=Array.isArray(op.value)?op.value:[op.value];for(const identifier of toRemove){(test=>{if(!test){throw new Error(`attempted to remove a value from included that was not present in the included array`);}})(content.included.includes(identifier));const index=content.included.indexOf(identifier);(test=>{if(!test){throw new Error(`The value '${identifier.lid}' cannot be removed from the included of document '${op.record.lid}' as it is not present`);}})(index!==-1);if(index!==-1){content.included.splice(index,1);}}// we don't notify in the included case because this is not reactively\n// exposed. We should possibly consider doing so though for subscribers\n}}function areAllModelsUnloaded(wrapper,identifiers){for(let i=0;i<identifiers.length;++i){const identifier=identifiers[i];if(wrapper.hasRecord(identifier)){return false;}}return true;}function getLocalState(rel){if((0,_ember_data_graph_private__WEBPACK_IMPORTED_MODULE_0__.isBelongsTo)(rel)){return rel.localState?[rel.localState]:[];}return rel.additions?[...rel.additions]:[];}function getRemoteState(rel){if((0,_ember_data_graph_private__WEBPACK_IMPORTED_MODULE_0__.isBelongsTo)(rel)){return rel.remoteState?[rel.remoteState]:[];}return rel.remoteState;}function schemaHasLegacyDefaultValueFn(schema){if(!schema)return false;return hasLegacyDefaultValueFn(schema.options);}function hasLegacyDefaultValueFn(options){return!!options&&typeof options.defaultValue==='function';}function getDefaultValue(schema,identifier,store){(test=>{if(!test){throw new Error(`AliasFields should not be directly accessed from the cache`);}})(schema?.kind!=='alias');const options=schema?.options;if(!schema||!options&&!schema.type){return;}if(schema.kind!=='attribute'&&schema.kind!=='field'){return;}// legacy support for defaultValues that are functions\nif(hasLegacyDefaultValueFn(options)){// If anyone opens an issue for args not working right, we'll restore + deprecate it via a Proxy\n// that lazily instantiates the record. We don't want to provide any args here\n// because in a non @ember-data/model world they don't make sense.\nreturn options.defaultValue();// legacy support for defaultValues that are primitives\n}else if(options&&'defaultValue'in options){const defaultValue=options.defaultValue;(test=>{if(!test){throw new Error(`Non primitive defaultValues are not supported because they are shared between all instances. If you would like to use a complex object as a default value please provide a function that returns the complex object.`);}})(typeof defaultValue!=='object'||defaultValue===null);return defaultValue;// new style transforms\n}else if(schema.kind!=='attribute'&&schema.type){const transform=store.schema.transformation(schema);if(transform?.defaultValue){return transform.defaultValue(options||null,identifier);}}}function notifyAttributes(storeWrapper,identifier,keys){if(!keys){storeWrapper.notifyChange(identifier,'attributes',null);return;}for(const key of keys){storeWrapper.notifyChange(identifier,'attributes',key);}}/*\n      TODO @deprecate IGOR DAVID\n      There seems to be a potential bug here, where we will return keys that are not\n      in the schema\n  */function calculateChangedKeys(cached,updates,fields){const changedKeys=new Set();const keys=Object.keys(updates);const length=keys.length;const localAttrs=cached.localAttrs;const original=Object.assign(Object.create(null),cached.remoteAttrs,cached.inflightAttrs);for(let i=0;i<length;i++){const key=keys[i];if(!fields.has(key)){continue;}const value=updates[key];// A value in localAttrs means the user has a local change to\n// this attribute. We never override this value when merging\n// updates from the backend so we should not sent a change\n// notification if the server value differs from the original.\nif(localAttrs&&localAttrs[key]!==undefined){continue;}if(original[key]!==value){changedKeys.add(key);}}return changedKeys;}function cacheIsEmpty(cached){return!cached||cached.remoteAttrs===null&&cached.inflightAttrs===null&&cached.localAttrs===null;}function _isEmpty(peeked){if(!peeked){return true;}const isNew=peeked.isNew;const isDeleted=peeked.isDeleted;const isEmpty=cacheIsEmpty(peeked);return(!isNew||isDeleted)&&isEmpty;}function recordIsLoaded(cached,filterDeleted=false){if(!cached){return false;}const isNew=cached.isNew;const isEmpty=cacheIsEmpty(cached);// if we are new we must consider ourselves loaded\nif(isNew){return!cached.isDeleted;}// even if we have a past request, if we are now empty we are not loaded\n// typically this is true after an unloadRecord call\n// if we are not empty, not new && we have a fulfilled request then we are loaded\n// we should consider allowing for something to be loaded that is simply \"not empty\".\n// which is how RecordState currently handles this case; however, RecordState is buggy\n// in that it does not account for unloading.\nreturn filterDeleted&&cached.isDeletionCommitted?false:!isEmpty;}function _isLoading(peeked,capabilities,identifier){// TODO refactor things such that the cache is not required to know\n// about isLoading\nconst req=capabilities._store.getRequestStateService();// const fulfilled = req.getLastRequestForRecord(identifier);\nconst isLoaded=recordIsLoaded(peeked);return!isLoaded&&// fulfilled === null &&\nreq.getPendingRequestsForRecord(identifier).some(r=>r.type==='query');}function setupRelationships(graph,fields,identifier,data){for(const name in data.relationships){const relationshipData=data.relationships[name];const field=fields.get(name);// TODO consider asserting if the relationship is not in the schema\n// we intentionally ignore relationships that are not in the schema\nif(!relationshipData||!field||!isRelationship(field))continue;graph.push({op:'updateRelationship',record:identifier,field:name,value:relationshipData});}}function isRelationship(field){const{kind}=field;return kind==='hasMany'||kind==='belongsTo'||kind==='resource'||kind==='collection';}function patchLocalAttributes(cached,changedRemoteKeys){const{localAttrs,remoteAttrs,inflightAttrs,defaultAttrs,changes}=cached;if(!localAttrs){cached.changes=null;return false;}let hasAppliedPatch=false;const mutatedKeys=Object.keys(localAttrs);for(let i=0,length=mutatedKeys.length;i<length;i++){const attr=mutatedKeys[i];const existing=inflightAttrs&&attr in inflightAttrs?inflightAttrs[attr]:remoteAttrs&&attr in remoteAttrs?remoteAttrs[attr]:undefined;if(existing===localAttrs[attr]){hasAppliedPatch=true;// if the local change is committed, then\n// the remoteKeyChange is no longer relevant\nchangedRemoteKeys?.delete(attr);delete localAttrs[attr];delete changes[attr];}if(defaultAttrs&&attr in defaultAttrs){delete defaultAttrs[attr];}}return hasAppliedPatch;}function putOne(cache,identifiers,resource){(test=>{if(!test){throw new Error(`You must include an 'id' for the resource data ${resource.type}`);}})(resource.id!==null&&resource.id!==undefined&&resource.id!=='');(test=>{if(!test){throw new Error(`Missing Resource Type: received resource data with a type '${resource.type}' but no schema could be found with that name.`);}})(cache._capabilities.schema.hasResource(resource));let identifier=identifiers.peekRecordIdentifier(resource);if(identifier){identifier=identifiers.updateRecordIdentifier(identifier,resource);}else{identifier=identifiers.getOrCreateRecordIdentifier(resource);}cache.upsert(identifier,resource,cache._capabilities.hasRecord(identifier));// even if the identifier was not \"existing\" before, it is now\nreturn identifier;}/*\n    Iterates over the set of internal models reachable from `this` across exactly one\n    relationship.\n  */function _directlyRelatedIdentifiersIterable(storeWrapper,originating){const graph=(0,_ember_data_graph_private__WEBPACK_IMPORTED_MODULE_0__.peekGraph)(storeWrapper);const initializedRelationships=graph?.identifiers.get(originating);if(!initializedRelationships){return EMPTY_ITERATOR;}const initializedRelationshipsArr=[];Object.keys(initializedRelationships).forEach(key=>{const rel=initializedRelationships[key];if(rel&&!isImplicit(rel)){initializedRelationshipsArr.push(rel);}});let i=0;let j=0;let k=0;const findNext=()=>{while(i<initializedRelationshipsArr.length){while(j<2){const relatedIdentifiers=j===0?getLocalState(initializedRelationshipsArr[i]):getRemoteState(initializedRelationshipsArr[i]);while(k<relatedIdentifiers.length){const relatedIdentifier=relatedIdentifiers[k++];if(relatedIdentifier!==null){return relatedIdentifier;}}k=0;j++;}j=0;i++;}return undefined;};return{iterator(){return{next:()=>{const value=findNext();return{value,done:value===undefined};}};}};}/*\n      Computes the set of Identifiers reachable from this Identifier.\n\n      Reachability is determined over the relationship graph (ie a graph where\n      nodes are identifiers and edges are belongs to or has many\n      relationships).\n\n      Returns an array including `this` and all identifiers reachable\n      from `this.identifier`.\n    */function _allRelatedIdentifiers(storeWrapper,originating){const array=[];const queue=[];const seen=new Set();queue.push(originating);while(queue.length>0){const identifier=queue.shift();array.push(identifier);seen.add(identifier);const iterator=_directlyRelatedIdentifiersIterable(storeWrapper,originating).iterator();for(let obj=iterator.next();!obj.done;obj=iterator.next()){const relatedIdentifier=obj.value;if(relatedIdentifier&&!seen.has(relatedIdentifier)){seen.add(relatedIdentifier);queue.push(relatedIdentifier);}}}return array;}function fromBaseDocument(doc){const resourceDocument={};const jsonApiDoc=doc.content;if(jsonApiDoc){copyLinksAndMeta(resourceDocument,jsonApiDoc);}return resourceDocument;}function fromStructuredError(doc){const errorDoc={};if(doc.content){copyLinksAndMeta(errorDoc,doc.content);if('errors'in doc.content){errorDoc.errors=doc.content.errors;}else if(typeof doc.error==='object'&&'errors'in doc.error){errorDoc.errors=doc.error.errors;}else{errorDoc.errors=[{title:doc.message}];}}return errorDoc;}function copyLinksAndMeta(target,source){if('links'in source){target.links=source.links;}if('meta'in source){target.meta=source.meta;}}function cacheUpsert(cache,identifier,data,calculateChanges){let changedKeys;const peeked=cache.__safePeek(identifier,false);const existed=!!peeked;const cached=peeked||cache._createCache(identifier);const isLoading=/*#__NOINLINE__*/_isLoading(peeked,cache._capabilities,identifier)||!recordIsLoaded(peeked);const isUpdate=/*#__NOINLINE__*/!_isEmpty(peeked)&&!isLoading;{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.LOG_CACHE||globalThis.getWarpDriveRuntimeConfig().debug.LOG_CACHE){(0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_1__.logGroup)('cache','upsert',identifier.type,identifier.lid,existed?'merged':'inserted',calculateChanges?'has-subscription':'');try{const _data=JSON.parse(JSON.stringify(data));// eslint-disable-next-line no-console\nconsole.log(_data);}catch{// eslint-disable-next-line no-console\nconsole.log(data);}}}if(cached.isNew){cached.isNew=false;cache._capabilities.notifyChange(identifier,'identity',null);cache._capabilities.notifyChange(identifier,'state',null);}const fields=cache._capabilities.schema.fields(identifier);// if no cache entry existed, no record exists / property has been accessed\n// and thus we do not need to notify changes to any properties.\nif(calculateChanges&&existed&&data.attributes){changedKeys=calculateChangedKeys(cached,data.attributes,fields);}cached.remoteAttrs=Object.assign(cached.remoteAttrs||Object.create(null),data.attributes);if(cached.localAttrs){if(patchLocalAttributes(cached,changedKeys)){cache._capabilities.notifyChange(identifier,'state',null);}}if(!isUpdate){cache._capabilities.notifyChange(identifier,'added',null);}if(data.id){cached.id=data.id;}if(data.relationships){setupRelationships(cache.__graph,fields,identifier,data);}if(changedKeys?.size){notifyAttributes(cache._capabilities,identifier,changedKeys);}{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.LOG_CACHE||globalThis.getWarpDriveRuntimeConfig().debug.LOG_CACHE){// eslint-disable-next-line no-console\nconsole.groupEnd();}}return changedKeys?.size?Array.from(changedKeys):undefined;}function patchCache(Cache,op){const isRecord=(0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_1__.isStableIdentifier)(op.record);const isDocument=!isRecord&&(0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_1__.isDocumentIdentifier)(op.record);(test=>{if(!test){throw new Error(`Expected Cache.patch op.record to be a record or document identifier`);}})(isRecord||isDocument);{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.LOG_CACHE||globalThis.getWarpDriveRuntimeConfig().debug.LOG_CACHE){(0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_1__.logGroup)('cache','patch',isRecord?op.record.type:'<@document>',op.record.lid,op.op,'field'in op?op.field:op.op==='mergeIdentifiers'?op.value.lid:'');try{const _data=JSON.parse(JSON.stringify(op));// eslint-disable-next-line no-console\nconsole.log(_data);}catch{// eslint-disable-next-line no-console\nconsole.log(op);}}}switch(op.op){case'mergeIdentifiers':{const cache=Cache.__cache.get(op.record);if(cache){Cache.__cache.set(op.value,cache);Cache.__cache.delete(op.record);}Cache.__graph.update(op,true);break;}case'update':{if(isRecord){if('field'in op){const field=Cache._capabilities.schema.fields(op.record).get(op.field);(test=>{if(!test){throw new Error(`Expected ${op.field} to be a field on ${op.record.type}`);}})(field);if(isRelationship(field)){Cache.__graph.push(op);}else{Cache.upsert(op.record,{type:op.record.type,id:op.record.id,attributes:{[op.field]:op.value}},Cache._capabilities.hasRecord(op.record));}}else{Cache.upsert(op.record,op.value,Cache._capabilities.hasRecord(op.record));}}else{(test=>{{throw new Error(`Update operations on documents is not supported`);}})();}break;}case'add':{if(isRecord){if('field'in op){Cache.__graph.push(op);}else{Cache.upsert(op.record,op.value,Cache._capabilities.hasRecord(op.record));}}else{(test=>{if(!test){throw new Error(`Expected a field in the add operation`);}})('field'in op);addResourceToDocument(Cache,op);}break;}case'remove':{if(isRecord){if('field'in op){Cache.__graph.push(op);}else{const cached=Cache.__safePeek(op.record,false);if(cached){cached.isDeleted=true;cached.isDeletionCommitted=true;Cache.unloadRecord(op.record);}else{(0,_ember_data_graph_private__WEBPACK_IMPORTED_MODULE_0__.peekGraph)(Cache._capabilities)?.push({op:'deleteRecord',record:op.record,isNew:false});}}}else{if('field'in op){(test=>{if(!test){throw new Error(`Expected a field in the remove operation`);}})('field'in op);removeResourceFromDocument(Cache,op);}else{// TODO @runspired teardown associated state ... notify subscribers etc.\n// This likely means that the instance cache needs to handle\n// holding onto reactive documents instead of the CacheHandler\n// and use a subscription to remove them.\n// Cache.__documents.delete(op.record.lid);\n(test=>{{throw new Error(`Removing documents from the cache is not yet supported`);}})();}}break;}default:(test=>{{throw new Error(`Unhandled cache.patch operation ${op.op}`);}})();}{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_3__.getGlobalConfig)().WarpDrive.debug.LOG_CACHE||globalThis.getWarpDriveRuntimeConfig().debug.LOG_CACHE){// eslint-disable-next-line no-console\nconsole.groupEnd();}}}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@ember-data/json-api/dist/index.js?");

/***/ }),

/***/ "./node_modules/@ember-data/legacy-compat/dist/-private-Dlia0pw1.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@ember-data/legacy-compat/dist/-private-Dlia0pw1.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   F: () => (/* binding */ FetchManager),\n/* harmony export */   S: () => (/* binding */ SaveOp),\n/* harmony export */   a: () => (/* binding */ assertIdentifierHasId),\n/* harmony export */   b: () => (/* binding */ SnapshotRecordArray),\n/* harmony export */   c: () => (/* binding */ Snapshot),\n/* harmony export */   i: () => (/* binding */ iterateData),\n/* harmony export */   n: () => (/* binding */ normalizeResponseHelper),\n/* harmony export */   p: () => (/* binding */ payloadIsNotBlank),\n/* harmony export */   u: () => (/* binding */ upgradeStore)\n/* harmony export */ });\n/* harmony import */ var _ember_data_store_private__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember-data/store/-private */ \"./node_modules/@ember-data/store/dist/-private.js\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/debug */ \"@ember/debug\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ember_data_request__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember-data/request */ \"./node_modules/@ember-data/request/dist/index.js\");\n/* harmony import */ var _warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @warp-drive/core-types/-private */ \"./node_modules/@warp-drive/core-types/dist/-private.js\");\n/* harmony import */ var _embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../@embroider/macros/src/addon/es-compat2 */ \"./node_modules/@embroider/macros/src/addon/es-compat2.js\");\n/* harmony import */ var _ember_data_graph_private__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ember-data/graph/-private */ \"./node_modules/@ember-data/graph/dist/-private.js\");\n/* harmony import */ var _ember_test_waiters__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ember/test-waiters */ \"./node_modules/@ember/test-waiters/dist/index.js\");\n/**\n  @module @ember-data/legacy-compat\n*//**\n  SnapshotRecordArray is not directly instantiable.\n  Instances are provided to consuming application's\n  adapters for certain `findAll` requests.\n\n  @class SnapshotRecordArray\n  @public\n*/class SnapshotRecordArray{/**\n    SnapshotRecordArray is not directly instantiable.\n    Instances are provided to consuming application's\n    adapters and serializers for certain requests.\n     @method constructor\n    @private\n    @constructor\n    @param {Store} store\n    @param {string} type\n    @param options\n   */constructor(store,type,options={}){this.__store=store;/**\n      An array of snapshots\n      @private\n      @property _snapshots\n      @type {Array}\n    */this._snapshots=null;/**\n    The modelName of the underlying records for the snapshots in the array, as a Model\n    @property modelName\n    @public\n    @type {Model}\n    */this.modelName=type;/**\n      A hash of adapter options passed into the store method for this request.\n       Example\n       ```app/adapters/post.js\n      import MyCustomAdapter from './custom-adapter';\n       export default class PostAdapter extends MyCustomAdapter {\n        findAll(store, type, sinceToken, snapshotRecordArray) {\n          if (snapshotRecordArray.adapterOptions.subscribe) {\n            // ...\n          }\n          // ...\n        }\n      }\n      ```\n       @property adapterOptions\n      @public\n      @type {Object}\n    */this.adapterOptions=options.adapterOptions;/**\n      The relationships to include for this request.\n       Example\n       ```app/adapters/application.js\n      import Adapter from '@ember-data/adapter';\n       export default class ApplicationAdapter extends Adapter {\n        findAll(store, type, snapshotRecordArray) {\n          let url = `/${type.modelName}?include=${encodeURIComponent(snapshotRecordArray.include)}`;\n           return fetch(url).then((response) => response.json())\n        }\n      }\n      ```\n       @property include\n      @public\n      @type {String|Array}\n    */this.include=options.include;}/**\n    An array of records\n     @property _recordArray\n    @private\n    @type {Array}\n  */get _recordArray(){return this.__store.peekAll(this.modelName);}/**\n      Number of records in the array\n       Example\n       ```app/adapters/post.js\n      import JSONAPIAdapter from '@ember-data/adapter/json-api';\n       export default class PostAdapter extends JSONAPIAdapter {\n        shouldReloadAll(store, snapshotRecordArray) {\n          return !snapshotRecordArray.length;\n        }\n      });\n      ```\n       @property length\n      @public\n      @type {Number}\n    */get length(){return this._recordArray.length;}/**\n    Get snapshots of the underlying record array\n     Example\n     ```app/adapters/post.js\n    import JSONAPIAdapter from '@ember-data/adapter/json-api';\n     export default class PostAdapter extends JSONAPIAdapter {\n      shouldReloadAll(store, snapshotArray) {\n        let snapshots = snapshotArray.snapshots();\n         return snapshots.any(function(ticketSnapshot) {\n          let timeDiff = moment().diff(ticketSnapshot.attr('lastAccessedAt'), 'minutes');\n          if (timeDiff > 20) {\n            return true;\n          } else {\n            return false;\n          }\n        });\n      }\n    }\n    ```\n     @method snapshots\n    @public\n    @return {Array} Array of snapshots\n  */snapshots(){if(this._snapshots!==null){return this._snapshots;}upgradeStore(this.__store);const{_fetchManager}=this.__store;this._snapshots=this._recordArray[_ember_data_store_private__WEBPACK_IMPORTED_MODULE_0__.SOURCE].map(identifier=>_fetchManager.createSnapshot(identifier));return this._snapshots;}}function assertIdentifierHasId(identifier){(test=>{if(!test){throw new Error(`Attempted to schedule a fetch for a record without an id.`);}})(identifier&&identifier.id!==null);}function iterateData(data,fn){if(Array.isArray(data)){return data.map(fn);}else{return fn(data,0);}}function payloadIsNotBlank(adapterPayload){if(Array.isArray(adapterPayload)){return true;}else{return Object.keys(adapterPayload||{}).length!==0;}}/**\n  This is a helper method that validates a JSON API top-level document\n\n  The format of a document is described here:\n  http://jsonapi.org/format/#document-top-level\n\n  @internal\n*/function validateDocumentStructure(doc){{const errors=[];if(!doc||typeof doc!=='object'){errors.push('Top level of a JSON API document must be an object');}else{if(!('data'in doc)&&!('errors'in doc)&&!('meta'in doc)){errors.push('One or more of the following keys must be present: \"data\", \"errors\", \"meta\".');}else{if('data'in doc&&'errors'in doc){errors.push('Top level keys \"errors\" and \"data\" cannot both be present in a JSON API document');}}if('data'in doc){if(!(doc.data===null||Array.isArray(doc.data)||typeof doc.data==='object')){errors.push('data must be null, an object, or an array');}}if('meta'in doc){if(typeof doc.meta!=='object'){errors.push('meta must be an object');}}if('errors'in doc){if(!Array.isArray(doc.errors)){errors.push('errors must be an array');}}if('links'in doc){if(typeof doc.links!=='object'){errors.push('links must be an object');}}if('jsonapi'in doc){if(typeof doc.jsonapi!=='object'){errors.push('jsonapi must be an object');}}if('included'in doc){if(typeof doc.included!=='object'){errors.push('included must be an array');}}}(test=>{if(!test){throw new Error(`Response must be normalized to a valid JSON API document:\\n\\t* ${errors.join('\\n\\t* ')}`);}})(errors.length===0);}}function normalizeResponseHelper(serializer,store,modelClass,payload,id,requestType){const normalizedResponse=serializer?serializer.normalizeResponse(store,modelClass,payload,id,requestType):payload;validateDocumentStructure(normalizedResponse);return normalizedResponse;}/**\n  @module @ember-data/store\n*//**\n  Snapshot is not directly instantiable.\n  Instances are provided to a consuming application's\n  adapters and serializers for certain requests.\n\n  Snapshots are only available when using `@ember-data/legacy-compat`\n  for legacy compatibility with adapters and serializers.\n\n  @class Snapshot\n  @public\n*/class Snapshot{/**\n   * @method constructor\n   * @constructor\n   * @private\n   * @param options\n   * @param identifier\n   * @param _store\n   */constructor(options,identifier,store){this._store=store;this.__attributes=null;this._belongsToRelationships=Object.create(null);this._belongsToIds=Object.create(null);this._hasManyRelationships=Object.create(null);this._hasManyIds=Object.create(null);const hasRecord=!!store._instanceCache.peek(identifier);this.modelName=identifier.type;/**\n      The unique RecordIdentifier associated with this Snapshot.\n       @property identifier\n      @public\n      @type {StableRecordIdentifier}\n    */this.identifier=identifier;/*\n      If the we do not yet have a record, then we are\n      likely a snapshot being provided to a find request, so we\n      populate __attributes lazily. Else, to preserve the \"moment\n      in time\" in which a snapshot is created, we greedily grab\n      the values.\n     */if(hasRecord){// eslint-disable-next-line @typescript-eslint/no-unused-expressions\nthis._attributes;}/**\n     The id of the snapshot's underlying record\n      Example\n      ```javascript\n     // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });\n     postSnapshot.id; // => '1'\n     ```\n      @property id\n     @type {String}\n     @public\n     */this.id=identifier.id;/**\n     A hash of adapter options\n     @property adapterOptions\n     @type {Object}\n     @public\n     */this.adapterOptions=options.adapterOptions;/**\n     If `include` was passed to the options hash for the request, the value\n     would be available here.\n      @property include\n     @type {String|Array}\n     @public\n     */this.include=options.include;/**\n     The name of the type of the underlying record for this snapshot, as a string.\n      @property modelName\n     @type {String}\n     @public\n     */this.modelName=identifier.type;if(hasRecord){const cache=this._store.cache;this._changedAttributes=cache.changedAttrs(identifier);}}/**\n   The underlying record for this snapshot. Can be used to access methods and\n   properties defined on the record.\n    Example\n    ```javascript\n   let json = snapshot.record.toJSON();\n   ```\n    @property record\n   @type {Model}\n   @public\n   */get record(){const record=this._store.peekRecord(this.identifier);(test=>{if(!test){throw new Error(`Record ${this.identifier.type} ${this.identifier.id} (${this.identifier.lid}) is not yet loaded and thus cannot be accessed from the Snapshot during serialization`);}})(record!==null);return record;}get _attributes(){if(this.__attributes!==null){return this.__attributes;}const attributes=this.__attributes=Object.create(null);const{identifier}=this;const attrs=this._store.schema.fields(identifier);const cache=this._store.cache;attrs.forEach((field,keyName)=>{if(field.kind==='attribute'){attributes[keyName]=cache.getAttr(identifier,keyName);}});return attributes;}get isNew(){const cache=this._store.cache;return cache?.isNew(this.identifier)||false;}/**\n   Returns the value of an attribute.\n    Example\n    ```javascript\n   // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });\n   postSnapshot.attr('author'); // => 'Tomster'\n   postSnapshot.attr('title'); // => 'Ember.js rocks'\n   ```\n    Note: Values are loaded eagerly and cached when the snapshot is created.\n    @method attr\n   @param {String} keyName\n   @return {Object} The attribute value or undefined\n   @public\n   */attr(keyName){if(keyName in this._attributes){return this._attributes[keyName];}(test=>{{throw new Error(`Model '${this.identifier.lid}' has no attribute named '${keyName}' defined.`);}})();}/**\n   Returns all attributes and their corresponding values.\n    Example\n    ```javascript\n   // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });\n   postSnapshot.attributes(); // => { author: 'Tomster', title: 'Ember.js rocks' }\n   ```\n    @method attributes\n   @return {Object} All attributes of the current snapshot\n   @public\n   */attributes(){return{...this._attributes};}/**\n   Returns all changed attributes and their old and new values.\n    Example\n    ```javascript\n   // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });\n   postModel.set('title', 'Ember.js rocks!');\n   postSnapshot.changedAttributes(); // => { title: ['Ember.js rocks', 'Ember.js rocks!'] }\n   ```\n    @method changedAttributes\n   @return {Object} All changed attributes of the current snapshot\n   @public\n   */changedAttributes(){const changedAttributes=Object.create(null);if(!this._changedAttributes){return changedAttributes;}const changedAttributeKeys=Object.keys(this._changedAttributes);for(let i=0,length=changedAttributeKeys.length;i<length;i++){const key=changedAttributeKeys[i];changedAttributes[key]=this._changedAttributes[key].slice();}return changedAttributes;}/**\n   Returns the current value of a belongsTo relationship.\n    `belongsTo` takes an optional hash of options as a second parameter,\n   currently supported options are:\n    - `id`: set to `true` if you only want the ID of the related record to be\n   returned.\n    Example\n    ```javascript\n   // store.push('post', { id: 1, title: 'Hello World' });\n   // store.createRecord('comment', { body: 'Lorem ipsum', post: post });\n   commentSnapshot.belongsTo('post'); // => Snapshot\n   commentSnapshot.belongsTo('post', { id: true }); // => '1'\n    // store.push('comment', { id: 1, body: 'Lorem ipsum' });\n   commentSnapshot.belongsTo('post'); // => undefined\n   ```\n    Calling `belongsTo` will return a new Snapshot as long as there's any known\n   data for the relationship available, such as an ID. If the relationship is\n   known but unset, `belongsTo` will return `null`. If the contents of the\n   relationship is unknown `belongsTo` will return `undefined`.\n    Note: Relationships are loaded lazily and cached upon first access.\n    @method belongsTo\n   @param {String} keyName\n   @param {Object} [options]\n   @public\n   @return {(Snapshot|String|null|undefined)} A snapshot or ID of a known\n   relationship or null if the relationship is known but unset. undefined\n   will be returned if the contents of the relationship is unknown.\n   */belongsTo(keyName,options){const returnModeIsId=!!(options&&options.id);let result;const store=this._store;if(returnModeIsId===true&&keyName in this._belongsToIds){return this._belongsToIds[keyName];}if(returnModeIsId===false&&keyName in this._belongsToRelationships){return this._belongsToRelationships[keyName];}const relationshipMeta=store.schema.fields({type:this.modelName}).get(keyName);(test=>{if(!test){throw new Error(`Model '${this.identifier.lid}' has no belongsTo relationship named '${keyName}' defined.`);}})(relationshipMeta&&relationshipMeta.kind==='belongsTo');(test=>{if(!test){throw new Error(`snapshot.belongsTo only supported when using the package @ember-data/graph`);}})(true);const graphFor=(0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(_ember_data_graph_private__WEBPACK_IMPORTED_MODULE_5__).graphFor;const{identifier}=this;{const relationship=graphFor(this._store).get(identifier,keyName);(test=>{if(!test){throw new Error(`You looked up the ${keyName} belongsTo relationship for { type: ${identifier.type}, id: ${identifier.id||''}, lid: ${identifier.lid} but no such relationship was found.`);}})(relationship);(test=>{if(!test){throw new Error(`You looked up the ${keyName} belongsTo relationship for { type: ${identifier.type}, id: ${identifier.id||''}, lid: ${identifier.lid} but that relationship is a hasMany.`);}})(relationship.definition.kind==='belongsTo');}const value=graphFor(this._store).getData(identifier,keyName);const data=value&&value.data;const inverseIdentifier=data?store.identifierCache.getOrCreateRecordIdentifier(data):null;if(value&&value.data!==undefined){const cache=store.cache;if(inverseIdentifier&&!cache.isDeleted(inverseIdentifier)){if(returnModeIsId){result=inverseIdentifier.id;}else{result=store._fetchManager.createSnapshot(inverseIdentifier);}}else{result=null;}}if(returnModeIsId){this._belongsToIds[keyName]=result;}else{this._belongsToRelationships[keyName]=result;}return result;}/**\n   Returns the current value of a hasMany relationship.\n    `hasMany` takes an optional hash of options as a second parameter,\n   currently supported options are:\n    - `ids`: set to `true` if you only want the IDs of the related records to be\n   returned.\n    Example\n    ```javascript\n   // store.push('post', { id: 1, title: 'Hello World', comments: [2, 3] });\n   postSnapshot.hasMany('comments'); // => [Snapshot, Snapshot]\n   postSnapshot.hasMany('comments', { ids: true }); // => ['2', '3']\n    // store.push('post', { id: 1, title: 'Hello World' });\n   postSnapshot.hasMany('comments'); // => undefined\n   ```\n    Note: Relationships are loaded lazily and cached upon first access.\n    @method hasMany\n   @param {String} keyName\n   @param {Object} [options]\n   @public\n   @return {(Array|undefined)} An array of snapshots or IDs of a known\n   relationship or an empty array if the relationship is known but unset.\n   undefined will be returned if the contents of the relationship is unknown.\n   */hasMany(keyName,options){const returnModeIsIds=!!(options&&options.ids);let results;const cachedIds=this._hasManyIds[keyName];const cachedSnapshots=this._hasManyRelationships[keyName];if(returnModeIsIds===true&&keyName in this._hasManyIds){return cachedIds;}if(returnModeIsIds===false&&keyName in this._hasManyRelationships){return cachedSnapshots;}const store=this._store;const relationshipMeta=store.schema.fields({type:this.modelName}).get(keyName);(test=>{if(!test){throw new Error(`Model '${this.identifier.lid}' has no hasMany relationship named '${keyName}' defined.`);}})(relationshipMeta&&relationshipMeta.kind==='hasMany');// TODO @runspired it seems this code branch would not work with CUSTOM_MODEL_CLASSes\n// this check is not a regression in behavior because relationships don't currently\n// function without access to intimate API contracts between RecordData and Model.\n// This is a requirement we should fix as soon as the relationship layer does not require\n// this intimate API usage.\n(test=>{if(!test){throw new Error(`snapshot.hasMany only supported when using the package @ember-data/graph`);}})(true);const graphFor=(0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(_ember_data_graph_private__WEBPACK_IMPORTED_MODULE_5__).graphFor;const{identifier}=this;{const relationship=graphFor(this._store).get(identifier,keyName);(test=>{if(!test){throw new Error(`You looked up the ${keyName} hasMany relationship for { type: ${identifier.type}, id: ${identifier.id||''}, lid: ${identifier.lid} but no such relationship was found.`);}})(relationship);(test=>{if(!test){throw new Error(`You looked up the ${keyName} hasMany relationship for { type: ${identifier.type}, id: ${identifier.id||''}, lid: ${identifier.lid} but that relationship is a belongsTo.`);}})(relationship.definition.kind==='hasMany');}const value=graphFor(this._store).getData(identifier,keyName);if(value.data){results=[];value.data.forEach(member=>{const inverseIdentifier=store.identifierCache.getOrCreateRecordIdentifier(member);const cache=store.cache;if(!cache.isDeleted(inverseIdentifier)){if(returnModeIsIds){results.push(inverseIdentifier.id);}else{results.push(store._fetchManager.createSnapshot(inverseIdentifier));}}});}// we assign even if `undefined` so that we don't reprocess the relationship\n// on next access. This works with the `keyName in` checks above.\nif(returnModeIsIds){this._hasManyIds[keyName]=results;}else{this._hasManyRelationships[keyName]=results;}return results;}/**\n    Iterates through all the attributes of the model, calling the passed\n    function on each attribute.\n     Example\n     ```javascript\n    snapshot.eachAttribute(function(name, meta) {\n      // ...\n    });\n    ```\n     @method eachAttribute\n    @param {Function} callback the callback to execute\n    @param {Object} [binding] the value to which the callback's `this` should be bound\n    @public\n  */eachAttribute(callback,binding){const fields=this._store.schema.fields(this.identifier);fields.forEach((field,key)=>{if(field.kind==='attribute'){callback.call(binding,key,field);}});}/**\n    Iterates through all the relationships of the model, calling the passed\n    function on each relationship.\n     Example\n     ```javascript\n    snapshot.eachRelationship(function(name, relationship) {\n      // ...\n    });\n    ```\n     @method eachRelationship\n    @param {Function} callback the callback to execute\n    @param {Object} [binding] the value to which the callback's `this` should be bound\n    @public\n  */eachRelationship(callback,binding){const fields=this._store.schema.fields(this.identifier);fields.forEach((field,key)=>{if(field.kind==='belongsTo'||field.kind==='hasMany'){callback.call(binding,key,field);}});}/**\n    Serializes the snapshot using the serializer for the model.\n     Example\n     ```app/adapters/application.js\n    import Adapter from '@ember-data/adapter';\n     export default Adapter.extend({\n      createRecord(store, type, snapshot) {\n        let data = snapshot.serialize({ includeId: true });\n        let url = `/${type.modelName}`;\n         return fetch(url, {\n          method: 'POST',\n          body: data,\n        }).then((response) => response.json())\n      }\n    });\n    ```\n     @method serialize\n    @param {Object} options\n    @return {Object} an object whose values are primitive JSON values only\n    @public\n   */serialize(options){upgradeStore(this._store);const serializer=this._store.serializerFor(this.modelName);(test=>{if(!test){throw new Error(`Cannot serialize record, no serializer found`);}})(serializer);return serializer.serialize(this,options);}}const SaveOp=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.getOrSetGlobal)('SaveOp',Symbol('SaveOp'));class FetchManager{// fetches pending in the runloop, waiting to be coalesced\nconstructor(store){this._store=store;// used to keep track of all the find requests that need to be coalesced\nthis._pendingFetch=new Map();this.requestCache=store.getRequestStateService();this.isDestroyed=false;}createSnapshot(identifier,options={}){return new Snapshot(options,identifier,this._store);}/**\n    This method is called by `record.save`, and gets passed a\n    resolver for the promise that `record.save` returns.\n     It schedules saving to happen at the end of the run loop.\n     @internal\n  */scheduleSave(identifier,options){const resolver=(0,_ember_data_request__WEBPACK_IMPORTED_MODULE_2__.createDeferred)();const query={op:'saveRecord',recordIdentifier:identifier,options};const queryRequest={data:[query]};const snapshot=this.createSnapshot(identifier,options);const pendingSaveItem={snapshot:snapshot,resolver:resolver,identifier,options,queryRequest};const monitored=this.requestCache._enqueue(resolver.promise,pendingSaveItem.queryRequest);_flushPendingSave(this._store,pendingSaveItem);return monitored;}scheduleFetch(identifier,options,request){const query={op:'findRecord',recordIdentifier:identifier,options};const queryRequest={data:[query]};const pendingFetch=this.getPendingFetch(identifier,options);if(pendingFetch){return pendingFetch;}const modelName=identifier.type;const resolver=(0,_ember_data_request__WEBPACK_IMPORTED_MODULE_2__.createDeferred)();const pendingFetchItem={identifier,resolver,options,queryRequest};const resolverPromise=resolver.promise;const store=this._store;const isInitialLoad=!store._instanceCache.recordIsLoaded(identifier);// we don't use isLoading directly because we are the request\nconst monitored=this.requestCache._enqueue(resolverPromise,pendingFetchItem.queryRequest);let promise=monitored.then(payload=>{// ensure that regardless of id returned we assign to the correct record\nif(payload.data&&!Array.isArray(payload.data)){payload.data.lid=identifier.lid;}// additional data received in the payload\n// may result in the merging of identifiers (and thus records)\nconst potentiallyNewIm=store._push(payload,options.reload);if(potentiallyNewIm&&!Array.isArray(potentiallyNewIm)){return potentiallyNewIm;}return identifier;},error=>{(test=>{if(!test){throw new Error(`Async Leak Detected: Expected the store to not be destroyed`);}})(!store.isDestroyed);const cache=store.cache;if(!cache||cache.isEmpty(identifier)||isInitialLoad){let isReleasable=true;{if(!cache){const graphFor=(0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(_ember_data_graph_private__WEBPACK_IMPORTED_MODULE_5__).graphFor;const graph=graphFor(store);isReleasable=graph.isReleasable(identifier);if(!isReleasable){graph.unload(identifier,true);}}}if(cache||isReleasable){store._enableAsyncFlush=true;store._instanceCache.unloadRecord(identifier);store._enableAsyncFlush=null;}}throw error;});if(this._pendingFetch.size===0){void new Promise(resolve=>setTimeout(resolve,0)).then(()=>{this.flushAllPendingFetches();});}const fetchesByType=this._pendingFetch;let fetchesById=fetchesByType.get(modelName);if(!fetchesById){fetchesById=new Map();fetchesByType.set(modelName,fetchesById);}let requestsForIdentifier=fetchesById.get(identifier);if(!requestsForIdentifier){requestsForIdentifier=[];fetchesById.set(identifier,requestsForIdentifier);}requestsForIdentifier.push(pendingFetchItem);{if(!request.disableTestWaiter){const{waitForPromise}=(0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(_ember_test_waiters__WEBPACK_IMPORTED_MODULE_6__);promise=waitForPromise(promise);}}pendingFetchItem.promise=promise;return promise;}getPendingFetch(identifier,options){const pendingFetches=this._pendingFetch.get(identifier.type)?.get(identifier);// We already have a pending fetch for this\nif(pendingFetches){const matchingPendingFetch=pendingFetches.find(fetch=>isSameRequest(options,fetch.options));if(matchingPendingFetch){return matchingPendingFetch.promise;}}}flushAllPendingFetches(){if(this.isDestroyed){return;}const store=this._store;this._pendingFetch.forEach((fetchItem,type)=>_flushPendingFetchForType(store,fetchItem,type));this._pendingFetch.clear();}fetchDataIfNeededForIdentifier(identifier,options={},request){// pre-loading will change the isEmpty value\nconst isEmpty=_isEmpty(this._store._instanceCache,identifier);const isLoading=_isLoading(this._store._instanceCache,identifier);let promise;if(isEmpty){assertIdentifierHasId(identifier);{promise=this.scheduleFetch(identifier,Object.assign({},options,{reload:true}),request);}}else if(isLoading){promise=this.getPendingFetch(identifier,options);(test=>{if(!test){throw new Error(`Expected to find a pending request for a record in the loading state, but found none`);}})(promise);}else{promise=Promise.resolve(identifier);}return promise;}destroy(){this.isDestroyed=true;}}function _isEmpty(instanceCache,identifier){const cache=instanceCache.cache;if(!cache){return true;}const isNew=cache.isNew(identifier);const isDeleted=cache.isDeleted(identifier);const isEmpty=cache.isEmpty(identifier);return(!isNew||isDeleted)&&isEmpty;}function _isLoading(cache,identifier){const req=cache.store.getRequestStateService();// const fulfilled = req.getLastRequestForRecord(identifier);\nconst isLoaded=cache.recordIsLoaded(identifier);return!isLoaded&&// fulfilled === null &&\nreq.getPendingRequestsForRecord(identifier).some(r=>r.type==='query');}function includesSatisfies(current,existing){// if we have no includes we are good\nif(!current?.length){return true;}// if we are here we have includes,\n// and if existing has no includes then we will need a new request\nif(!existing?.length){return false;}const arrCurrent=(Array.isArray(current)?current:current.split(',')).sort();const arrExisting=(Array.isArray(existing)?existing:existing.split(',')).sort();// includes are identical\nif(arrCurrent.join(',')===arrExisting.join(',')){return true;}// if all of current includes are in existing includes then we are good\n// so if we find one that is not in existing then we need a new request\nfor(let i=0;i<arrCurrent.length;i++){if(!arrExisting.includes(arrCurrent[i])){return false;}}return true;}function optionsSatisfies(current,existing){return!current||current===existing||Object.keys(current).length===0;}// this function helps resolve whether we have a pending request that we should use instead\nfunction isSameRequest(options={},existingOptions={}){return optionsSatisfies(options.adapterOptions,existingOptions.adapterOptions)&&includesSatisfies(options.include,existingOptions.include);}function _findMany(store,adapter,modelName,snapshots){const modelClass=store.modelFor(modelName);// `adapter.findMany` gets the modelClass still\nconst promise=Promise.resolve().then(()=>{const ids=snapshots.map(s=>s.id);(test=>{if(!test){throw new Error(`Cannot fetch a record without an id`);}})(ids.every(v=>v!==null));// eslint-disable-next-line @typescript-eslint/unbound-method\n(test=>{if(!test){throw new Error(`Expected this adapter to implement findMany for coalescing`);}})(adapter.findMany);const ret=adapter.findMany(store,modelClass,ids,snapshots);(test=>{if(!test){throw new Error('adapter.findMany returned undefined, this was very likely a mistake');}})(ret!==undefined);return ret;});return promise.then(adapterPayload=>{(test=>{if(!test){throw new Error(`You made a 'findMany' request for '${modelName}' records with ids '[${snapshots.map(s=>s.id).join(',')}]', but the adapter's response did not have any data`);}})(!!payloadIsNotBlank(adapterPayload));const serializer=store.serializerFor(modelName);const payload=normalizeResponseHelper(serializer,store,modelClass,adapterPayload,null,'findMany');return payload;});}function rejectFetchedItems(fetchMap,snapshots,error){for(let i=0,l=snapshots.length;i<l;i++){const snapshot=snapshots[i];const pair=fetchMap.get(snapshot);if(pair){pair.resolver.reject(error||new Error(`Expected: '<${snapshot.modelName}:${snapshot.id}>' to be present in the adapter provided payload, but it was not found.`));}}}function handleFoundRecords(store,fetchMap,snapshots,coalescedPayload){/*\n    It is possible that the same ID is included multiple times\n    via multiple snapshots. This happens when more than one\n    options hash was supplied, each of which must be uniquely\n    accounted for.\n     However, since we can't map from response to a specific\n    options object, we resolve all snapshots by id with\n    the first response we see.\n  */const snapshotsById=new Map();for(let i=0;i<snapshots.length;i++){const id=snapshots[i].id;let snapshotGroup=snapshotsById.get(id);if(!snapshotGroup){snapshotGroup=[];snapshotsById.set(id,snapshotGroup);}snapshotGroup.push(snapshots[i]);}const included=Array.isArray(coalescedPayload.included)?coalescedPayload.included:[];// resolve found records\nconst resources=coalescedPayload.data;for(let i=0,l=resources.length;i<l;i++){const resource=resources[i];const snapshotGroup=snapshotsById.get(resource.id);snapshotsById.delete(resource.id);if(!snapshotGroup){// TODO consider whether this should be a deprecation/assertion\nincluded.push(resource);}else{snapshotGroup.forEach(snapshot=>{const pair=fetchMap.get(snapshot);const resolver=pair.resolver;resolver.resolve({data:resource});});}}if(included.length>0){store._push({data:null,included},true);}if(snapshotsById.size===0){return;}// reject missing records\nconst rejected=[];snapshotsById.forEach(snapshotArray=>{rejected.push(...snapshotArray);});(0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.warn)('Ember Data expected to find records with the following ids in the adapter response from findMany but they were missing: [ \"'+[...snapshotsById.values()].map(r=>r[0].id).join('\", \"')+'\" ]',{id:'ds.store.missing-records-from-adapter'});rejectFetchedItems(fetchMap,rejected);}function _fetchRecord(store,adapter,fetchItem){const identifier=fetchItem.identifier;const modelName=identifier.type;(test=>{if(!test){throw new Error(`You tried to find a record but you have no adapter (for ${modelName})`);}})(adapter);(test=>{if(!test){throw new Error(`You tried to find a record but your adapter (for ${modelName}) does not implement 'findRecord'`);}})(typeof adapter.findRecord==='function');const snapshot=store._fetchManager.createSnapshot(identifier,fetchItem.options);const klass=store.modelFor(identifier.type);const id=identifier.id;let promise=Promise.resolve().then(()=>{return adapter.findRecord(store,klass,identifier.id,snapshot);});promise=promise.then(adapterPayload=>{(test=>{if(!test){throw new Error(`Async Leak Detected: Expected the store to not be destroyed`);}})(!(store.isDestroyed||store.isDestroying));(test=>{if(!test){throw new Error(`You made a 'findRecord' request for a '${modelName}' with id '${id}', but the adapter's response did not have any data`);}})(!!payloadIsNotBlank(adapterPayload));const serializer=store.serializerFor(modelName);const payload=normalizeResponseHelper(serializer,store,klass,adapterPayload,id,'findRecord');(test=>{if(!test){throw new Error(`Ember Data expected the primary data returned from a 'findRecord' response to be an object but instead it found an array.`);}})(!Array.isArray(payload.data));(test=>{if(!test){throw new Error(`The 'findRecord' request for ${modelName}:${id} resolved indicating success but contained no primary data. To indicate a 404 not found you should either reject the promise returned by the adapter's findRecord method or throw a NotFoundError.`);}})('data'in payload&&payload.data!==null&&typeof payload.data==='object');(0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.warn)(`You requested a record of type '${modelName}' with id '${id}' but the adapter returned a payload with primary data having an id of '${payload.data.id}'. Use 'store.findRecord()' when the requested id is the same as the one returned by the adapter. In other cases use 'store.queryRecord()' instead.`,(0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_0__.coerceId)(payload.data.id)===(0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_0__.coerceId)(id),{id:'ds.store.findRecord.id-mismatch'});return payload;});fetchItem.resolver.resolve(promise);}function _processCoalescedGroup(store,fetchMap,group,adapter,modelName){if(group.length>1){_findMany(store,adapter,modelName,group).then(payloads=>{handleFoundRecords(store,fetchMap,group,payloads);}).catch(error=>{rejectFetchedItems(fetchMap,group,error);});}else if(group.length===1){_fetchRecord(store,adapter,fetchMap.get(group[0]));}else{(test=>{{throw new Error(\"You cannot return an empty array from adapter's method groupRecordsForFindMany\");}})();}}function _flushPendingFetchForType(store,pendingFetchMap,modelName){const adapter=store.adapterFor(modelName);const shouldCoalesce=!!adapter.findMany&&adapter.coalesceFindRequests;if(shouldCoalesce){const pendingFetchItems=[];pendingFetchMap.forEach((requestsForIdentifier,identifier)=>{if(requestsForIdentifier.length>1){return;}// remove this entry from the map so it's not processed again\npendingFetchMap.delete(identifier);pendingFetchItems.push(requestsForIdentifier[0]);});const totalItems=pendingFetchItems.length;if(totalItems>1){const snapshots=new Array(totalItems);const fetchMap=new Map();for(let i=0;i<totalItems;i++){const fetchItem=pendingFetchItems[i];snapshots[i]=store._fetchManager.createSnapshot(fetchItem.identifier,fetchItem.options);fetchMap.set(snapshots[i],fetchItem);}let groups;if(adapter.groupRecordsForFindMany){groups=adapter.groupRecordsForFindMany(store,snapshots);}else{groups=[snapshots];}for(let i=0,l=groups.length;i<l;i++){_processCoalescedGroup(store,fetchMap,groups[i],adapter,modelName);}}else if(totalItems===1){_fetchRecord(store,adapter,pendingFetchItems[0]);}}pendingFetchMap.forEach(pendingFetchItems=>{pendingFetchItems.forEach(pendingFetchItem=>{_fetchRecord(store,adapter,pendingFetchItem);});});}function _flushPendingSave(store,pending){const{snapshot,resolver,identifier,options}=pending;const adapter=store.adapterFor(identifier.type);const operation=options[SaveOp];const modelName=snapshot.modelName;const modelClass=store.modelFor(modelName);(test=>{if(!test){throw new Error(`You tried to update a record but you have no adapter (for ${modelName})`);}})(adapter);(test=>{if(!test){throw new Error(`You tried to update a record but your adapter (for ${modelName}) does not implement '${operation}'`);}})(typeof adapter[operation]==='function');let promise=Promise.resolve().then(()=>adapter[operation](store,modelClass,snapshot));const serializer=store.serializerFor(modelName);(test=>{if(!test){throw new Error(`Your adapter's '${operation}' method must return a value, but it returned 'undefined'`);}})(promise!==undefined);promise=promise.then(adapterPayload=>{if(adapterPayload){return normalizeResponseHelper(serializer,store,modelClass,adapterPayload,snapshot.id,operation);}});resolver.resolve(promise);}/**\n * Utilities - often temporary - for maintaining backwards compatibility with\n * older parts of EmberData.\n *\n  @module @ember-data/legacy-compat\n  @main @ember-data/legacy-compat\n*/function upgradeStore(store){}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@ember-data/legacy-compat/dist/-private-Dlia0pw1.js?");

/***/ }),

/***/ "./node_modules/@ember-data/legacy-compat/dist/-private.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ember-data/legacy-compat/dist/-private.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FetchManager: () => (/* reexport safe */ _private_Dlia0pw1_js__WEBPACK_IMPORTED_MODULE_0__.F),\n/* harmony export */   SaveOp: () => (/* reexport safe */ _private_Dlia0pw1_js__WEBPACK_IMPORTED_MODULE_0__.S),\n/* harmony export */   Snapshot: () => (/* reexport safe */ _private_Dlia0pw1_js__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   SnapshotRecordArray: () => (/* reexport safe */ _private_Dlia0pw1_js__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   upgradeStore: () => (/* reexport safe */ _private_Dlia0pw1_js__WEBPACK_IMPORTED_MODULE_0__.u)\n/* harmony export */ });\n/* harmony import */ var _private_Dlia0pw1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./-private-Dlia0pw1.js */ \"./node_modules/@ember-data/legacy-compat/dist/-private-Dlia0pw1.js\");\n\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@ember-data/legacy-compat/dist/-private.js?");

/***/ }),

/***/ "./node_modules/@ember-data/legacy-compat/dist/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@ember-data/legacy-compat/dist/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LegacyNetworkHandler: () => (/* binding */ LegacyNetworkHandler),\n/* harmony export */   adapterFor: () => (/* binding */ adapterFor),\n/* harmony export */   cleanup: () => (/* binding */ cleanup),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   pushPayload: () => (/* binding */ pushPayload),\n/* harmony export */   serializeRecord: () => (/* binding */ serializeRecord),\n/* harmony export */   serializerFor: () => (/* binding */ serializerFor)\n/* harmony export */ });\n/* harmony import */ var _ember_application__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/application */ \"@ember/application\");\n/* harmony import */ var _ember_application__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_application__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_data_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/store */ \"./node_modules/@ember-data/store/dist/index.js\");\n/* harmony import */ var _ember_data_store_private__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember-data/store/-private */ \"./node_modules/@ember-data/store/dist/-private.js\");\n/* harmony import */ var _private_Dlia0pw1_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./-private-Dlia0pw1.js */ \"./node_modules/@ember-data/legacy-compat/dist/-private-Dlia0pw1.js\");\n/* harmony import */ var _embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../@embroider/macros/src/addon/runtime */ \"./node_modules/@embroider/macros/src/addon/runtime.js\");\n/* harmony import */ var _embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../@embroider/macros/src/addon/es-compat2 */ \"./node_modules/@embroider/macros/src/addon/es-compat2.js\");\n/* harmony import */ var _ember_test_waiters__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ember/test-waiters */ \"./node_modules/@ember/test-waiters/dist/index.js\");\nfunction _findHasMany(adapter,store,identifier,link,relationship,options){const promise=Promise.resolve().then(()=>{const snapshot=store._fetchManager.createSnapshot(identifier,options);const useLink=!link||typeof link==='string';const relatedLink=useLink?link:link.href;(test=>{if(!test){throw new Error(`Attempted to load a hasMany relationship from a specified 'link' in the original payload, but the specified link is empty. You must provide a valid 'link' in the original payload to use 'findHasMany'`);}})(relatedLink);(test=>{if(!test){throw new Error(`Expected the adapter to implement 'findHasMany' but it does not`);}})(typeof adapter.findHasMany==='function');return adapter.findHasMany(store,snapshot,relatedLink,relationship);});return promise.then(adapterPayload=>{(test=>{if(!test){throw new Error(`You made a 'findHasMany' request for a ${identifier.type}'s '${relationship.name}' relationship, using link '${JSON.stringify(link)}' , but the adapter's response did not have any data`);}})((0,_private_Dlia0pw1_js__WEBPACK_IMPORTED_MODULE_3__.p)(adapterPayload));const modelClass=store.modelFor(relationship.type);const serializer=store.serializerFor(relationship.type);let payload=(0,_private_Dlia0pw1_js__WEBPACK_IMPORTED_MODULE_3__.n)(serializer,store,modelClass,adapterPayload,null,'findHasMany');(test=>{if(!test){throw new Error(`fetched the hasMany relationship '${relationship.name}' for ${identifier.type}:${identifier.id} with link '${JSON.stringify(link)}', but no data member is present in the response. If no data exists, the response should set { data: [] }`);}})('data'in payload&&Array.isArray(payload.data));payload=syncRelationshipDataFromLink(store,payload,identifier,relationship);return store._push(payload,true);},null);}function _findBelongsTo(store,identifier,link,relationship,options){const promise=Promise.resolve().then(()=>{const adapter=store.adapterFor(identifier.type);(test=>{if(!test){throw new Error(`You tried to load a belongsTo relationship but you have no adapter (for ${identifier.type})`);}})(adapter);(test=>{if(!test){throw new Error(`You tried to load a belongsTo relationship from a specified 'link' in the original payload but your adapter does not implement 'findBelongsTo'`);}})(typeof adapter.findBelongsTo==='function');const snapshot=store._fetchManager.createSnapshot(identifier,options);const useLink=!link||typeof link==='string';const relatedLink=useLink?link:link.href;(test=>{if(!test){throw new Error(`Attempted to load a belongsTo relationship from a specified 'link' in the original payload, but the specified link is empty. You must provide a valid 'link' in the original payload to use 'findBelongsTo'`);}})(relatedLink);return adapter.findBelongsTo(store,snapshot,relatedLink,relationship);});return promise.then(adapterPayload=>{const modelClass=store.modelFor(relationship.type);const serializer=store.serializerFor(relationship.type);let payload=(0,_private_Dlia0pw1_js__WEBPACK_IMPORTED_MODULE_3__.n)(serializer,store,modelClass,adapterPayload,null,'findBelongsTo');(test=>{if(!test){throw new Error(`fetched the belongsTo relationship '${relationship.name}' for ${identifier.type}:${identifier.id} with link '${JSON.stringify(link)}', but no data member is present in the response. If no data exists, the response should set { data: null }`);}})('data'in payload&&(payload.data===null||typeof payload.data==='object'&&!Array.isArray(payload.data)));if(!payload.data&&!payload.links&&!payload.meta){return null;}payload=syncRelationshipDataFromLink(store,payload,identifier,relationship);return store._push(payload,true);},null);}// sync\n// iterate over records in payload.data\n// for each record\n//   assert that record.relationships[inverse] is either undefined (so we can fix it)\n//     or provide a data: {id, type} that matches the record that requested it\n//   return the relationship data for the parent\nfunction syncRelationshipDataFromLink(store,payload,parentIdentifier,relationship){// ensure the right hand side (incoming payload) points to the parent record that\n// requested this relationship\nconst relationshipData=payload.data?(0,_private_Dlia0pw1_js__WEBPACK_IMPORTED_MODULE_3__.i)(payload.data,(data,index)=>{const{id,type}=data;ensureRelationshipIsSetToParent(data,parentIdentifier,store,relationship,index);return{id,type};}):null;const relatedDataHash={};if('meta'in payload){relatedDataHash.meta=payload.meta;}if('links'in payload){relatedDataHash.links=payload.links;}if('data'in payload){relatedDataHash.data=relationshipData;}// now, push the left hand side (the parent record) to ensure things are in sync, since\n// the payload will be pushed with store._push\nconst parentPayload={id:parentIdentifier.id,type:parentIdentifier.type,relationships:{[relationship.name]:relatedDataHash}};if(!Array.isArray(payload.included)){payload.included=[];}payload.included.push(parentPayload);return payload;}function ensureRelationshipIsSetToParent(payload,parentIdentifier,store,parentRelationship,index){const{id,type}=payload;if(!payload.relationships){payload.relationships={};}const{relationships}=payload;const inverse=getInverse(store,parentIdentifier,parentRelationship,type);if(inverse){const{inverseKey,kind}=inverse;const relationshipData=relationships[inverseKey]?.data;{if(typeof relationshipData!=='undefined'&&!relationshipDataPointsToParent(relationshipData,parentIdentifier)){const inspect=function inspect(thing){return`'${JSON.stringify(thing)}'`;};const quotedType=inspect(type);const quotedInverse=inspect(inverseKey);const expected=inspect({id:parentIdentifier.id,type:parentIdentifier.type});const expectedModel=`${parentIdentifier.type}:${parentIdentifier.id}`;const got=inspect(relationshipData);const prefix=typeof index==='number'?`data[${index}]`:`data`;const path=`${prefix}.relationships.${inverseKey}.data`;const data=Array.isArray(relationshipData)?relationshipData[0]:relationshipData;const other=data?`<${data.type}:${data.id}>`:null;const relationshipFetched=`${expectedModel}.${parentRelationship.kind}(\"${parentRelationship.name}\")`;const includedRecord=`<${type}:${id}>`;const message=[`Encountered mismatched relationship: Ember Data expected ${path} in the payload from ${relationshipFetched} to include ${expected} but got ${got} instead.\\n`,`The ${includedRecord} record loaded at ${prefix} in the payload specified ${other} as its ${quotedInverse}, but should have specified ${expectedModel} (the record the relationship is being loaded from) as its ${quotedInverse} instead.`,`This could mean that the response for ${relationshipFetched} may have accidentally returned ${quotedType} records that aren't related to ${expectedModel} and could be related to a different ${parentIdentifier.type} record instead.`,`Ember Data has corrected the ${includedRecord} record's ${quotedInverse} relationship to ${expectedModel} so that ${relationshipFetched} will include ${includedRecord}.`,`Please update the response from the server or change your serializer to either ensure that the response for only includes ${quotedType} records that specify ${expectedModel} as their ${quotedInverse}, or omit the ${quotedInverse} relationship from the response.`].join('\\n');(test=>{{throw new Error(message);}})();}}if(kind!=='hasMany'||typeof relationshipData!=='undefined'){relationships[inverseKey]=relationships[inverseKey]||{};relationships[inverseKey].data=fixRelationshipData(relationshipData??null,kind,parentIdentifier);}}}function inverseForRelationship(store,identifier,key){const definition=store.schema.fields(identifier).get(key);if(!definition){return null;}(test=>{if(!test){throw new Error(`Expected the field definition to be a relationship`);}})(definition.kind==='hasMany'||definition.kind==='belongsTo');(test=>{if(!test){throw new Error(`Expected the relationship defintion to specify the inverse type or null.`);}})(definition.options?.inverse===null||typeof definition.options?.inverse==='string'&&definition.options.inverse.length>0);return definition.options.inverse;}function getInverse(store,parentIdentifier,parentRelationship,type){const{name:lhs_relationshipName}=parentRelationship;const{type:parentType}=parentIdentifier;const inverseKey=inverseForRelationship(store,{type:parentType},lhs_relationshipName);if(inverseKey){const definition=store.schema.fields({type}).get(inverseKey);(test=>{if(!test){throw new Error(`Expected the field definition to be a relationship`);}})(definition&&(definition.kind==='hasMany'||definition.kind==='belongsTo'));return{inverseKey,kind:definition.kind};}}function relationshipDataPointsToParent(relationshipData,identifier){if(relationshipData===null){return false;}if(Array.isArray(relationshipData)){if(relationshipData.length===0){return false;}for(let i=0;i<relationshipData.length;i++){const entry=relationshipData[i];if(validateRelationshipEntry(entry,identifier)){return true;}}}else{return validateRelationshipEntry(relationshipData,identifier);}return false;}function fixRelationshipData(relationshipData,relationshipKind,{id,type}){const parentRelationshipData={id,type};let payload=null;if(relationshipKind==='hasMany'){const relData=relationshipData||[];if(relationshipData){(test=>{if(!test){throw new Error('expected the relationship data to be an array');}})(Array.isArray(relationshipData));// these arrays could be massive so this is better than filter\n// Note: this is potentially problematic if type/id are not in the\n// same state of normalization.\nconst found=relationshipData.find(v=>{return v.type===parentRelationshipData.type&&v.id===parentRelationshipData.id;});if(!found){relData.push(parentRelationshipData);}}else{relData.push(parentRelationshipData);}payload=relData;}else{const relData=relationshipData||{};Object.assign(relData,parentRelationshipData);payload=relData;}return payload;}function validateRelationshipEntry({id},{id:parentModelID}){return!!id&&id.toString()===parentModelID;}const PotentialLegacyOperations=new Set(['findRecord','findAll','query','queryRecord','findBelongsTo','findHasMany','updateRecord','createRecord','deleteRecord']);const LegacyNetworkHandler={request(context,next){// if we are not a legacy request, move on\nif(context.request.url||!context.request.op||!PotentialLegacyOperations.has(context.request.op)){return next(context.request);}const{store}=context.request;if(!store._fetchManager){store._fetchManager=new _private_Dlia0pw1_js__WEBPACK_IMPORTED_MODULE_3__.F(store);}switch(context.request.op){case'findRecord':return findRecord(context);case'findAll':return findAll(context);case'query':return query(context);case'queryRecord':return queryRecord(context);case'findBelongsTo':return findBelongsTo(context);case'findHasMany':return findHasMany(context);case'updateRecord':return saveRecord(context);case'createRecord':return saveRecord(context);case'deleteRecord':return saveRecord(context);default:return next(context.request);}}};function findBelongsTo(context){const{store,data,records:identifiers}=context.request;const{options,record,links,useLink,field}=data;const identifier=identifiers?.[0];// short circuit if we are already loading\nconst pendingRequest=identifier&&store._fetchManager.getPendingFetch(identifier,options);if(pendingRequest){return pendingRequest;}if(useLink){(test=>{if(!test){throw new Error(`Expected a related link when calling store.findBelongsTo, found ${String(links)}`);}})(links&&links.related);return _findBelongsTo(store,record,links.related,field,options);}(test=>{if(!test){throw new Error(`Expected an identifier`);}})(Array.isArray(identifiers)&&identifiers.length===1);const manager=store._fetchManager;(0,_private_Dlia0pw1_js__WEBPACK_IMPORTED_MODULE_3__.a)(identifier);return options.reload?manager.scheduleFetch(identifier,options,context.request):manager.fetchDataIfNeededForIdentifier(identifier,options,context.request);}function findHasMany(context){const{store,data,records:identifiers}=context.request;const{options,record,links,useLink,field}=data;// link case\nif(useLink){const adapter=store.adapterFor(record.type);/*\n    If a relationship was originally populated by the adapter as a link\n    (as opposed to a list of IDs), this method is called when the\n    relationship is fetched.\n     The link (which is usually a URL) is passed through unchanged, so the\n    adapter can make whatever request it wants.\n     The usual use-case is for the server to register a URL as a link, and\n    then use that URL in the future to make a request for the relationship.\n    */(test=>{if(!test){throw new Error(`You tried to load a hasMany relationship but you have no adapter (for ${record.type})`);}})(adapter);(test=>{if(!test){throw new Error(`You tried to load a hasMany relationship from a specified 'link' in the original payload but your adapter does not implement 'findHasMany'`);}})(typeof adapter.findHasMany==='function');(test=>{if(!test){throw new Error(`Expected a related link when calling store.findHasMany, found ${String(links)}`);}})(links&&links.related);return _findHasMany(adapter,store,record,links.related,field,options);}// identifiers case\n(test=>{if(!test){throw new Error(`Expected an array of identifiers to fetch`);}})(Array.isArray(identifiers));const fetches=new Array(identifiers.length);const manager=store._fetchManager;for(let i=0;i<identifiers.length;i++){const identifier=identifiers[i];// TODO we probably can be lenient here and return from cache for the isNew case\n(0,_private_Dlia0pw1_js__WEBPACK_IMPORTED_MODULE_3__.a)(identifier);fetches[i]=options.reload?manager.scheduleFetch(identifier,options,context.request):manager.fetchDataIfNeededForIdentifier(identifier,options,context.request);}return Promise.all(fetches);}function saveRecord(context){const{store,data,op:operation}=context.request;const{options,record:identifier}=data;store.cache.willCommit(identifier,context);const saveOptions=Object.assign({[_private_Dlia0pw1_js__WEBPACK_IMPORTED_MODULE_3__.S]:operation},options);const fetchManagerPromise=store._fetchManager.scheduleSave(identifier,saveOptions);return fetchManagerPromise.then(payload=>{let result;store._join(()=>{// @ts-expect-error we don't have access to a response in legacy\nresult=store.cache.didCommit(identifier,{request:context.request,content:payload});});// blatantly lie if we were a createRecord request\n// to give some semblance of cache-control to the\n// CachePolicy while legacy is still around\nif(store.lifetimes?.didRequest&&operation==='createRecord'){store.lifetimes.didRequest(context.request,{status:201},null,store);}return store.peekRecord(result.data);}).catch(e=>{let err=e;if(!e){err=new Error(`Unknown Error Occurred During Request`);}else if(typeof e==='string'){err=new Error(e);}adapterDidInvalidate(store,identifier,err);throw err;});}function adapterDidInvalidate(store,identifier,error){if(error&&error.isAdapterError===true&&error.code==='InvalidError'){const serializer=store.serializerFor(identifier.type);// TODO @deprecate extractErrors being called\n// TODO remove extractErrors from the default serializers.\nif(serializer&&typeof serializer.extractErrors==='function'){const errorsHash=serializer.extractErrors(store,store.modelFor(identifier.type),error,identifier.id);error.errors=errorsHashToArray(errorsHash);}}const cache=store.cache;if(error.errors){(test=>{if(!test){throw new Error(`Expected the cache in use by resource ${String(identifier)} to have a getErrors(identifier) method for retrieving errors.`);}})(typeof cache.getErrors==='function');let jsonApiErrors=error.errors;if(jsonApiErrors.length===0){jsonApiErrors=[{title:'Invalid Error',detail:'',source:{pointer:'/data'}}];}cache.commitWasRejected(identifier,jsonApiErrors);}else{cache.commitWasRejected(identifier);}}function makeArray(value){return Array.isArray(value)?value:[value];}const PRIMARY_ATTRIBUTE_KEY='base';function errorsHashToArray(errors){const out=[];if(errors){Object.keys(errors).forEach(key=>{const messages=makeArray(errors[key]);for(let i=0;i<messages.length;i++){let title='Invalid Attribute';let pointer=`/data/attributes/${key}`;if(key===PRIMARY_ATTRIBUTE_KEY){title='Invalid Document';pointer=`/data`;}out.push({title:title,detail:messages[i],source:{pointer:pointer}});}});}return out;}function findRecord(context){const{store,data}=context.request;const{record:identifier,options}=data;let promise;// if not loaded start loading\nif(!store._instanceCache.recordIsLoaded(identifier)){promise=store._fetchManager.fetchDataIfNeededForIdentifier(identifier,options,context.request);// Refetch if the reload option is passed\n}else if(options.reload){(0,_private_Dlia0pw1_js__WEBPACK_IMPORTED_MODULE_3__.a)(identifier);promise=store._fetchManager.scheduleFetch(identifier,options,context.request);}else{let snapshot=null;const adapter=store.adapterFor(identifier.type);// Refetch the record if the adapter thinks the record is stale\nif(typeof options.reload==='undefined'&&adapter.shouldReloadRecord&&adapter.shouldReloadRecord(store,snapshot=store._fetchManager.createSnapshot(identifier,options))){(0,_private_Dlia0pw1_js__WEBPACK_IMPORTED_MODULE_3__.a)(identifier);{promise=store._fetchManager.scheduleFetch(identifier,Object.assign({},options,{reload:true}),context.request);}}else{// Trigger the background refetch if backgroundReload option is passed\nif(options.backgroundReload!==false&&(options.backgroundReload||!adapter.shouldBackgroundReloadRecord||adapter.shouldBackgroundReloadRecord(store,snapshot=snapshot||store._fetchManager.createSnapshot(identifier,options)))){(0,_private_Dlia0pw1_js__WEBPACK_IMPORTED_MODULE_3__.a)(identifier);{void store._fetchManager.scheduleFetch(identifier,Object.assign({},options,{backgroundReload:true}),context.request);}}// Return the cached record\npromise=Promise.resolve(identifier);}}return promise.then(i=>store.peekRecord(i));}function findAll(context){const{store,data}=context.request;const{type,options}=data;const adapter=store.adapterFor(type);(test=>{if(!test){throw new Error(`You tried to load all records but you have no adapter (for ${type})`);}})(adapter);(test=>{if(!test){throw new Error(`You tried to load all records but your adapter does not implement 'findAll'`);}})(typeof adapter.findAll==='function');// avoid initializing the liveArray just to set `isUpdating`\nconst maybeRecordArray=store.recordArrayManager._live.get(type);const snapshotArray=new _private_Dlia0pw1_js__WEBPACK_IMPORTED_MODULE_3__.b(store,type,options);const shouldReload=options.reload||options.reload!==false&&(adapter.shouldReloadAll&&adapter.shouldReloadAll(store,snapshotArray)||!adapter.shouldReloadAll&&snapshotArray.length===0);let fetch;if(shouldReload){// eslint-disable-next-line @typescript-eslint/no-unused-expressions\nmaybeRecordArray&&(maybeRecordArray.isUpdating=true);fetch=_findAll(adapter,store,type,snapshotArray,context.request,true);}else{fetch=Promise.resolve(store.peekAll(type));if(options.backgroundReload||options.backgroundReload!==false&&(!adapter.shouldBackgroundReloadAll||adapter.shouldBackgroundReloadAll(store,snapshotArray))){// eslint-disable-next-line @typescript-eslint/no-unused-expressions\nmaybeRecordArray&&(maybeRecordArray.isUpdating=true);void _findAll(adapter,store,type,snapshotArray,context.request,false);}}return fetch;}function _findAll(adapter,store,type,snapshotArray,request,isAsyncFlush){const schema=store.modelFor(type);let promise=Promise.resolve().then(()=>adapter.findAll(store,schema,null,snapshotArray));promise=promise.then(adapterPayload=>{(test=>{if(!test){throw new Error(`You made a 'findAll' request for '${type}' records, but the adapter's response did not have any data`);}})((0,_private_Dlia0pw1_js__WEBPACK_IMPORTED_MODULE_3__.p)(adapterPayload));const serializer=store.serializerFor(type);const payload=(0,_private_Dlia0pw1_js__WEBPACK_IMPORTED_MODULE_3__.n)(serializer,store,schema,adapterPayload,null,'findAll');store._push(payload,isAsyncFlush);snapshotArray._recordArray.isUpdating=false;{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_4__.getGlobalConfig)().WarpDrive.debug.LOG_REQUESTS||globalThis.getWarpDriveRuntimeConfig().debug.LOG_REQUESTS){// eslint-disable-next-line no-console\nconsole.log(`request: findAll<${type}> background reload complete`);}}return snapshotArray._recordArray;});{if(!request.disableTestWaiter){const{waitForPromise}=(0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(_ember_test_waiters__WEBPACK_IMPORTED_MODULE_6__);promise=waitForPromise(promise);}}return promise;}function query(context){const{store,data}=context.request;let{options}=data;// eslint-disable-next-line @typescript-eslint/no-shadow\nconst{type,query}=data;const adapter=store.adapterFor(type);(test=>{if(!test){throw new Error(`You tried to make a query but you have no adapter (for ${type})`);}})(adapter);(test=>{if(!test){throw new Error(`You tried to make a query but your adapter does not implement 'query'`);}})(typeof adapter.query==='function');const recordArray=options._recordArray||store.recordArrayManager.getCollection({type,query});{options=Object.assign({},options);delete options._recordArray;}const schema=store.modelFor(type);const promise=Promise.resolve().then(()=>adapter.query(store,schema,query,recordArray,options));return promise.then(adapterPayload=>{const serializer=store.serializerFor(type);const payload=(0,_private_Dlia0pw1_js__WEBPACK_IMPORTED_MODULE_3__.n)(serializer,store,schema,adapterPayload,null,'query');const identifiers=store._push(payload,true);(test=>{if(!test){throw new Error('The response to store.query is expected to be an array but it was a single record. Please wrap your response in an array or use `store.queryRecord` to query for a single record.');}})(Array.isArray(identifiers));store.recordArrayManager.populateManagedArray(recordArray,identifiers,payload);return recordArray;});}function assertSingleResourceDocument(payload){(test=>{if(!test){throw new Error(`Expected the primary data returned by the serializer for a 'queryRecord' response to be a single object or null but instead it was an array.`);}})(!Array.isArray(payload.data));}function queryRecord(context){const{store,data}=context.request;// eslint-disable-next-line @typescript-eslint/no-shadow\nconst{type,query,options}=data;const adapter=store.adapterFor(type);(test=>{if(!test){throw new Error(`You tried to make a query but you have no adapter (for ${type})`);}})(adapter);(test=>{if(!test){throw new Error(`You tried to make a query but your adapter does not implement 'queryRecord'`);}})(typeof adapter.queryRecord==='function');const schema=store.modelFor(type);const promise=Promise.resolve().then(()=>adapter.queryRecord(store,schema,query,options));return promise.then(adapterPayload=>{const serializer=store.serializerFor(type);const payload=(0,_private_Dlia0pw1_js__WEBPACK_IMPORTED_MODULE_3__.n)(serializer,store,schema,adapterPayload,null,'queryRecord');assertSingleResourceDocument(payload);const identifier=store._push(payload,true);return identifier?store.peekRecord(identifier):null;});}/**\n * @module @ember-data/store\n * @class Store\n *//**\n    Returns an instance of the adapter for a given type. For\n    example, `adapterFor('person')` will return an instance of\n    the adapter located at `app/adapters/person.js`\n\n    If no `person` adapter is found, this method will look\n    for an `application` adapter (the default adapter for\n    your entire application).\n\n    @method adapterFor\n    @public\n    @param {String} modelName\n    @return Adapter\n  */function adapterFor(modelName,_allowMissing){(test=>{if(!test){throw new Error(`Attempted to call store.adapterFor(), but the store instance has already been destroyed.`);}})(!(this.isDestroying||this.isDestroyed));(test=>{if(!test){throw new Error(`You need to pass a model name to the store's adapterFor method`);}})(modelName);(test=>{if(!test){throw new Error(`Passing classes to store.adapterFor has been removed. Please pass a dasherized string instead of ${modelName}`);}})(typeof modelName==='string');this._adapterCache=this._adapterCache||Object.create(null);const normalizedModelName=(0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_2__._deprecatingNormalize)(modelName);const{_adapterCache}=this;let adapter=_adapterCache[normalizedModelName];if(adapter){return adapter;}const owner=(0,_ember_application__WEBPACK_IMPORTED_MODULE_0__.getOwner)(this);// name specific adapter\nadapter=owner.lookup(`adapter:${normalizedModelName}`);if(adapter!==undefined){_adapterCache[normalizedModelName]=adapter;return adapter;}// no adapter found for the specific name, fallback and check for application adapter\nadapter=_adapterCache.application||owner.lookup('adapter:application');if(adapter!==undefined){_adapterCache[normalizedModelName]=adapter;_adapterCache.application=adapter;return adapter;}(test=>{if(!test){throw new Error(`No adapter was found for '${modelName}' and no 'application' adapter was found as a fallback.`);}})(_allowMissing);}/**\n    Returns an instance of the serializer for a given type. For\n    example, `serializerFor('person')` will return an instance of\n    `App.PersonSerializer`.\n\n    If no `App.PersonSerializer` is found, this method will look\n    for an `App.ApplicationSerializer` (the default serializer for\n    your entire application).\n\n    If a serializer cannot be found on the adapter, it will fall back\n    to an instance of `JSONSerializer`.\n\n    @method serializerFor\n    @public\n    @param {String} modelName the record to serialize\n    @return {Serializer}\n  */function serializerFor(modelName){(test=>{if(!test){throw new Error(`Attempted to call store.serializerFor(), but the store instance has already been destroyed.`);}})(!(this.isDestroying||this.isDestroyed));(test=>{if(!test){throw new Error(`You need to pass a model name to the store's serializerFor method`);}})(modelName);(test=>{if(!test){throw new Error(`Passing classes to store.serializerFor has been removed. Please pass a dasherized string instead of ${modelName}`);}})(typeof modelName==='string');this._serializerCache=this._serializerCache||Object.create(null);const normalizedModelName=(0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_2__._deprecatingNormalize)(modelName);const{_serializerCache}=this;let serializer=_serializerCache[normalizedModelName];if(serializer){return serializer;}// by name\nconst owner=(0,_ember_application__WEBPACK_IMPORTED_MODULE_0__.getOwner)(this);serializer=owner.lookup(`serializer:${normalizedModelName}`);if(serializer!==undefined){_serializerCache[normalizedModelName]=serializer;return serializer;}// no serializer found for the specific model, fallback and check for application serializer\nserializer=_serializerCache.application||owner.lookup('serializer:application');if(serializer!==undefined){_serializerCache[normalizedModelName]=serializer;_serializerCache.application=serializer;return serializer;}return null;}/**\n    `normalize` converts a json payload into the normalized form that\n    [push](../methods/push?anchor=push) expects.\n\n    Example\n\n    ```js\n    socket.on('message', function(message) {\n      let modelName = message.model;\n      let data = message.data;\n      store.push(store.normalize(modelName, data));\n    });\n    ```\n\n    @method normalize\n    @public\n    @param {String} modelName The name of the model type for this payload\n    @param {Object} payload\n    @return {Object} The normalized payload\n  */// TODO @runspired @deprecate users should call normalize on the associated serializer directly\nfunction normalize(modelName,payload){(test=>{if(!test){throw new Error(`Attempted to call store.normalize(), but the store instance has already been destroyed.`);}})(!(this.isDestroying||this.isDestroyed));(test=>{if(!test){throw new Error(`You need to pass a model name to the store's normalize method`);}})(modelName);(test=>{if(!test){throw new Error(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${typeof modelName}`);}})(typeof modelName==='string');const normalizedModelName=(0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_2__._deprecatingNormalize)(modelName);const serializer=this.serializerFor(normalizedModelName);const schema=this.modelFor(normalizedModelName);(test=>{if(!test){throw new Error(`You must define a normalize method in your serializer in order to call store.normalize`);}})(typeof serializer?.normalize==='function');return serializer.normalize(schema,payload);}/**\n    Push some raw data into the store.\n\n    This method can be used both to push in brand new\n    records, as well as to update existing records. You\n    can push in more than one type of object at once.\n    All objects should be in the format expected by the\n    serializer.\n\n    ```app/serializers/application.js\n    import RESTSerializer from '@ember-data/serializer/rest';\n\n    export default class ApplicationSerializer extends RESTSerializer;\n    ```\n\n    ```js\n    let pushData = {\n      posts: [\n        { id: 1, postTitle: \"Great post\", commentIds: [2] }\n      ],\n      comments: [\n        { id: 2, commentBody: \"Insightful comment\" }\n      ]\n    }\n\n    store.pushPayload(pushData);\n    ```\n\n    By default, the data will be deserialized using a default\n    serializer (the application serializer if it exists).\n\n    Alternatively, `pushPayload` will accept a model type which\n    will determine which serializer will process the payload.\n\n    ```app/serializers/application.js\n    import RESTSerializer from '@ember-data/serializer/rest';\n\n     export default class ApplicationSerializer extends RESTSerializer;\n    ```\n\n    ```app/serializers/post.js\n    import JSONSerializer from '@ember-data/serializer/json';\n\n    export default JSONSerializer;\n    ```\n\n    ```js\n    store.pushPayload(pushData); // Will use the application serializer\n    store.pushPayload('post', pushData); // Will use the post serializer\n    ```\n\n    @method pushPayload\n    @public\n    @param {String} modelName Optionally, a model type used to determine which serializer will be used\n    @param {Object} inputPayload\n  */// TODO @runspired @deprecate pushPayload in favor of looking up the serializer\nfunction pushPayload(modelName,inputPayload){(test=>{if(!test){throw new Error(`Attempted to call store.pushPayload(), but the store instance has already been destroyed.`);}})(!(this.isDestroying||this.isDestroyed));const payload=inputPayload||modelName;const normalizedModelName=inputPayload?(0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_2__._deprecatingNormalize)(modelName):'application';const serializer=this.serializerFor(normalizedModelName);(test=>{if(!test){throw new Error(`You cannot use 'store.pushPayload(<type>, <payload>)' unless the serializer for '${normalizedModelName}' defines 'pushPayload'`);}})(serializer&&typeof serializer.pushPayload==='function');serializer.pushPayload(this,payload);}// TODO @runspired @deprecate records should implement their own serialization if desired\nfunction serializeRecord(record,options){// TODO we used to check if the record was destroyed here\nif(!this._fetchManager){this._fetchManager=new _private_Dlia0pw1_js__WEBPACK_IMPORTED_MODULE_3__.F(this);}return this._fetchManager.createSnapshot((0,_ember_data_store__WEBPACK_IMPORTED_MODULE_1__.recordIdentifierFor)(record)).serialize(options);}function cleanup(){// enqueue destruction of any adapters/serializers we have created\nfor(const adapterName in this._adapterCache){const adapter=this._adapterCache[adapterName];if(typeof adapter.destroy==='function'){adapter.destroy();}}for(const serializerName in this._serializerCache){const serializer=this._serializerCache[serializerName];if(typeof serializer.destroy==='function'){serializer.destroy();}}}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@ember-data/legacy-compat/dist/index.js?");

/***/ }),

/***/ "./node_modules/@ember-data/model/dist/hooks-CNY5g4Ab.js":
/*!***************************************************************!*\
  !*** ./node_modules/@ember-data/model/dist/hooks-CNY5g4Ab.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   i: () => (/* binding */ instantiateRecord),\n/* harmony export */   m: () => (/* binding */ modelFor),\n/* harmony export */   t: () => (/* binding */ teardownRecord)\n/* harmony export */ });\n/* harmony import */ var _ember_application__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/application */ \"@ember/application\");\n/* harmony import */ var _ember_application__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_application__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_data_store_private__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/store/-private */ \"./node_modules/@ember-data/store/dist/-private.js\");\n/* harmony import */ var _schema_provider_Bvogtzx9_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schema-provider-Bvogtzx9.js */ \"./node_modules/@ember-data/model/dist/schema-provider-Bvogtzx9.js\");\n/* harmony import */ var _model_rk3atPqV_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./model-rk3atPqV.js */ \"./node_modules/@ember-data/model/dist/model-rk3atPqV.js\");\nfunction instantiateRecord(identifier,createRecordArgs){const type=identifier.type;const cache=this.cache;// TODO deprecate allowing unknown args setting\nconst createOptions={_createProps:createRecordArgs,// TODO @deprecate consider deprecating accessing record properties during init which the below is necessary for\n_secretInit:{identifier,cache,store:this,cb:secretInit}};// ensure that `getOwner(this)` works inside a model instance\n(0,_ember_application__WEBPACK_IMPORTED_MODULE_0__.setOwner)(createOptions,(0,_ember_application__WEBPACK_IMPORTED_MODULE_0__.getOwner)(this));const factory=(0,_schema_provider_Bvogtzx9_js__WEBPACK_IMPORTED_MODULE_2__.g)(this,type);(test=>{if(!test){throw new Error(`No model was found for '${type}'`);}})(factory);return factory.class.create(createOptions);}function teardownRecord(record){(test=>{if(!test){throw new Error(`expected to receive an instance of Model from @ember-data/model. If using a custom model make sure you implement teardownRecord`);}})('destroy'in record);record.destroy();}function modelFor(modelName){(test=>{if(!test){throw new Error(`Attempted to call store.modelFor(), but the store instance has already been destroyed.`);}})(!this.isDestroyed&&!this.isDestroying);(test=>{if(!test){throw new Error(`You need to pass a model name to the store's modelFor method`);}})(modelName);(test=>{if(!test){throw new Error(`Please pass a proper model name to the store's modelFor method`);}})(typeof modelName==='string'&&modelName.length);const type=(0,_model_rk3atPqV_js__WEBPACK_IMPORTED_MODULE_3__.n)(modelName);const maybeFactory=(0,_schema_provider_Bvogtzx9_js__WEBPACK_IMPORTED_MODULE_2__.g)(this,type);const klass=maybeFactory&&maybeFactory.class?maybeFactory.class:null;const ignoreType=!klass||!klass.isModel||this._forceShim;if(!ignoreType){return klass;}(test=>{if(!test){throw new Error(`No model was found for '${type}' and no schema handles the type`);}})(this.schema.hasResource({type}));}function secretInit(record,cache,identifier,store){(0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_1__.setRecordIdentifier)(record,identifier);_ember_data_store_private__WEBPACK_IMPORTED_MODULE_1__.StoreMap.set(record,store);(0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_1__.setCacheFor)(record,cache);}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@ember-data/model/dist/hooks-CNY5g4Ab.js?");

/***/ }),

/***/ "./node_modules/@ember-data/model/dist/hooks.js":
/*!******************************************************!*\
  !*** ./node_modules/@ember-data/model/dist/hooks.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildSchema: () => (/* reexport safe */ _schema_provider_Bvogtzx9_js__WEBPACK_IMPORTED_MODULE_1__.b),\n/* harmony export */   instantiateRecord: () => (/* reexport safe */ _hooks_CNY5g4Ab_js__WEBPACK_IMPORTED_MODULE_0__.i),\n/* harmony export */   modelFor: () => (/* reexport safe */ _hooks_CNY5g4Ab_js__WEBPACK_IMPORTED_MODULE_0__.m),\n/* harmony export */   teardownRecord: () => (/* reexport safe */ _hooks_CNY5g4Ab_js__WEBPACK_IMPORTED_MODULE_0__.t)\n/* harmony export */ });\n/* harmony import */ var _hooks_CNY5g4Ab_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hooks-CNY5g4Ab.js */ \"./node_modules/@ember-data/model/dist/hooks-CNY5g4Ab.js\");\n/* harmony import */ var _schema_provider_Bvogtzx9_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./schema-provider-Bvogtzx9.js */ \"./node_modules/@ember-data/model/dist/schema-provider-Bvogtzx9.js\");\n\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@ember-data/model/dist/hooks.js?");

/***/ }),

/***/ "./node_modules/@ember-data/model/dist/model-rk3atPqV.js":
/*!***************************************************************!*\
  !*** ./node_modules/@ember-data/model/dist/model-rk3atPqV.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   E: () => (/* binding */ Errors),\n/* harmony export */   L: () => (/* binding */ LEGACY_SUPPORT),\n/* harmony export */   M: () => (/* binding */ Model),\n/* harmony export */   P: () => (/* binding */ PromiseBelongsTo),\n/* harmony export */   R: () => (/* binding */ RecordState),\n/* harmony export */   a: () => (/* binding */ PromiseManyArray),\n/* harmony export */   b: () => (/* binding */ save),\n/* harmony export */   c: () => (/* binding */ reload),\n/* harmony export */   d: () => (/* binding */ destroyRecord),\n/* harmony export */   e: () => (/* binding */ deleteRecord),\n/* harmony export */   f: () => (/* binding */ changedAttributes),\n/* harmony export */   g: () => (/* binding */ belongsTo),\n/* harmony export */   h: () => (/* binding */ hasMany),\n/* harmony export */   i: () => (/* binding */ createSnapshot),\n/* harmony export */   j: () => (/* binding */ isElementDescriptor),\n/* harmony export */   l: () => (/* binding */ lookupLegacySupport),\n/* harmony export */   n: () => (/* binding */ normalizeModelName),\n/* harmony export */   r: () => (/* binding */ rollbackAttributes),\n/* harmony export */   s: () => (/* binding */ serialize),\n/* harmony export */   u: () => (/* binding */ unloadRecord)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"@ember/debug\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_data_request_utils_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/request-utils/string */ \"./node_modules/@ember-data/request-utils/dist/string.js\");\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember/object */ \"@ember/object\");\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ember_object__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _ember_data_store__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ember-data/store */ \"./node_modules/@ember-data/store/dist/index.js\");\n/* harmony import */ var _ember_data_store_private__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ember-data/store/-private */ \"./node_modules/@ember-data/store/dist/-private.js\");\n/* harmony import */ var _ember_data_tracking__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ember-data/tracking */ \"./node_modules/@ember-data/tracking/dist/index.js\");\n/* harmony import */ var _ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ember-data/tracking/-private */ \"./node_modules/@ember-data/tracking/dist/-private.js\");\n/* harmony import */ var _warp_drive_core_types_symbols__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @warp-drive/core-types/symbols */ \"./node_modules/@warp-drive/core-types/dist/symbols.js\");\n/* harmony import */ var _ember_array__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ember/array */ \"@ember/array\");\n/* harmony import */ var _ember_array__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_ember_array__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _ember_array_proxy__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ember/array/proxy */ \"@ember/array/proxy\");\n/* harmony import */ var _ember_array_proxy__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_ember_array_proxy__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _ember_object_computed__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ember/object/computed */ \"@ember/object/computed\");\n/* harmony import */ var _ember_object_computed__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_ember_object_computed__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _ember_data_legacy_compat_private__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @ember-data/legacy-compat/-private */ \"./node_modules/@ember-data/legacy-compat/dist/-private.js\");\n/* harmony import */ var _warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @warp-drive/core-types/-private */ \"./node_modules/@warp-drive/core-types/dist/-private.js\");\n/* harmony import */ var _warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @warp-drive/core-types/request */ \"./node_modules/@warp-drive/core-types/dist/request.js\");\n/* harmony import */ var _ember_object_promise_proxy_mixin__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @ember/object/promise-proxy-mixin */ \"@ember/object/promise-proxy-mixin\");\n/* harmony import */ var _ember_object_promise_proxy_mixin__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_ember_object_promise_proxy_mixin__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var _ember_object_proxy__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @ember/object/proxy */ \"@ember/object/proxy\");\n/* harmony import */ var _ember_object_proxy__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_ember_object_proxy__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _ember_object_internals__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @ember/object/internals */ \"@ember/object/internals\");\n/* harmony import */ var _ember_object_internals__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_ember_object_internals__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var _embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../@embroider/macros/src/addon/es-compat2 */ \"./node_modules/@embroider/macros/src/addon/es-compat2.js\");\n/* harmony import */ var _ember_data_graph_private__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @ember-data/graph/-private */ \"./node_modules/@ember-data/graph/dist/-private.js\");\nvar _PromiseBelongsTo,_PromiseManyArray,_HasManyReference,_BelongsToReference,_Errors,_RecordState,_Model;function _classPrivateFieldInitSpec(e,t,a){_checkPrivateRedeclaration(e,t),t.set(e,a);}function _checkPrivateRedeclaration(e,t){if(t.has(e))throw new TypeError(\"Cannot initialize the same private elements twice on an object\");}function _defineProperty(e,r,t){return(r=_toPropertyKey(r))in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e;}function _toPropertyKey(t){var i=_toPrimitive(t,\"string\");return\"symbol\"==typeof i?i:i+\"\";}function _toPrimitive(t,r){if(\"object\"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||\"default\");if(\"object\"!=typeof i)return i;throw new TypeError(\"@@toPrimitive must return a primitive value.\");}return(\"string\"===r?String:Number)(t);}function isElementDescriptor(args){const[maybeTarget,maybeKey,maybeDesc]=args;return(// Ensure we have the right number of args\nargs.length===3&&(// Make sure the target is a class or object (prototype)\ntypeof maybeTarget==='function'||typeof maybeTarget==='object'&&maybeTarget!==null)&&// Make sure the key is a string\ntypeof maybeKey==='string'&&(// Make sure the descriptor is the right shape\ntypeof maybeDesc==='object'&&maybeDesc!==null&&'enumerable'in maybeDesc&&'configurable'in maybeDesc||// TS compatibility\nmaybeDesc===undefined));}function normalizeModelName(type){{const result=(0,_ember_data_request_utils_string__WEBPACK_IMPORTED_MODULE_1__.dasherize)(type);(0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(`The resource type '${type}' is not normalized. Update your application code to use '${result}' instead of '${type}'.`,result===type,{id:'ember-data:deprecate-non-strict-types',until:'6.0',for:'ember-data',since:{available:'4.13',enabled:'5.3'}});return result;}// removed by dead control flow\n{}}const PromiseObject=_ember_object_proxy__WEBPACK_IMPORTED_MODULE_15___default().extend((_ember_object_promise_proxy_mixin__WEBPACK_IMPORTED_MODULE_14___default()));const deferred=/* @__PURE__ */new WeakMap();function deferDecorator(proto,prop,desc){let map=deferred.get(proto);if(!map){map=/* @__PURE__ */new Map();deferred.set(proto,map);}map.set(prop,desc);}function findDeferredDecorator(target,prop){var _a;let cursor=target.prototype;while(cursor){let desc=(_a=deferred.get(cursor))==null?void 0:_a.get(prop);if(desc){return desc;}cursor=cursor.prototype;}}function decorateFieldV2(prototype,prop,decorators,initializer){let desc={configurable:true,enumerable:true,writable:true,initializer:null};if(initializer){desc.initializer=initializer;}for(let decorator of decorators){desc=decorator(prototype,prop,desc)||desc;}if(desc.initializer===void 0){Object.defineProperty(prototype,prop,desc);}else{deferDecorator(prototype,prop,desc);}}function decorateMethodV2(prototype,prop,decorators){const origDesc=Object.getOwnPropertyDescriptor(prototype,prop);let desc={...origDesc};for(let decorator of decorators){desc=decorator(prototype,prop,desc)||desc;}if(desc.initializer!==void 0){desc.value=desc.initializer?desc.initializer.call(prototype):void 0;desc.initializer=void 0;}Object.defineProperty(prototype,prop,desc);}function initializeDeferredDecorator(target,prop){let desc=findDeferredDecorator(target.constructor,prop);if(desc){Object.defineProperty(target,prop,{enumerable:desc.enumerable,configurable:desc.configurable,writable:desc.writable,value:desc.initializer?desc.initializer.call(target):void 0});}}const LegacyPromiseProxy=Symbol.for('LegacyPromiseProxy');// eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-extraneous-class\nconst Extended=PromiseObject;/**\n @module @ember-data/model\n *//**\n  A PromiseBelongsTo is a PromiseObject that also proxies certain method calls\n  to the underlying belongsTo model.\n  Right now we proxy:\n    * `reload()`\n  @class PromiseBelongsTo\n  @extends PromiseObject\n  @private\n*/class PromiseBelongsTo extends Extended{constructor(...args){super(...args);_defineProperty(this,LegacyPromiseProxy,true);}get id(){const{key,legacySupport}=this._belongsToState;const ref=legacySupport.referenceFor('belongsTo',key);return ref.id();}// we don't proxy meta because we would need to proxy it to the relationship state container\n//  however, meta on relationships does not trigger change notifications.\n//  if you need relationship meta, you should do `record.belongsTo(relationshipName).meta()`\nget meta(){// eslint-disable-next-line no-constant-condition\n{(test=>{{throw new Error('You attempted to access meta on the promise for the async belongsTo relationship '+`${this._belongsToState.modelName}:${this._belongsToState.key}'.`+'\\nUse `record.belongsTo(relationshipName).meta()` instead.');}})();}return;}async reload(options){(test=>{if(!test){throw new Error('You are trying to reload an async belongsTo before it has been created');}})(this.content!==undefined);const{key,legacySupport}=this._belongsToState;await legacySupport.reloadBelongsTo(key,options);return this;}}/**\n @module @ember-data/model\n *//**\n  This class is returned as the result of accessing an async hasMany relationship\n  on an instance of a Model extending from `@ember-data/model`.\n\n  A PromiseManyArray is an iterable proxy that allows templates to consume related\n  ManyArrays and update once their contents are no longer pending.\n\n  In your JS code you should resolve the promise first.\n\n  ```js\n  const comments = await post.comments;\n  ```\n\n  @class PromiseManyArray\n  @public\n*/_PromiseBelongsTo=PromiseBelongsTo;decorateMethodV2(_PromiseBelongsTo.prototype,\"id\",[_ember_data_tracking__WEBPACK_IMPORTED_MODULE_5__.cached]);decorateMethodV2(_PromiseBelongsTo.prototype,\"meta\",[(0,_ember_object__WEBPACK_IMPORTED_MODULE_2__.computed)()]);class PromiseManyArray{constructor(promise,content){_defineProperty(this,LegacyPromiseProxy,true);this._update(promise,content);this.isDestroyed=false;}/**\n   * Retrieve the length of the content\n   * @property length\n   * @public\n   */get length(){// shouldn't be needed, but ends up being needed\n// for computed chains even in 4.x\n{// eslint-disable-next-line @typescript-eslint/no-unused-expressions\nthis['[]'];}return this.content?this.content.length:0;}/**\n   * Iterate the proxied content. Called by the glimmer iterator in #each\n   * We do not guarantee that forEach will always be available. This\n   * may eventually be made to use Symbol.Iterator once glimmer supports it.\n   *\n   * @method forEach\n   * @param cb\n   * @return\n   * @private\n   */forEach(cb){if(this.content&&this.length){this.content.forEach(cb);}}/**\n   * Reload the relationship\n   * @method reload\n   * @public\n   * @param options\n   * @return\n   */reload(options){(test=>{if(!test){throw new Error('You are trying to reload an async manyArray before it has been created');}})(this.content);void this.content.reload(options);return this;}//----  Properties/Methods from the PromiseProxyMixin that we will keep as our API\n/**\n   * Whether the loading promise is still pending\n   *\n   * @property {boolean} isPending\n   * @public\n   *//**\n   * Whether the loading promise rejected\n   *\n   * @property {boolean} isRejected\n   * @public\n   *//**\n   * Whether the loading promise succeeded\n   *\n   * @property {boolean} isFulfilled\n   * @public\n   *//**\n   * Whether the loading promise completed (resolved or rejected)\n   *\n   * @property {boolean} isSettled\n   * @public\n   *//**\n   * chain this promise\n   *\n   * @method then\n   * @public\n   * @param success\n   * @param fail\n   * @return Promise\n   */then(s,f){return this.promise.then(s,f);}/**\n   * catch errors thrown by this promise\n   * @method catch\n   * @public\n   * @param callback\n   * @return Promise\n   */catch(cb){return this.promise.catch(cb);}/**\n   * run cleanup after this promise completes\n   *\n   * @method finally\n   * @public\n   * @param callback\n   * @return Promise\n   */finally(cb){return this.promise.finally(cb);}//---- Methods on EmberObject that we should keep\ndestroy(){this.isDestroyed=true;this.content=null;this.promise=null;}//---- Methods/Properties on ManyArray that we own and proxy to\n/**\n   * Retrieve the links for this relationship\n   * @property links\n   * @public\n   */get links(){return this.content?this.content.links:undefined;}/**\n   * Retrieve the meta for this relationship\n   * @property meta\n   * @public\n   */get meta(){return this.content?this.content.meta:undefined;}//---- Our own stuff\n_update(promise,content){if(content!==undefined){this.content=content;}this.promise=tapPromise(this,promise);}static create({promise,content}){return new this(promise,content);}}_PromiseManyArray=PromiseManyArray;decorateMethodV2(_PromiseManyArray.prototype,\"length\",[_ember_data_tracking__WEBPACK_IMPORTED_MODULE_5__.compat]);decorateMethodV2(_PromiseManyArray.prototype,\"links\",[_ember_data_tracking__WEBPACK_IMPORTED_MODULE_5__.compat]);decorateMethodV2(_PromiseManyArray.prototype,\"meta\",[_ember_data_tracking__WEBPACK_IMPORTED_MODULE_5__.compat]);(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_6__.defineSignal)(PromiseManyArray.prototype,'content',null);(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_6__.defineSignal)(PromiseManyArray.prototype,'isPending',false);(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_6__.defineSignal)(PromiseManyArray.prototype,'isRejected',false);(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_6__.defineSignal)(PromiseManyArray.prototype,'isFulfilled',false);(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_6__.defineSignal)(PromiseManyArray.prototype,'isSettled',false);// this will error if someone tries to call\n// A(identifierArray) since it is not configurable\n// which is preferrable to the `meta` override we used\n// before which required importing all of Ember\n{const desc={enumerable:true,configurable:false,get:function(){return this.content?.length&&this.content;}};(0,_ember_data_tracking__WEBPACK_IMPORTED_MODULE_5__.compat)(desc);// ember-source < 3.23 (e.g. 3.20 lts)\n// requires that the tag `'[]'` be notified\n// on the ArrayProxy in order for `{{#each}}`\n// to recompute. We entangle the '[]' tag from content\nObject.defineProperty(PromiseManyArray.prototype,'[]',desc);}function tapPromise(proxy,promise){proxy.isPending=true;proxy.isSettled=false;proxy.isFulfilled=false;proxy.isRejected=false;return Promise.resolve(promise).then(content=>{proxy.isPending=false;proxy.isFulfilled=true;proxy.isSettled=true;proxy.content=content;return content;},error=>{proxy.isPending=false;proxy.isFulfilled=false;proxy.isRejected=true;proxy.isSettled=true;throw error;});}/*\n  Assert that `addedRecord` has a valid type so it can be added to the\n  relationship of the `record`.\n\n  The assert basically checks if the `addedRecord` can be added to the\n  relationship (specified via `relationshipMeta`) of the `record`.\n\n  This utility should only be used internally, as both record parameters must\n  be stable record identifiers and the `relationshipMeta` needs to be the meta\n  information about the relationship, retrieved via\n  `record.relationshipFor(key)`.\n*/let assertPolymorphicType;{// eslint-disable-next-line @typescript-eslint/no-shadow\nassertPolymorphicType=function assertPolymorphicType(parentIdentifier,parentDefinition,addedIdentifier,store){if(parentDefinition.inverseIsImplicit){return;}if(parentDefinition.isPolymorphic){const meta=store.schema.fields(addedIdentifier)?.get(parentDefinition.inverseKey);if(meta){(test=>{if(!test){throw new Error(`Expected the schema for the field ${parentDefinition.inverseKey} on ${addedIdentifier.type} to be for a legacy relationship`);}})(meta.kind==='belongsTo'||meta.kind==='hasMany');(test=>{if(!test){throw new Error(`The schema for the relationship '${parentDefinition.inverseKey}' on '${addedIdentifier.type}' type does not implement '${parentDefinition.type}' and thus cannot be assigned to the '${parentDefinition.key}' relationship in '${parentIdentifier.type}'. The definition should specify 'as: \"${parentDefinition.type}\"' in options.`);}})(meta?.options?.as===parentDefinition.type);}}};}function isResourceIdentiferWithRelatedLinks$1(value){return Boolean(value&&value.links&&value.links.related);}/**\n A `HasManyReference` is a low-level API that allows access\n and manipulation of a hasMany relationship.\n\n It is especially useful when you're dealing with `async` relationships\n from `@ember-data/model` as it allows synchronous access to\n the relationship data if loaded, as well as APIs for loading, reloading\n the data or accessing available information without triggering a load.\n\n It may also be useful when using `sync` relationships with `@ember-data/model`\n that need to be loaded/reloaded with more precise timing than marking the\n relationship as `async` and relying on autofetch would have allowed.\n\n However,keep in mind that marking a relationship as `async: false` will introduce\n bugs into your application if the data is not always guaranteed to be available\n by the time the relationship is accessed. Ergo, it is recommended when using this\n approach to utilize `links` for unloaded relationship state instead of identifiers.\n\n Reference APIs are entangled with the relationship's underlying state,\n thus any getters or cached properties that utilize these will properly\n invalidate if the relationship state changes.\n\n References are \"stable\", meaning that multiple calls to retrieve the reference\n  for a given relationship will always return the same HasManyReference.\n\n @class HasManyReference\n @public\n */class HasManyReference{constructor(store,graph,parentIdentifier,hasManyRelationship,key){/**\n   * The field name on the parent record for this has-many relationship.\n   *\n   * @property {String} key\n   * @public\n   *//**\n   * The type of resource this relationship will contain.\n   *\n   * @property {String} type\n   * @public\n   */// unsubscribe tokens given to us by the notification manager\n_defineProperty(this,\"___token\",void 0);_defineProperty(this,\"___identifier\",void 0);_defineProperty(this,\"___relatedTokenMap\",void 0);this.graph=graph;this.key=key;this.hasManyRelationship=hasManyRelationship;this.type=hasManyRelationship.definition.type;this.store=store;this.___identifier=parentIdentifier;this.___token=store.notifications.subscribe(parentIdentifier,(_,bucket,notifiedKey)=>{if(bucket==='relationships'&&notifiedKey===key){this._ref++;}});this.___relatedTokenMap=new Map();// TODO inverse\n}/**\n   * This method should never be called by user code.\n   *\n   * @internal\n   */destroy(){this.store.notifications.unsubscribe(this.___token);this.___relatedTokenMap.forEach(token=>{this.store.notifications.unsubscribe(token);});this.___relatedTokenMap.clear();}/**\n   * An array of identifiers for the records that this reference refers to.\n   *\n   * @property {StableRecordIdentifier[]} identifiers\n   * @public\n   */get identifiers(){ensureRefCanSubscribe(this);// eslint-disable-next-line @typescript-eslint/no-unused-expressions\nthis._ref;const resource=this._resource();const map=this.___relatedTokenMap;this.___relatedTokenMap=new Map();if(resource&&resource.data){return resource.data.map(resourceIdentifier=>{const identifier=this.store.identifierCache.getOrCreateRecordIdentifier(resourceIdentifier);let token=map.get(identifier);if(token){map.delete(identifier);}else{token=this.store.notifications.subscribe(identifier,(_,bucket,notifiedKey)=>{if(bucket==='identity'||bucket==='attributes'&&notifiedKey==='id'){this._ref++;}});}this.___relatedTokenMap.set(identifier,token);return identifier;});}map.forEach(token=>{this.store.notifications.unsubscribe(token);});map.clear();return[];}_resource(){const cache=this.store.cache;return cache.getRelationship(this.___identifier,this.key);}/**\n   This returns a string that represents how the reference will be\n   looked up when it is loaded. If the relationship has a link it will\n   use the \"link\" otherwise it defaults to \"id\".\n    Example\n    ```app/models/post.js\n   import Model, { hasMany } from '@ember-data/model';\n    export default class PostModel extends Model {\n     @hasMany('comment', { async: true, inverse: null }) comments;\n   }\n   ```\n    ```javascript\n   let post = store.push({\n     data: {\n       type: 'post',\n       id: 1,\n       relationships: {\n         comments: {\n           data: [{ type: 'comment', id: 1 }]\n         }\n       }\n     }\n   });\n    let commentsRef = post.hasMany('comments');\n    // get the identifier of the reference\n   if (commentsRef.remoteType() === \"ids\") {\n     let ids = commentsRef.ids();\n   } else if (commentsRef.remoteType() === \"link\") {\n     let link = commentsRef.link();\n   }\n   ```\n    @method remoteType\n   @public\n   @return {String} The name of the remote type. This should either be `link` or `ids`\n   */remoteType(){const value=this._resource();if(value&&value.links&&value.links.related){return'link';}return'ids';}/**\n   `ids()` returns an array of the record IDs in this relationship.\n    Example\n    ```app/models/post.js\n   import Model, { hasMany } from '@ember-data/model';\n    export default class PostModel extends Model {\n     @hasMany('comment', { async: true, inverse: null }) comments;\n   }\n   ```\n    ```javascript\n   let post = store.push({\n     data: {\n       type: 'post',\n       id: 1,\n       relationships: {\n         comments: {\n           data: [{ type: 'comment', id: 1 }]\n         }\n       }\n     }\n   });\n    let commentsRef = post.hasMany('comments');\n    commentsRef.ids(); // ['1']\n   ```\n    @method ids\n    @public\n   @return {Array} The ids in this has-many relationship\n   */ids(){return this.identifiers.map(identifier=>identifier.id);}/**\n   The link Ember Data will use to fetch or reload this belongs-to\n   relationship. By default it uses only the \"related\" resource linkage.\n    Example\n    ```javascript\n   // models/blog.js\n   import Model, { belongsTo } from '@ember-data/model';\n   export default Model.extend({\n      user: belongsTo('user', { async: true, inverse: null })\n    });\n    let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            links: {\n              related: '/articles/1/author'\n            }\n          }\n        }\n      }\n    });\n   let userRef = blog.belongsTo('user');\n    // get the identifier of the reference\n   if (userRef.remoteType() === \"link\") {\n      let link = userRef.link();\n    }\n   ```\n    @method link\n   @public\n   @return {String} The link Ember Data will use to fetch or reload this belongs-to relationship.\n   */link(){const resource=this._resource();if(isResourceIdentiferWithRelatedLinks$1(resource)){if(resource.links){const related=resource.links.related;return!related||typeof related==='string'?related:related.href;}}return null;}/**\n   * any links that have been received for this relationship\n   *\n   * @method links\n   * @public\n   * @return\n   */links(){const resource=this._resource();return resource&&resource.links?resource.links:null;}/**\n   The meta data for the has-many relationship.\n    Example\n    ```javascript\n   // models/blog.js\n   import Model, { hasMany } from '@ember-data/model';\n   export default Model.extend({\n      users: hasMany('user', { async: true, inverse: null })\n    });\n    let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          users: {\n            links: {\n              related: {\n                href: '/articles/1/authors'\n              },\n            },\n            meta: {\n              lastUpdated: 1458014400000\n            }\n          }\n        }\n      }\n    });\n    let usersRef = blog.hasMany('user');\n    usersRef.meta() // { lastUpdated: 1458014400000 }\n   ```\n   @method meta\n  @public\n  @return {Object|null} The meta information for the belongs-to relationship.\n  */meta(){let meta=null;const resource=this._resource();if(resource&&resource.meta&&typeof resource.meta==='object'){meta=resource.meta;}return meta;}/**\n   `push` can be used to update the data in the relationship and EmberData\n   will treat the new data as the canonical value of this relationship on\n   the backend. An empty array will signify the canonical value should be\n   empty.\n    Example model\n    ```app/models/post.js\n   import Model, { hasMany } from '@ember-data/model';\n    export default class PostModel extends Model {\n     @hasMany('comment', { async: true, inverse: null }) comments;\n   }\n   ```\n    Setup some initial state, note we haven't loaded the comments yet:\n    ```js\n   const post = store.push({\n     data: {\n       type: 'post',\n       id: '1',\n       relationships: {\n         comments: {\n           data: [{ type: 'comment', id: '1' }]\n         }\n       }\n     }\n   });\n    const commentsRef = post.hasMany('comments');\n   commentsRef.ids(); // ['1']\n   ```\n    Update the state using `push`, note we can do this even without\n   having loaded these comments yet by providing resource identifiers.\n    Both full resources and resource identifiers are supported.\n    ```js\n   await commentsRef.push({\n    data: [\n     { type: 'comment', id: '2' },\n     { type: 'comment', id: '3' },\n    ]\n   });\n    commentsRef.ids(); // ['2', '3']\n   ```\n    For convenience, you can also pass in an array of resources or resource identifiers\n   without wrapping them in the `data` property:\n    ```js\n   await commentsRef.push([\n     { type: 'comment', id: '4' },\n     { type: 'comment', id: '5' },\n   ]);\n    commentsRef.ids(); // ['4', '5']\n   ```\n    When using the `data` property, you may also include other resource data via included,\n   as well as provide new links and meta to the relationship.\n    ```js\n   await commentsRef.push({\n     links: {\n       related: '/posts/1/comments'\n     },\n     meta: {\n       total: 2\n     },\n     data: [\n       { type: 'comment', id: '4' },\n       { type: 'comment', id: '5' },\n     ],\n     included: [\n       { type: 'other-thing', id: '1', attributes: { foo: 'bar' },\n     ]\n   });\n   ```\n    By default, the store will attempt to fetch any unloaded records before resolving\n   the returned promise with the ManyArray.\n    Alternatively, pass `true` as the second argument to avoid fetching unloaded records\n   and instead the promise will resolve with void without attempting to fetch. This is\n   particularly useful if you want to update the state of the relationship without\n   forcing the load of all of the associated records.\n    @method push\n   @public\n   @param {Array|Object} doc a JSONAPI document object describing the new value of this relationship.\n   @param {Boolean} [skipFetch] if `true`, do not attempt to fetch unloaded records\n   @return {Promise<ManyArray | void>}\n  */async push(doc,skipFetch){const{store}=this;const dataDoc=Array.isArray(doc)?{data:doc}:doc;const isResourceData=Array.isArray(dataDoc.data)&&dataDoc.data.length>0&&isMaybeResource(dataDoc.data[0]);// enforce that one of links, meta or data is present\n(test=>{if(!test){throw new Error(`You must provide at least one of 'links', 'meta' or 'data' when calling hasManyReference.push`);}})('links'in dataDoc||'meta'in dataDoc||'data'in dataDoc);const identifiers=!Array.isArray(dataDoc.data)?[]:isResourceData?store._push(dataDoc,true):dataDoc.data.map(i=>store.identifierCache.getOrCreateRecordIdentifier(i));const{identifier}=this.hasManyRelationship;{const relationshipMeta=this.hasManyRelationship.definition;identifiers.forEach(added=>{assertPolymorphicType(identifier,relationshipMeta,added,store);});}const newData={};// only set data if it was passed in\nif(Array.isArray(dataDoc.data)){newData.data=identifiers;}if('links'in dataDoc){newData.links=dataDoc.links;}if('meta'in dataDoc){newData.meta=dataDoc.meta;}store._join(()=>{this.graph.push({op:'updateRelationship',record:identifier,field:this.key,value:newData});});if(!skipFetch)return this.load();}_isLoaded(){const hasRelationshipDataProperty=this.hasManyRelationship.state.hasReceivedData;if(!hasRelationshipDataProperty){return false;}const relationship=this.graph.getData(this.hasManyRelationship.identifier,this.key);return relationship.data?.every(identifier=>{return this.store._instanceCache.recordIsLoaded(identifier,true)===true;});}/**\n   `value()` synchronously returns the current value of the has-many\n   relationship. Unlike `record.relationshipName`, calling\n   `value()` on a reference does not trigger a fetch if the async\n   relationship is not yet loaded. If the relationship is not loaded\n   it will always return `null`.\n    Example\n    ```app/models/post.js\n   import Model, { hasMany } from '@ember-data/model';\n    export default class PostModel extends Model {\n     @hasMany('comment', { async: true, inverse: null }) comments;\n   }\n   ```\n    ```javascript\n   let post = store.push({\n     data: {\n       type: 'post',\n       id: 1,\n       relationships: {\n         comments: {\n           data: [{ type: 'comment', id: 1 }]\n         }\n       }\n     }\n   });\n    let commentsRef = post.hasMany('comments');\n    post.comments.then(function(comments) {\n     commentsRef.value() === comments\n   })\n   ```\n    @method value\n    @public\n   @return {ManyArray}\n   */value(){const support=LEGACY_SUPPORT.get(this.___identifier);if(!ensureRefCanSubscribe(this)){// eslint-disable-next-line @typescript-eslint/no-unused-expressions\nthis._ref;return null;}return support.getManyArray(this.key);}/**\n   Loads the relationship if it is not already loaded.  If the\n   relationship is already loaded this method does not trigger a new\n   load. This causes a request to the specified\n   relationship link or reloads all items currently in the relationship.\n    Example\n    ```app/models/post.js\n   import Model, { hasMany } from '@ember-data/model';\n    export default class PostModel extends Model {\n     @hasMany('comment', { async: true, inverse: null }) comments;\n   }\n   ```\n    ```javascript\n   let post = store.push({\n     data: {\n       type: 'post',\n       id: 1,\n       relationships: {\n         comments: {\n           data: [{ type: 'comment', id: 1 }]\n         }\n       }\n     }\n   });\n    let commentsRef = post.hasMany('comments');\n    commentsRef.load().then(function(comments) {\n     //...\n   });\n   ```\n    You may also pass in an options object whose properties will be\n   fed forward. This enables you to pass `adapterOptions` into the\n   request given to the adapter via the reference.\n    Example\n    ```javascript\n   commentsRef.load({ adapterOptions: { isPrivate: true } })\n     .then(function(comments) {\n       //...\n     });\n   ```\n    ```app/adapters/comment.js\n   export default ApplicationAdapter.extend({\n     findMany(store, type, id, snapshots) {\n       // In the adapter you will have access to adapterOptions.\n       let adapterOptions = snapshots[0].adapterOptions;\n     }\n   });\n   ```\n    @method load\n   @public\n   @param {Object} options the options to pass in.\n   @return {Promise} a promise that resolves with the ManyArray in\n   this has-many relationship.\n   */async load(options){const support=LEGACY_SUPPORT.get(this.___identifier);const fetchSyncRel=!this.hasManyRelationship.definition.isAsync&&!areAllInverseRecordsLoaded(this.store,this._resource());return fetchSyncRel?support.reloadHasMany(this.key,options):// we cast to fix the return type since typescript and eslint don't understand async functions\n// properly\nsupport.getHasMany(this.key,options);}/**\n   Reloads this has-many relationship. This causes a request to the specified\n   relationship link or reloads all items currently in the relationship.\n    Example\n    ```app/models/post.js\n   import Model, { hasMany } from '@ember-data/model';\n    export default class PostModel extends Model {\n     @hasMany('comment', { async: true, inverse: null }) comments;\n   }\n   ```\n    ```javascript\n   let post = store.push({\n     data: {\n       type: 'post',\n       id: 1,\n       relationships: {\n         comments: {\n           data: [{ type: 'comment', id: 1 }]\n         }\n       }\n     }\n   });\n    let commentsRef = post.hasMany('comments');\n    commentsRef.reload().then(function(comments) {\n     //...\n   });\n   ```\n    You may also pass in an options object whose properties will be\n   fed forward. This enables you to pass `adapterOptions` into the\n   request given to the adapter via the reference. A full example\n   can be found in the `load` method.\n    Example\n    ```javascript\n   commentsRef.reload({ adapterOptions: { isPrivate: true } })\n   ```\n    @method reload\n    @public\n   @param {Object} options the options to pass in.\n   @return {Promise} a promise that resolves with the ManyArray in this has-many relationship.\n   */reload(options){const support=LEGACY_SUPPORT.get(this.___identifier);return support.reloadHasMany(this.key,options);}}_HasManyReference=HasManyReference;decorateMethodV2(_HasManyReference.prototype,\"identifiers\",[_ember_data_tracking__WEBPACK_IMPORTED_MODULE_5__.compat,_ember_data_tracking__WEBPACK_IMPORTED_MODULE_5__.cached]);(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_6__.defineSignal)(HasManyReference.prototype,'_ref',0);function isMaybeResource(object){const keys=Object.keys(object).filter(k=>k!=='id'&&k!=='type'&&k!=='lid');return keys.length>0;}function ensureRefCanSubscribe(rel){const loaded=rel._isLoaded();if(!loaded){// subscribe to changes\n// for when we are not loaded yet\n//\n// because the graph optimizes the case where a relationship has never been subscribed,\n// we force accessed to be true here. When we make the graph public we should create a\n// subscribe/unsubscribe API\nconst edge=rel.graph.get(rel.___identifier,rel.key);(test=>{if(!test){throw new Error(`Expected a hasMany relationship for ${rel.___identifier.type}:${rel.key}`);}})('accessed'in edge);edge.accessed=true;return false;}return true;}function isResourceIdentiferWithRelatedLinks(value){return Boolean(value&&value.links&&value.links.related);}/**\n A `BelongsToReference` is a low-level API that allows access\n and manipulation of a belongsTo relationship.\n\n It is especially useful when you're dealing with `async` relationships\n from `@ember-data/model` as it allows synchronous access to\n the relationship data if loaded, as well as APIs for loading, reloading\n the data or accessing available information without triggering a load.\n\n It may also be useful when using `sync` relationships with `@ember-data/model`\n that need to be loaded/reloaded with more precise timing than marking the\n relationship as `async` and relying on autofetch would have allowed.\n\n However,keep in mind that marking a relationship as `async: false` will introduce\n bugs into your application if the data is not always guaranteed to be available\n by the time the relationship is accessed. Ergo, it is recommended when using this\n approach to utilize `links` for unloaded relationship state instead of identifiers.\n\n Reference APIs are entangled with the relationship's underlying state,\n thus any getters or cached properties that utilize these will properly\n invalidate if the relationship state changes.\n\n References are \"stable\", meaning that multiple calls to retrieve the reference\n  for a given relationship will always return the same HasManyReference.\n\n @class BelongsToReference\n @public\n */class BelongsToReference{/**\n   * The field name on the parent record for this has-many relationship.\n   *\n   * @property {String} key\n   * @public\n   *//**\n   * The type of resource this relationship will contain.\n   *\n   * @property {String} type\n   * @public\n   */// unsubscribe tokens given to us by the notification manager\nconstructor(store,graph,parentIdentifier,belongsToRelationship,key){this.graph=graph;this.key=key;this.belongsToRelationship=belongsToRelationship;this.type=belongsToRelationship.definition.type;this.store=store;this.___identifier=parentIdentifier;this.___relatedToken=null;this.___token=store.notifications.subscribe(parentIdentifier,(_,bucket,notifiedKey)=>{if(bucket==='relationships'&&notifiedKey===key){this._ref++;}});// TODO inverse\n}destroy(){// TODO @feature we need the notification manager often enough\n// we should potentially just expose it fully public\nthis.store.notifications.unsubscribe(this.___token);this.___token=null;if(this.___relatedToken){this.store.notifications.unsubscribe(this.___relatedToken);this.___relatedToken=null;}}/**\n   * The identifier of the record that this reference refers to.\n   * `null` if no related record is known.\n   *\n   * @property {StableRecordIdentifier | null} identifier\n   * @public\n   */get identifier(){if(this.___relatedToken){this.store.notifications.unsubscribe(this.___relatedToken);this.___relatedToken=null;}const resource=this._resource();if(resource&&resource.data){const identifier=this.store.identifierCache.getOrCreateRecordIdentifier(resource.data);this.___relatedToken=this.store.notifications.subscribe(identifier,(_,bucket,notifiedKey)=>{if(bucket==='identity'||bucket==='attributes'&&notifiedKey==='id'){this._ref++;}});return identifier;}return null;}/**\n   The `id` of the record that this reference refers to. Together, the\n   `type()` and `id()` methods form a composite key for the identity\n   map. This can be used to access the id of an async relationship\n   without triggering a fetch that would normally happen if you\n   attempted to use `record.relationship.id`.\n    Example\n    ```javascript\n   // models/blog.js\n   import Model, { belongsTo } from '@ember-data/model';\n    export default class BlogModel extends Model {\n    @belongsTo('user', { async: true, inverse: null }) user;\n   }\n    let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            data: { type: 'user', id: 1 }\n          }\n        }\n      }\n    });\n   let userRef = blog.belongsTo('user');\n    // get the identifier of the reference\n   if (userRef.remoteType() === \"id\") {\n      let id = userRef.id();\n    }\n   ```\n    @method id\n   @public\n   @return {String} The id of the record in this belongsTo relationship.\n   */id(){return this.identifier?.id||null;}/**\n   The link Ember Data will use to fetch or reload this belongs-to\n   relationship. By default it uses only the \"related\" resource linkage.\n    Example\n    ```javascript\n   // models/blog.js\n   import Model, { belongsTo } from '@ember-data/model';\n   export default Model.extend({\n      user: belongsTo('user', { async: true, inverse: null })\n    });\n    let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            links: {\n              related: '/articles/1/author'\n            }\n          }\n        }\n      }\n    });\n   let userRef = blog.belongsTo('user');\n    // get the identifier of the reference\n   if (userRef.remoteType() === \"link\") {\n      let link = userRef.link();\n    }\n   ```\n    @method link\n   @public\n   @return {String} The link Ember Data will use to fetch or reload this belongs-to relationship.\n   */link(){const resource=this._resource();if(isResourceIdentiferWithRelatedLinks(resource)){if(resource.links){const related=resource.links.related;return!related||typeof related==='string'?related:related.href;}}return null;}/**\n   * any links that have been received for this relationship\n   *\n   * @method links\n   * @public\n   * @return\n   */links(){const resource=this._resource();return resource&&resource.links?resource.links:null;}/**\n   The meta data for the belongs-to relationship.\n    Example\n    ```javascript\n   // models/blog.js\n   import Model, { belongsTo } from '@ember-data/model';\n   export default Model.extend({\n      user: belongsTo('user', { async: true, inverse: null })\n    });\n    let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            links: {\n              related: {\n                href: '/articles/1/author'\n              },\n            },\n            meta: {\n              lastUpdated: 1458014400000\n            }\n          }\n        }\n      }\n    });\n    let userRef = blog.belongsTo('user');\n    userRef.meta() // { lastUpdated: 1458014400000 }\n   ```\n    @method meta\n    @public\n   @return {Object} The meta information for the belongs-to relationship.\n   */meta(){let meta=null;const resource=this._resource();if(resource&&resource.meta&&typeof resource.meta==='object'){meta=resource.meta;}return meta;}_resource(){// eslint-disable-next-line @typescript-eslint/no-unused-expressions\nthis._ref;// subscribe\nconst cache=this.store.cache;return cache.getRelationship(this.___identifier,this.key);}/**\n   This returns a string that represents how the reference will be\n   looked up when it is loaded. If the relationship has a link it will\n   use the \"link\" otherwise it defaults to \"id\".\n    Example\n    ```app/models/post.js\n   import Model, { hasMany } from '@ember-data/model';\n    export default class PostModel extends Model {\n     @hasMany('comment', { async: true, inverse: null }) comments;\n   }\n   ```\n    ```javascript\n   let post = store.push({\n     data: {\n       type: 'post',\n       id: 1,\n       relationships: {\n         comments: {\n           data: [{ type: 'comment', id: 1 }]\n         }\n       }\n     }\n   });\n    let commentsRef = post.hasMany('comments');\n    // get the identifier of the reference\n   if (commentsRef.remoteType() === \"ids\") {\n     let ids = commentsRef.ids();\n   } else if (commentsRef.remoteType() === \"link\") {\n     let link = commentsRef.link();\n   }\n   ```\n    @method remoteType\n   @public\n   @return {String} The name of the remote type. This should either be `link` or `id`\n   */remoteType(){const value=this._resource();if(isResourceIdentiferWithRelatedLinks(value)){return'link';}return'id';}/**\n   `push` can be used to update the data in the relationship and EmberData\n   will treat the new data as the canonical value of this relationship on\n   the backend. A value of `null` (e.g. `{ data: null }`) can be passed to\n   clear the relationship.\n    Example model\n    ```app/models/blog.js\n   import Model, { belongsTo } from '@ember-data/model';\n    export default class BlogModel extends Model {\n      @belongsTo('user', { async: true, inverse: null }) user;\n    }\n   ```\n    Setup some initial state, note we haven't loaded the user yet:\n    ```js\n   const blog = store.push({\n      data: {\n        type: 'blog',\n        id: '1',\n        relationships: {\n          user: {\n            data: { type: 'user', id: '1' }\n          }\n        }\n      }\n   });\n    const userRef = blog.belongsTo('user');\n   userRef.id(); // '1'\n   ```\n    Update the state using `push`, note we can do this even without\n   having loaded the user yet by providing a resource-identifier.\n    Both full a resource and a resource-identifier are supported.\n    ```js\n   await userRef.push({\n      data: {\n        type: 'user',\n        id: '2',\n      }\n    });\n     userRef.id(); // '2'\n   ```\n    You may also pass in links and meta fore the relationship, and sideload\n   additional resources that might be required.\n    ```js\n    await userRef.push({\n        data: {\n          type: 'user',\n          id: '2',\n        },\n        links: {\n          related: '/articles/1/author'\n        },\n        meta: {\n          lastUpdated: Date.now()\n        },\n        included: [\n          {\n            type: 'user-preview',\n            id: '2',\n            attributes: {\n              username: '@runspired'\n            }\n          }\n        ]\n      });\n    ```\n    By default, the store will attempt to fetch the record if it is not loaded or its\n   resource data is not included in the call to `push` before resolving the returned\n   promise with the new state..\n    Alternatively, pass `true` as the second argument to avoid fetching unloaded records\n   and instead the promise will resolve with void without attempting to fetch. This is\n   particularly useful if you want to update the state of the relationship without\n   forcing the load of all of the associated record.\n    @method push\n   @public\n   @param {Object} doc a JSONAPI document object describing the new value of this relationship.\n   @param {Boolean} [skipFetch] if `true`, do not attempt to fetch unloaded records\n   @return {Promise<OpaqueRecordInstance | null | void>}\n  */async push(doc,skipFetch){const{store}=this;const isResourceData=doc.data&&isMaybeResource(doc.data);const added=isResourceData?store._push(doc,true):doc.data?store.identifierCache.getOrCreateRecordIdentifier(doc.data):null;const{identifier}=this.belongsToRelationship;{if(added){assertPolymorphicType(identifier,this.belongsToRelationship.definition,added,store);}}const newData={};// only set data if it was passed in\nif(doc.data||doc.data===null){newData.data=added;}if('links'in doc){newData.links=doc.links;}if('meta'in doc){newData.meta=doc.meta;}store._join(()=>{this.graph.push({op:'updateRelationship',record:identifier,field:this.key,value:newData});});if(!skipFetch)return this.load();}/**\n   `value()` synchronously returns the current value of the belongs-to\n   relationship. Unlike `record.relationshipName`, calling\n   `value()` on a reference does not trigger a fetch if the async\n   relationship is not yet loaded. If the relationship is not loaded\n   it will always return `null`.\n    Example\n    ```javascript\n   // models/blog.js\n   import Model, { belongsTo } from '@ember-data/model';\n    export default class BlogModel extends Model {\n     @belongsTo('user', { async: true, inverse: null }) user;\n   }\n    let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            data: { type: 'user', id: 1 }\n          }\n        }\n      }\n    });\n   let userRef = blog.belongsTo('user');\n    userRef.value(); // null\n    // provide data for reference\n   userRef.push({\n      data: {\n        type: 'user',\n        id: 1,\n        attributes: {\n          username: \"@user\"\n        }\n      }\n    }).then(function(user) {\n      userRef.value(); // user\n    });\n   ```\n    @method value\n    @public\n   @return {Model} the record in this relationship\n   */value(){const resource=this._resource();return resource&&resource.data?this.store.peekRecord(resource.data):null;}/**\n   Loads a record in a belongs-to relationship if it is not already\n   loaded. If the relationship is already loaded this method does not\n   trigger a new load.\n    Example\n    ```javascript\n   // models/blog.js\n   import Model, { belongsTo } from '@ember-data/model';\n    export default class BlogModel extends Model {\n     @belongsTo('user', { async: true, inverse: null }) user;\n   }\n    let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            data: { type: 'user', id: 1 }\n          }\n        }\n      }\n    });\n   let userRef = blog.belongsTo('user');\n    userRef.value(); // null\n    userRef.load().then(function(user) {\n      userRef.value() === user\n    });\n   ```\n    You may also pass in an options object whose properties will be\n   fed forward. This enables you to pass `adapterOptions` into the\n   request given to the adapter via the reference.\n    Example\n    ```javascript\n   userRef.load({ adapterOptions: { isPrivate: true } }).then(function(user) {\n     userRef.value() === user;\n   });\n   ```\n   ```app/adapters/user.js\n   import Adapter from '@ember-data/adapter';\n    export default class UserAdapter extends Adapter {\n     findRecord(store, type, id, snapshot) {\n       // In the adapter you will have access to adapterOptions.\n       let adapterOptions = snapshot.adapterOptions;\n     }\n   });\n   ```\n    @method load\n    @public\n   @param {Object} options the options to pass in.\n   @return {Promise} a promise that resolves with the record in this belongs-to relationship.\n   */async load(options){const support=LEGACY_SUPPORT.get(this.___identifier);const fetchSyncRel=!this.belongsToRelationship.definition.isAsync&&!areAllInverseRecordsLoaded(this.store,this._resource());return fetchSyncRel?support.reloadBelongsTo(this.key,options).then(()=>this.value()):// we cast to fix the return type since typescript and eslint don't understand async functions\n// properly\nsupport.getBelongsTo(this.key,options);}/**\n   Triggers a reload of the value in this relationship. If the\n   remoteType is `\"link\"` Ember Data will use the relationship link to\n   reload the relationship. Otherwise it will reload the record by its\n   id.\n    Example\n    ```javascript\n   // models/blog.js\n   import Model, { belongsTo } from '@ember-data/model';\n    export default class BlogModel extends Model {\n     @belongsTo('user', { async: true, inverse: null }) user;\n   }\n    let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            data: { type: 'user', id: 1 }\n          }\n        }\n      }\n    });\n   let userRef = blog.belongsTo('user');\n    userRef.reload().then(function(user) {\n      userRef.value() === user\n    });\n   ```\n    You may also pass in an options object whose properties will be\n   fed forward. This enables you to pass `adapterOptions` into the\n   request given to the adapter via the reference. A full example\n   can be found in the `load` method.\n    Example\n    ```javascript\n   userRef.reload({ adapterOptions: { isPrivate: true } })\n   ```\n    @method reload\n    @public\n   @param {Object} options the options to pass in.\n   @return {Promise} a promise that resolves with the record in this belongs-to relationship after the reload has completed.\n   */reload(options){const support=LEGACY_SUPPORT.get(this.___identifier);return support.reloadBelongsTo(this.key,options).then(()=>this.value());}}_BelongsToReference=BelongsToReference;decorateMethodV2(_BelongsToReference.prototype,\"identifier\",[_ember_data_tracking__WEBPACK_IMPORTED_MODULE_5__.compat,_ember_data_tracking__WEBPACK_IMPORTED_MODULE_5__.cached]);(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_6__.defineSignal)(BelongsToReference.prototype,'_ref',0);const LEGACY_SUPPORT=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_12__.getOrSetGlobal)('LEGACY_SUPPORT',new Map());function lookupLegacySupport(record){const identifier=(0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_4__.recordIdentifierFor)(record);(test=>{if(!test){throw new Error(`Expected a record`);}})(identifier);let support=LEGACY_SUPPORT.get(identifier);if(!support){(test=>{if(!test){throw new Error(`Memory Leak Detected`);}})(!record.isDestroyed&&!record.isDestroying);support=new LegacySupport(record);LEGACY_SUPPORT.set(identifier,support);LEGACY_SUPPORT.set(record,support);}return support;}class LegacySupport{constructor(record){this.record=record;this.store=(0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_4__.storeFor)(record);this.identifier=(0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_4__.recordIdentifierFor)(record);this.cache=(0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_4__.peekCache)(record);{const graphFor=(0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(_ember_data_graph_private__WEBPACK_IMPORTED_MODULE_18__).graphFor;this.graph=graphFor(this.store);}this._manyArrayCache=Object.create(null);this._relationshipPromisesCache=Object.create(null);this._relationshipProxyCache=Object.create(null);this._pending=Object.create(null);this.references=Object.create(null);}_syncArray(array){// It’s possible the parent side of the relationship may have been destroyed by this point\nif(this.isDestroyed||this.isDestroying){return;}const currentState=array[_ember_data_store_private__WEBPACK_IMPORTED_MODULE_4__.SOURCE];const identifier=this.identifier;const[identifiers,jsonApi]=this._getCurrentState(identifier,array.key);if(jsonApi.meta){array.meta=jsonApi.meta;}if(jsonApi.links){array.links=jsonApi.links;}currentState.length=0;(0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_4__.fastPush)(currentState,identifiers);}mutate(mutation){this.cache.mutate(mutation);}_findBelongsTo(key,resource,relationship,options){// TODO @runspired follow up if parent isNew then we should not be attempting load here\n// TODO @runspired follow up on whether this should be in the relationship requests cache\nreturn this._findBelongsToByJsonApiResource(resource,this.identifier,relationship,options).then(identifier=>handleCompletedRelationshipRequest(this,key,relationship,identifier),e=>handleCompletedRelationshipRequest(this,key,relationship,null,e));}reloadBelongsTo(key,options){const loadingPromise=this._relationshipPromisesCache[key];if(loadingPromise){return loadingPromise;}const relationship=this.graph.get(this.identifier,key);(test=>{if(!test){throw new Error(`Expected ${key} to be a belongs-to relationship`);}})(isBelongsTo(relationship));const resource=this.cache.getRelationship(this.identifier,key);relationship.state.hasFailedLoadAttempt=false;relationship.state.shouldForceReload=true;const promise=this._findBelongsTo(key,resource,relationship,options);if(this._relationshipProxyCache[key]){// @ts-expect-error\nreturn this._updatePromiseProxyFor('belongsTo',key,{promise});}return promise;}getBelongsTo(key,options){const{identifier,cache}=this;const resource=cache.getRelationship(this.identifier,key);const relatedIdentifier=resource&&resource.data?resource.data:null;(test=>{if(!test){throw new Error(`Expected a stable identifier`);}})(!relatedIdentifier||(0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_4__.isStableIdentifier)(relatedIdentifier));const store=this.store;const relationship=this.graph.get(this.identifier,key);(test=>{if(!test){throw new Error(`Expected ${key} to be a belongs-to relationship`);}})(isBelongsTo(relationship));const isAsync=relationship.definition.isAsync;const _belongsToState={key,store,legacySupport:this,modelName:relationship.definition.type};if(isAsync){if(relationship.state.hasFailedLoadAttempt){return this._relationshipProxyCache[key];}const promise=this._findBelongsTo(key,resource,relationship,options);const isLoaded=relatedIdentifier&&store._instanceCache.recordIsLoaded(relatedIdentifier);return this._updatePromiseProxyFor('belongsTo',key,{promise,content:isLoaded?store._instanceCache.getRecord(relatedIdentifier):null,_belongsToState});}else{if(relatedIdentifier===null){return null;}else{(test=>{if(!test){throw new Error(`You looked up the '${key}' relationship on a '${identifier.type}' with id ${identifier.id||'null'} but some of the associated records were not loaded. Either make sure they are all loaded together with the parent record, or specify that the relationship is async (\\`belongsTo(<type>, { async: true, inverse: <inverse> })\\`)`);}})(store._instanceCache.recordIsLoaded(relatedIdentifier,true));return store._instanceCache.getRecord(relatedIdentifier);}}}setDirtyBelongsTo(key,value){return this.cache.mutate({op:'replaceRelatedRecord',record:this.identifier,field:key,value:extractIdentifierFromRecord(value)},// @ts-expect-error\ntrue);}_getCurrentState(identifier,field){const jsonApi=this.cache.getRelationship(identifier,field);const cache=this.store._instanceCache;const identifiers=[];if(jsonApi.data){for(let i=0;i<jsonApi.data.length;i++){const relatedIdentifier=jsonApi.data[i];(test=>{if(!test){throw new Error(`Expected a stable identifier`);}})((0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_4__.isStableIdentifier)(relatedIdentifier));if(cache.recordIsLoaded(relatedIdentifier,true)){identifiers.push(relatedIdentifier);}}}return[identifiers,jsonApi];}getManyArray(key,definition){{let manyArray=this._manyArrayCache[key];if(!definition){definition=this.graph.get(this.identifier,key).definition;}if(!manyArray){const[identifiers,doc]=this._getCurrentState(this.identifier,key);manyArray=new _ember_data_store_private__WEBPACK_IMPORTED_MODULE_4__.RelatedCollection({store:this.store,type:definition.type,identifier:this.identifier,cache:this.cache,identifiers,key,meta:doc.meta||null,links:doc.links||null,isPolymorphic:definition.isPolymorphic,isAsync:definition.isAsync,_inverseIsAsync:definition.inverseIsAsync,// @ts-expect-error Typescript doesn't have a way for us to thread the generic backwards so it infers unknown instead of T\nmanager:this,isLoaded:!definition.isAsync,allowMutation:true});this._manyArrayCache[key]=manyArray;}return manyArray;}// removed by dead control flow\n{}}fetchAsyncHasMany(key,relationship,manyArray,options){{let loadingPromise=this._relationshipPromisesCache[key];if(loadingPromise){return loadingPromise;}const jsonApi=this.cache.getRelationship(this.identifier,key);const promise=this._findHasManyByJsonApiResource(jsonApi,this.identifier,relationship,options);if(!promise){manyArray.isLoaded=true;return Promise.resolve(manyArray);}loadingPromise=promise.then(()=>handleCompletedRelationshipRequest(this,key,relationship,manyArray),e=>handleCompletedRelationshipRequest(this,key,relationship,manyArray,e));this._relationshipPromisesCache[key]=loadingPromise;return loadingPromise;}// removed by dead control flow\n{}}reloadHasMany(key,options){{const loadingPromise=this._relationshipPromisesCache[key];if(loadingPromise){return loadingPromise;}const relationship=this.graph.get(this.identifier,key);const{definition,state}=relationship;state.hasFailedLoadAttempt=false;state.shouldForceReload=true;const manyArray=this.getManyArray(key,definition);const promise=this.fetchAsyncHasMany(key,relationship,manyArray,options);if(this._relationshipProxyCache[key]){return this._updatePromiseProxyFor('hasMany',key,{promise});}return promise;}// removed by dead control flow\n{}}getHasMany(key,options){{const relationship=this.graph.get(this.identifier,key);const{definition,state}=relationship;const manyArray=this.getManyArray(key,definition);if(definition.isAsync){if(state.hasFailedLoadAttempt){return this._relationshipProxyCache[key];}const promise=this.fetchAsyncHasMany(key,relationship,manyArray,options);return this._updatePromiseProxyFor('hasMany',key,{promise,content:manyArray});}else{(test=>{if(!test){throw new Error(`You looked up the '${key}' relationship on a '${this.identifier.type}' with id ${this.identifier.id||'null'} but some of the associated records were not loaded. Either make sure they are all loaded together with the parent record, or specify that the relationship is async ('hasMany(<type>, { async: true, inverse: <inverse> })')`);}})(!anyUnloaded(this.store,relationship));return manyArray;}}// removed by dead control flow\n{}}_updatePromiseProxyFor(kind,key,args){let promiseProxy=this._relationshipProxyCache[key];if(kind==='hasMany'){const{promise,content}=args;if(promiseProxy){(test=>{if(!test){throw new Error(`Expected a PromiseManyArray`);}})('_update'in promiseProxy);promiseProxy._update(promise,content);}else{promiseProxy=this._relationshipProxyCache[key]=new PromiseManyArray(promise,content);}return promiseProxy;}if(promiseProxy){const{promise,content}=args;(test=>{if(!test){throw new Error(`Expected a PromiseBelongsTo`);}})('_belongsToState'in promiseProxy);if(content!==undefined){promiseProxy.set('content',content);}void promiseProxy.set('promise',promise);}else{promiseProxy=PromiseBelongsTo.create(args);this._relationshipProxyCache[key]=promiseProxy;}return promiseProxy;}referenceFor(kind,name){let reference=this.references[name];if(!reference){const{graph,identifier}=this;const relationship=graph.get(identifier,name);{if(kind){const modelName=identifier.type;const actualRelationshipKind=relationship.definition.kind;(test=>{if(!test){throw new Error(`You tried to get the '${name}' relationship on a '${modelName}' via record.${kind}('${name}'), but the relationship is of kind '${actualRelationshipKind}'. Use record.${actualRelationshipKind}('${name}') instead.`);}})(actualRelationshipKind===kind);}}const relationshipKind=relationship.definition.kind;if(relationshipKind==='belongsTo'){reference=new BelongsToReference(this.store,graph,identifier,relationship,name);}else if(relationshipKind==='hasMany'){reference=new HasManyReference(this.store,graph,identifier,relationship,name);}this.references[name]=reference;}return reference;}_findHasManyByJsonApiResource(resource,parentIdentifier,relationship,options={}){{if(!resource){return;}const{definition,state}=relationship;(0,_ember_data_legacy_compat_private__WEBPACK_IMPORTED_MODULE_11__.upgradeStore)(this.store);const adapter=this.store.adapterFor?.(definition.type);const{isStale,hasDematerializedInverse,hasReceivedData,isEmpty,shouldForceReload}=state;const allInverseRecordsAreLoaded=areAllInverseRecordsLoaded(this.store,resource);const identifiers=resource.data;const shouldFindViaLink=resource.links&&resource.links.related&&(typeof adapter?.findHasMany==='function'||typeof identifiers==='undefined')&&(shouldForceReload||hasDematerializedInverse||isStale||!allInverseRecordsAreLoaded&&!isEmpty);const field=this.store.schema.fields({type:definition.inverseType}).get(definition.key);(test=>{if(!test){throw new Error(`Expected a hasMany field definition for ${definition.inverseType}.${definition.key}`);}})(field&&field.kind==='hasMany');const request={useLink:shouldFindViaLink,field,links:resource.links,meta:resource.meta,options,record:parentIdentifier};// fetch via link\nif(shouldFindViaLink){(test=>{if(!test){throw new Error(`Expected collection to be an array`);}})(!identifiers||Array.isArray(identifiers));(test=>{if(!test){throw new Error(`Expected stable identifiers`);}})(!identifiers||identifiers.every(_ember_data_store_private__WEBPACK_IMPORTED_MODULE_4__.isStableIdentifier));const req=field.options.linksMode?{url:getRelatedLink(resource),op:'findHasMany',method:'GET',records:identifiers||[],data:request,[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_13__.EnableHydration]:false}:{op:'findHasMany',records:identifiers||[],data:request,cacheOptions:{[Symbol.for('wd:skip-cache')]:true}};return this.store.request(req);}const preferLocalCache=hasReceivedData&&!isEmpty;const hasLocalPartialData=hasDematerializedInverse||isEmpty&&Array.isArray(identifiers)&&identifiers.length>0;const attemptLocalCache=!shouldForceReload&&!isStale&&(preferLocalCache||hasLocalPartialData);if(attemptLocalCache&&allInverseRecordsAreLoaded){return;}const hasData=hasReceivedData&&!isEmpty;if(attemptLocalCache||hasData||hasLocalPartialData){(test=>{if(!test){throw new Error(`Expected collection to be an array`);}})(Array.isArray(identifiers));(test=>{if(!test){throw new Error(`Expected stable identifiers`);}})(identifiers.every(_ember_data_store_private__WEBPACK_IMPORTED_MODULE_4__.isStableIdentifier));options.reload=options.reload||!attemptLocalCache||undefined;return this.store.request({op:'findHasMany',records:identifiers,data:request,cacheOptions:{[Symbol.for('wd:skip-cache')]:true}});}// we were explicitly told we have no data and no links.\n//   TODO if the relationshipIsStale, should we hit the adapter anyway?\nreturn;}// removed by dead control flow\n{}}_findBelongsToByJsonApiResource(resource,parentIdentifier,relationship,options={}){if(!resource){return Promise.resolve(null);}const key=relationship.definition.key;// interleaved promises mean that we MUST cache this here\n// in order to prevent infinite re-render if the request\n// fails.\nif(this._pending[key]){return this._pending[key];}const identifier=resource.data?resource.data:null;(test=>{if(!test){throw new Error(`Expected a stable identifier`);}})(!identifier||(0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_4__.isStableIdentifier)(identifier));const{isStale,hasDematerializedInverse,hasReceivedData,isEmpty,shouldForceReload}=relationship.state;const allInverseRecordsAreLoaded=areAllInverseRecordsLoaded(this.store,resource);const shouldFindViaLink=resource.links?.related&&(shouldForceReload||hasDematerializedInverse||isStale||!allInverseRecordsAreLoaded&&!isEmpty);const field=this.store.schema.fields(this.identifier).get(relationship.definition.key);(test=>{if(!test){throw new Error(`Attempted to access a belongsTo relationship but no definition exists for it`);}})(field&&field.kind==='belongsTo');const request={useLink:shouldFindViaLink,field,links:resource.links,meta:resource.meta,options,record:parentIdentifier};// fetch via link\nif(shouldFindViaLink){const req=field.options.linksMode?{url:getRelatedLink(resource),op:'findBelongsTo',method:'GET',records:identifier?[identifier]:[],data:request,[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_13__.EnableHydration]:false}:{op:'findBelongsTo',records:identifier?[identifier]:[],data:request,cacheOptions:{[Symbol.for('wd:skip-cache')]:true}};const future=this.store.request(req);this._pending[key]=future.then(doc=>field.options.linksMode?doc.content.data:doc.content).finally(()=>{this._pending[key]=undefined;});return this._pending[key];}const preferLocalCache=hasReceivedData&&allInverseRecordsAreLoaded&&!isEmpty;const hasLocalPartialData=hasDematerializedInverse||isEmpty&&resource.data;// null is explicit empty, undefined is \"we don't know anything\"\nconst localDataIsEmpty=!identifier;const attemptLocalCache=!shouldForceReload&&!isStale&&(preferLocalCache||hasLocalPartialData);// we dont need to fetch and are empty\nif(attemptLocalCache&&localDataIsEmpty){return Promise.resolve(null);}// we dont need to fetch because we are local state\nconst resourceIsLocal=identifier?.id===null;if(attemptLocalCache&&allInverseRecordsAreLoaded||resourceIsLocal){return Promise.resolve(identifier);}// we may need to fetch\nif(identifier){(test=>{if(!test){throw new Error(`Cannot fetch belongs-to relationship with no information`);}})(identifier);options.reload=options.reload||!attemptLocalCache||undefined;this._pending[key]=this.store.request({op:'findBelongsTo',records:[identifier],data:request,cacheOptions:{[Symbol.for('wd:skip-cache')]:true}}).then(doc=>doc.content).finally(()=>{this._pending[key]=undefined;});return this._pending[key];}// we were explicitly told we have no data and no links.\n//   TODO if the relationshipIsStale, should we hit the adapter anyway?\nreturn Promise.resolve(null);}destroy(){this.isDestroying=true;let cache=this._manyArrayCache;this._manyArrayCache=Object.create(null);Object.keys(cache).forEach(key=>{cache[key].destroy();});cache=this._relationshipProxyCache;this._relationshipProxyCache=Object.create(null);Object.keys(cache).forEach(key=>{const proxy=cache[key];if(proxy.destroy){proxy.destroy();}});cache=this.references;this.references=Object.create(null);Object.keys(cache).forEach(key=>{cache[key].destroy();});this.isDestroyed=true;}}function getRelatedLink(resource){const related=resource.links?.related;(test=>{if(!test){throw new Error(`Expected a related link`);}})(related);return typeof related==='object'?related.href:related;}function handleCompletedRelationshipRequest(recordExt,key,relationship,value,error){delete recordExt._relationshipPromisesCache[key];relationship.state.shouldForceReload=false;const isHasMany=relationship.definition.kind==='hasMany';if(isHasMany){// we don't notify the record property here to avoid refetch\n// only the many array\nvalue.notify();}if(error){relationship.state.hasFailedLoadAttempt=true;const proxy=recordExt._relationshipProxyCache[key];// belongsTo relationships are sometimes unloaded\n// when a load fails, in this case we need\n// to make sure that we aren't proxying\n// to destroyed content\n// for the sync belongsTo reload case there will be no proxy\n// for the async reload case there will be no proxy if the ui\n// has never been accessed\nif(proxy&&!isHasMany){// @ts-expect-error unsure why this is not resolving the boolean but async belongsTo is weird\nif(proxy.content&&proxy.content.isDestroying){proxy.set('content',null);}recordExt.store.notifications._flush();}throw error;}if(isHasMany){value.isLoaded=true;}else{recordExt.store.notifications._flush();}relationship.state.hasFailedLoadAttempt=false;// only set to not stale if no error is thrown\nrelationship.state.isStale=false;return isHasMany||!value?value:recordExt.store.peekRecord(value);}function extractIdentifierFromRecord(record){if(!record){return null;}return (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_4__.recordIdentifierFor)(record);}function anyUnloaded(store,relationship){const graph=store._graph;(test=>{if(!test){throw new Error(`Expected a Graph instance to be available`);}})(graph);const relationshipData=graph.getData(relationship.identifier,relationship.definition.key);const state=relationshipData.data;const cache=store._instanceCache;const unloaded=state?.find(s=>{const isLoaded=cache.recordIsLoaded(s,true);return!isLoaded;});return unloaded||false;}function areAllInverseRecordsLoaded(store,resource){const instanceCache=store._instanceCache;const identifiers=resource.data;if(Array.isArray(identifiers)){(test=>{if(!test){throw new Error(`Expected stable identifiers`);}})(identifiers.every(_ember_data_store_private__WEBPACK_IMPORTED_MODULE_4__.isStableIdentifier));// treat as collection\n// check for unloaded records\nreturn identifiers.every(identifier=>instanceCache.recordIsLoaded(identifier));}// treat as single resource\nif(!identifiers)return true;(test=>{if(!test){throw new Error(`Expected stable identifiers`);}})((0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_4__.isStableIdentifier)(identifiers));return instanceCache.recordIsLoaded(identifiers);}function isBelongsTo(relationship){return relationship.definition.kind==='belongsTo';}// we force the type here to our own construct because mixin and extend patterns\n// lose generic signatures. We also do this because we need to Omit `clear` from\n// the type of ArrayProxy as we override it's signature.\nconst ArrayProxyWithCustomOverrides=(_ember_array_proxy__WEBPACK_IMPORTED_MODULE_9___default());/**\n  Holds validation errors for a given record, organized by attribute names.\n\n  This class is not directly instantiable.\n\n  Every `Model` has an `errors` property that is an instance of\n  `Errors`. This can be used to display validation error\n  messages returned from the server when a `record.save()` rejects.\n\n  For Example, if you had a `User` model that looked like this:\n\n  ```app/models/user.js\n  import Model, { attr } from '@ember-data/model';\n\n  export default class UserModel extends Model {\n    @attr('string') username;\n    @attr('string') email;\n  }\n  ```\n  And you attempted to save a record that did not validate on the backend:\n\n  ```javascript\n  let user = store.createRecord('user', {\n    username: 'tomster',\n    email: 'invalidEmail'\n  });\n  user.save();\n  ```\n\n  Your backend would be expected to return an error response that described\n  the problem, so that error messages can be generated on the app.\n\n  API responses will be translated into instances of `Errors` differently,\n  depending on the specific combination of adapter and serializer used. You\n  may want to check the documentation or the source code of the libraries\n  that you are using, to know how they expect errors to be communicated.\n\n  Errors can be displayed to the user by accessing their property name\n  to get an array of all the error objects for that property. Each\n  error object is a JavaScript object with two keys:\n\n  - `message` A string containing the error message from the backend\n  - `attribute` The name of the property associated with this error message\n\n  ```handlebars\n  <label>Username: <Input @value={{@model.username}} /> </label>\n  {{#each @model.errors.username as |error|}}\n    <div class=\"error\">\n      {{error.message}}\n    </div>\n  {{/each}}\n\n  <label>Email: <Input @value={{@model.email}} /> </label>\n  {{#each @model.errors.email as |error|}}\n    <div class=\"error\">\n      {{error.message}}\n    </div>\n  {{/each}}\n  ```\n\n  You can also access the special `messages` property on the error\n  object to get an array of all the error strings.\n\n  ```handlebars\n  {{#each @model.errors.messages as |message|}}\n    <div class=\"error\">\n      {{message}}\n    </div>\n  {{/each}}\n  ```\n\n  @class Errors\n  @public\n  @extends Ember.ArrayProxy\n */var _messages2=/*#__PURE__*/new WeakMap();var _isEmpty=/*#__PURE__*/new WeakMap();class Errors extends ArrayProxyWithCustomOverrides{constructor(...args){super(...args);_classPrivateFieldInitSpec(this,_messages2,(initializeDeferredDecorator(this,\"messages\"),void 0));_classPrivateFieldInitSpec(this,_isEmpty,(initializeDeferredDecorator(this,\"isEmpty\"),void 0));}/**\n    @property errorsByAttributeName\n    @type {MapWithDefault}\n    @private\n  */get errorsByAttributeName(){return new Map();}/**\n    Returns errors for a given attribute\n     ```javascript\n    let user = store.createRecord('user', {\n      username: 'tomster',\n      email: 'invalidEmail'\n    });\n    user.save().catch(function(){\n      user.errors.errorsFor('email'); // returns:\n      // [{attribute: \"email\", message: \"Doesn't look like a valid email.\"}]\n    });\n    ```\n     @method errorsFor\n    @public\n    @param {String} attribute\n    @return {Array}\n  */errorsFor(attribute){const map=this.errorsByAttributeName;let errors=map.get(attribute);if(errors===undefined){errors=(0,_ember_array__WEBPACK_IMPORTED_MODULE_8__.A)();map.set(attribute,errors);}// Errors may be a native array with extensions turned on. Since we access\n// the array via a method, and not a computed or using `Ember.get`, it does\n// not entangle properly with autotracking, so we entangle manually by\n// getting the `[]` property.\n(0,_ember_object__WEBPACK_IMPORTED_MODULE_2__.get)(errors,'[]');return errors;}/**\n    An array containing all of the error messages for this\n    record. This is useful for displaying all errors to the user.\n     ```handlebars\n    {{#each @model.errors.messages as |message|}}\n      <div class=\"error\">\n        {{message}}\n      </div>\n    {{/each}}\n    ```\n     @property messages\n    @public\n    @type {Array}\n  *//**\n    @property content\n    @type {Array}\n    @private\n  */get content(){return (0,_ember_array__WEBPACK_IMPORTED_MODULE_8__.A)();}/**\n    @method unknownProperty\n    @private\n  */unknownProperty(attribute){const errors=this.errorsFor(attribute);if(errors.length===0){return undefined;}return errors;}/**\n    Total number of errors.\n     @property length\n    @type {Number}\n    @public\n    @readOnly\n  *//**\n    `true` if we have no errors.\n     @property isEmpty\n    @type {Boolean}\n    @public\n    @readOnly\n  *//**\n   Manually adds errors to the record. This will trigger the `becameInvalid` event/ lifecycle method on\n    the record and transition the record into an `invalid` state.\n    Example\n   ```javascript\n    let errors = user.errors;\n     // add multiple errors\n    errors.add('password', [\n      'Must be at least 12 characters',\n      'Must contain at least one symbol',\n      'Cannot contain your name'\n    ]);\n     errors.errorsFor('password');\n    // =>\n    // [\n    //   { attribute: 'password', message: 'Must be at least 12 characters' },\n    //   { attribute: 'password', message: 'Must contain at least one symbol' },\n    //   { attribute: 'password', message: 'Cannot contain your name' },\n    // ]\n     // add a single error\n    errors.add('username', 'This field is required');\n     errors.errorsFor('username');\n    // =>\n    // [\n    //   { attribute: 'username', message: 'This field is required' },\n    // ]\n   ```\n    @method add\n    @public\n    @param {string} attribute - the property name of an attribute or relationship\n    @param {string[]|string} messages - an error message or array of error messages for the attribute\n   */add(attribute,messages){const errors=this._findOrCreateMessages(attribute,messages);this.addObjects(errors);this.errorsFor(attribute).addObjects(errors);this.__record.currentState.notify('isValid');this.notifyPropertyChange(attribute);}/**\n    @method _findOrCreateMessages\n    @private\n  */_findOrCreateMessages(attribute,messages){const errors=this.errorsFor(attribute);const messagesArray=Array.isArray(messages)?messages:[messages];const _messages=new Array(messagesArray.length);for(let i=0;i<messagesArray.length;i++){const message=messagesArray[i];const err=errors.findBy('message',message);if(err){_messages[i]=err;}else{_messages[i]={attribute:attribute,message};}}return _messages;}/**\n   Manually removes all errors for a given member from the record.\n     This will transition the record into a `valid` state, and\n    triggers the `becameValid` event and lifecycle method.\n    Example:\n    ```javascript\n    let errors = user.errors;\n    errors.add('phone', ['error-1', 'error-2']);\n     errors.errorsFor('phone');\n    // =>\n    // [\n    //   { attribute: 'phone', message: 'error-1' },\n    //   { attribute: 'phone', message: 'error-2' },\n    // ]\n     errors.remove('phone');\n     errors.errorsFor('phone');\n    // => undefined\n   ```\n   @method remove\n    @public\n   @param {string} member - the property name of an attribute or relationship\n   */remove(attribute){if(this.isEmpty){return;}const content=this.rejectBy('attribute',attribute);this.content.setObjects(content);// Although errorsByAttributeName.delete is technically enough to sync errors state, we also\n// must mutate the array as well for autotracking\nconst errors=this.errorsFor(attribute);for(let i=0;i<errors.length;i++){if(errors[i].attribute===attribute){// .replace from Ember.NativeArray is necessary. JS splice will not work.\nerrors.replace(i,1);}}this.errorsByAttributeName.delete(attribute);this.__record.currentState.notify('isValid');this.notifyPropertyChange(attribute);this.notifyPropertyChange('length');}/**\n   Manually clears all errors for the record.\n     This will transition the record into a `valid` state, and\n     will trigger the `becameValid` event and lifecycle method.\n   Example:\n    ```javascript\n   let errors = user.errors;\n   errors.add('username', ['error-a']);\n   errors.add('phone', ['error-1', 'error-2']);\n    errors.errorsFor('username');\n   // =>\n   // [\n   //   { attribute: 'username', message: 'error-a' },\n   // ]\n    errors.errorsFor('phone');\n   // =>\n   // [\n   //   { attribute: 'phone', message: 'error-1' },\n   //   { attribute: 'phone', message: 'error-2' },\n   // ]\n    errors.clear();\n    errors.errorsFor('username');\n   // => undefined\n    errors.errorsFor('phone');\n   // => undefined\n    errors.messages\n   // => []\n   ```\n   @method clear\n   @public\n   */clear(){if(this.isEmpty){return;}const errorsByAttributeName=this.errorsByAttributeName;const attributes=[];errorsByAttributeName.forEach(function(_,attribute){attributes.push(attribute);});errorsByAttributeName.clear();attributes.forEach(attribute=>{this.notifyPropertyChange(attribute);});this.__record.currentState.notify('isValid');super.clear();}/**\n    Checks if there are error messages for the given attribute.\n     ```app/controllers/user/edit.js\n    export default class UserEditController extends Controller {\n      @action\n      save(user) {\n        if (user.errors.has('email')) {\n          return alert('Please update your email before attempting to save.');\n        }\n        user.save();\n      }\n    }\n    ```\n     @method has\n    @public\n    @param {String} attribute\n    @return {Boolean} true if there some errors on given attribute\n  */has(attribute){return this.errorsFor(attribute).length>0;}}_Errors=Errors;decorateMethodV2(_Errors.prototype,\"errorsByAttributeName\",[(0,_ember_object__WEBPACK_IMPORTED_MODULE_2__.computed)()]);decorateFieldV2(_Errors.prototype,\"messages\",[(0,_ember_object_computed__WEBPACK_IMPORTED_MODULE_10__.mapBy)('content','message')]);decorateMethodV2(_Errors.prototype,\"content\",[(0,_ember_object__WEBPACK_IMPORTED_MODULE_2__.computed)()]);decorateFieldV2(_Errors.prototype,\"isEmpty\",[(0,_ember_object_computed__WEBPACK_IMPORTED_MODULE_10__.not)('length')]);function rollbackAttributes(){const{currentState}=this;const{isNew}=currentState;this[_warp_drive_core_types_symbols__WEBPACK_IMPORTED_MODULE_7__.RecordStore]._join(()=>{(0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_4__.peekCache)(this).rollbackAttrs((0,_ember_data_store__WEBPACK_IMPORTED_MODULE_3__.recordIdentifierFor)(this));this.errors.clear();currentState.cleanErrorRequests();if(isNew){this.unloadRecord();}});}function unloadRecord(){if(this.currentState.isNew&&(this.isDestroyed||this.isDestroying)){return;}this[_warp_drive_core_types_symbols__WEBPACK_IMPORTED_MODULE_7__.RecordStore].unloadRecord(this);}function belongsTo(prop){return lookupLegacySupport(this).referenceFor('belongsTo',prop);}function hasMany(prop){return lookupLegacySupport(this).referenceFor('hasMany',prop);}function reload(options={}){options.isReloading=true;options.reload=true;const identifier=(0,_ember_data_store__WEBPACK_IMPORTED_MODULE_3__.recordIdentifierFor)(this);(test=>{if(!test){throw new Error(`You cannot reload a record without an ID`);}})(identifier.id);this.isReloading=true;const promise=this[_warp_drive_core_types_symbols__WEBPACK_IMPORTED_MODULE_7__.RecordStore].request({op:'findRecord',data:{options,record:identifier},cacheOptions:{[Symbol.for('wd:skip-cache')]:true}}).then(()=>this).finally(()=>{this.isReloading=false;});return promise;}function changedAttributes(){return (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_4__.peekCache)(this).changedAttrs((0,_ember_data_store__WEBPACK_IMPORTED_MODULE_3__.recordIdentifierFor)(this));}function serialize(options){(0,_ember_data_legacy_compat_private__WEBPACK_IMPORTED_MODULE_11__.upgradeStore)(this[_warp_drive_core_types_symbols__WEBPACK_IMPORTED_MODULE_7__.RecordStore]);return this[_warp_drive_core_types_symbols__WEBPACK_IMPORTED_MODULE_7__.RecordStore].serializeRecord(this,options);}function deleteRecord(){// ensure we've populated currentState prior to deleting a new record\nif(this.currentState){this[_warp_drive_core_types_symbols__WEBPACK_IMPORTED_MODULE_7__.RecordStore].deleteRecord(this);}}function save(options){let promise;if(this.currentState.isNew&&this.currentState.isDeleted){promise=Promise.resolve(this);}else{this.errors.clear();promise=this[_warp_drive_core_types_symbols__WEBPACK_IMPORTED_MODULE_7__.RecordStore].saveRecord(this,options);}return promise;}function destroyRecord(options){const{isNew}=this.currentState;this.deleteRecord();if(isNew){return Promise.resolve(this);}return this.save(options).then(_=>{this.unloadRecord();return this;});}function createSnapshot(){const store=this[_warp_drive_core_types_symbols__WEBPACK_IMPORTED_MODULE_7__.RecordStore];(0,_ember_data_legacy_compat_private__WEBPACK_IMPORTED_MODULE_11__.upgradeStore)(store);if(!store._fetchManager){const FetchManager=(0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(_ember_data_legacy_compat_private__WEBPACK_IMPORTED_MODULE_11__).FetchManager;store._fetchManager=new FetchManager(store);}// @ts-expect-error Typescript isn't able to curry narrowed args that are divorced from each other.\nreturn store._fetchManager.createSnapshot((0,_ember_data_store__WEBPACK_IMPORTED_MODULE_3__.recordIdentifierFor)(this));}function notifyChanges(identifier,value,key,record,store){switch(value){case'added':case'attributes':if(key){notifyAttribute(store,identifier,key,record);}else{record.eachAttribute(name=>{notifyAttribute(store,identifier,name,record);});}break;case'relationships':if(key){const meta=record.constructor.relationshipsByName.get(key);(test=>{if(!test){throw new Error(`Expected to find a relationship for ${key} on ${identifier.type}`);}})(meta);notifyRelationship(identifier,key,record,meta);}else{record.eachRelationship((name,meta)=>{notifyRelationship(identifier,name,record,meta);});}break;case'identity':record.notifyPropertyChange('id');break;}}function notifyRelationship(identifier,key,record,meta){if(meta.kind==='belongsTo'){record.notifyPropertyChange(key);}else if(meta.kind==='hasMany'){const support=LEGACY_SUPPORT.get(identifier);const manyArray=support&&support._manyArrayCache[key];const hasPromise=support&&support._relationshipPromisesCache[key];if(manyArray&&hasPromise){// do nothing, we will notify the ManyArray directly\n// once the fetch has completed.\nreturn;}if(manyArray){manyArray.notify();//We need to notifyPropertyChange in the adding case because we need to make sure\n//we fetch the newly added record in case it is unloaded\n//TODO(Igor): Consider whether we could do this only if the record state is unloaded\n(test=>{if(!test){throw new Error(`Expected options to exist on relationship meta`);}})(meta.options);(test=>{if(!test){throw new Error(`Expected async to exist on relationship meta options`);}})('async'in meta.options);if(meta.options.async){record.notifyPropertyChange(key);}}}}function notifyAttribute(store,identifier,key,record){const currentValue=(0,_ember_object_internals__WEBPACK_IMPORTED_MODULE_16__.cacheFor)(record,key);const cache=store.cache;if(currentValue!==cache.getAttr(identifier,key)){record.notifyPropertyChange(key);}}const SOURCE_POINTER_REGEXP=/^\\/?data\\/(attributes|relationships)\\/(.*)/;const SOURCE_POINTER_PRIMARY_REGEXP=/^\\/?data/;const PRIMARY_ATTRIBUTE_KEY='base';function isInvalidError(error){return!!error&&error instanceof Error&&'isAdapterError'in error&&error.isAdapterError===true&&'code'in error&&error.code==='InvalidError';}/**\nHistorically EmberData managed a state machine\nfor each record, the localState for which\nwas reflected onto Model.\n\nThis implements the flags and stateName for backwards compat\nwith the state tree that used to be possible (listed below).\n\nstateName and dirtyType are candidates for deprecation.\n\nroot\n  empty\n    deleted    // hidden from stateName\n    preloaded  // hidden from stateName\n\n  loading\n     empty     // hidden from stateName\n     preloaded // hidden from stateName\n\n  loaded\n    saved\n    updated\n      uncommitted\n      invalid\n      inFlight\n    created\n      uncommitted\n      invalid\n      inFlight\n\n  deleted\n    saved\n      new      // hidden from stateName\n    uncommitted\n    invalid\n    inFlight\n\n  @internal\n*/class RecordState{constructor(record){const store=(0,_ember_data_store__WEBPACK_IMPORTED_MODULE_3__.storeFor)(record);const identity=(0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_4__.recordIdentifierFor)(record);this.identifier=identity;this.record=record;this.cache=store.cache;this.pendingCount=0;this.fulfilledCount=0;this.rejectedCount=0;this._errorRequests=[];this._lastError=null;const requests=store.getRequestStateService();const notifications=store.notifications;const handleRequest=req=>{if(req.type==='mutation'){switch(req.state){case'pending':this.isSaving=true;break;case'rejected':this.isSaving=false;this._lastError=req;if(!(req.response&&isInvalidError(req.response.data))){this._errorRequests.push(req);}notifyErrorsStateChanged(this);break;case'fulfilled':this._errorRequests=[];this._lastError=null;this.isSaving=false;this.notify('isDirty');notifyErrorsStateChanged(this);break;}}else{switch(req.state){case'pending':this.pendingCount++;this.notify('isLoading');break;case'rejected':this.pendingCount--;this._lastError=req;if(!(req.response&&isInvalidError(req.response.data))){this._errorRequests.push(req);}this.notify('isLoading');notifyErrorsStateChanged(this);break;case'fulfilled':this.pendingCount--;this.fulfilledCount++;this.notify('isLoading');this.notify('isDirty');notifyErrorsStateChanged(this);this._errorRequests=[];this._lastError=null;break;}}};requests.subscribeForRecord(identity,handleRequest);// we instantiate lazily\n// so we grab anything we don't have yet\nconst lastRequest=requests.getLastRequestForRecord(identity);if(lastRequest){handleRequest(lastRequest);}this.handler=notifications.subscribe(identity,(identifier,type,key)=>{switch(type){case'state':this.notify('isSaved');this.notify('isNew');this.notify('isDeleted');this.notify('isDirty');break;case'attributes':this.notify('isEmpty');this.notify('isDirty');break;case'errors':this.updateInvalidErrors(this.record.errors);this.notify('isValid');break;}});}destroy(){(0,_ember_data_store__WEBPACK_IMPORTED_MODULE_3__.storeFor)(this.record).notifications.unsubscribe(this.handler);}notify(key){(0,_ember_data_tracking__WEBPACK_IMPORTED_MODULE_5__.notifySignal)(this,key);}updateInvalidErrors(errors){(test=>{if(!test){throw new Error(`Expected the Cache instance for ${this.identifier.lid}  to implement getErrors(identifier)`);}})(typeof this.cache.getErrors==='function');const jsonApiErrors=this.cache.getErrors(this.identifier);errors.clear();for(let i=0;i<jsonApiErrors.length;i++){const error=jsonApiErrors[i];if(error.source&&error.source.pointer){const keyMatch=error.source.pointer.match(SOURCE_POINTER_REGEXP);let key;if(keyMatch){key=keyMatch[2];}else if(error.source.pointer.search(SOURCE_POINTER_PRIMARY_REGEXP)!==-1){key=PRIMARY_ATTRIBUTE_KEY;}if(key){const errMsg=error.detail||error.title;(test=>{if(!test){throw new Error(`Expected field error to have a detail or title to use as the message`);}})(errMsg);errors.add(key,errMsg);}}}}cleanErrorRequests(){this.notify('isValid');this.notify('isError');this.notify('adapterError');this._errorRequests=[];this._lastError=null;}get isLoading(){return!this.isLoaded&&this.pendingCount>0&&this.fulfilledCount===0;}get isLoaded(){if(this.isNew){return true;}return this.fulfilledCount>0||!this.isEmpty;}get isSaved(){const rd=this.cache;if(this.isDeleted){(test=>{if(!test){throw new Error(`Expected Cache to implement isDeletionCommitted()`);}})(typeof rd.isDeletionCommitted==='function');return rd.isDeletionCommitted(this.identifier);}if(this.isNew||this.isEmpty||!this.isValid||this.isDirty||this.isLoading){return false;}return true;}get isEmpty(){const rd=this.cache;// TODO this is not actually an RFC'd concept. Determine the\n// correct heuristic to replace this with.\n(test=>{if(!test){throw new Error(`Expected Cache to implement isEmpty()`);}})(typeof rd.isEmpty==='function');return!this.isNew&&rd.isEmpty(this.identifier);}get isNew(){const rd=this.cache;(test=>{if(!test){throw new Error(`Expected Cache to implement isNew()`);}})(typeof rd.isNew==='function');return rd.isNew(this.identifier);}get isDeleted(){const rd=this.cache;(test=>{if(!test){throw new Error(`Expected Cache to implement isDeleted()`);}})(typeof rd.isDeleted==='function');return rd.isDeleted(this.identifier);}get isValid(){return this.record.errors.length===0;}get isDirty(){const rd=this.cache;if(this.isEmpty||rd.isDeletionCommitted(this.identifier)||this.isDeleted&&this.isNew){return false;}return this.isDeleted||this.isNew||rd.hasChangedAttrs(this.identifier);}get isError(){const errorReq=this._errorRequests[this._errorRequests.length-1];if(!errorReq){return false;}else{return true;}}get adapterError(){const request=this._lastError;if(!request){return null;}return request.state==='rejected'&&request.response.data;}get isPreloaded(){return!this.isEmpty&&this.isLoading;}get stateName(){// we might be empty while loading so check this first\nif(this.isLoading){return'root.loading';// got nothing yet or were unloaded\n}else if(this.isEmpty){return'root.empty';// deleted substates\n}else if(this.isDeleted){if(this.isSaving){return'root.deleted.inFlight';}else if(this.isSaved){// TODO ensure isSaved isn't true from previous requests\nreturn'root.deleted.saved';}else if(!this.isValid){return'root.deleted.invalid';}else{return'root.deleted.uncommitted';}// loaded.created substates\n}else if(this.isNew){if(this.isSaving){return'root.loaded.created.inFlight';}else if(!this.isValid){return'root.loaded.created.invalid';}return'root.loaded.created.uncommitted';// loaded.updated substates\n}else if(this.isSaving){return'root.loaded.updated.inFlight';}else if(!this.isValid){return'root.loaded.updated.invalid';}else if(this.isDirty){return'root.loaded.updated.uncommitted';// if nothing remains, we are loaded saved!\n}else{return'root.loaded.saved';}}get dirtyType(){// we might be empty while loading so check this first\nif(this.isLoading||this.isEmpty){return'';// deleted substates\n}else if(this.isDirty&&this.isDeleted){return'deleted';// loaded.created substates\n}else if(this.isNew){return'created';// loaded.updated substates\n}else if(this.isSaving||!this.isValid||this.isDirty){return'updated';// if nothing remains, we are loaded saved!\n}else{return'';}}}_RecordState=RecordState;decorateMethodV2(_RecordState.prototype,\"isLoading\",[_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_6__.subscribed]);decorateMethodV2(_RecordState.prototype,\"isLoaded\",[_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_6__.subscribed]);decorateMethodV2(_RecordState.prototype,\"isSaved\",[_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_6__.subscribed]);decorateMethodV2(_RecordState.prototype,\"isEmpty\",[_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_6__.subscribed]);decorateMethodV2(_RecordState.prototype,\"isNew\",[_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_6__.subscribed]);decorateMethodV2(_RecordState.prototype,\"isDeleted\",[_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_6__.subscribed]);decorateMethodV2(_RecordState.prototype,\"isValid\",[_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_6__.subscribed]);decorateMethodV2(_RecordState.prototype,\"isDirty\",[_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_6__.subscribed]);decorateMethodV2(_RecordState.prototype,\"isError\",[_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_6__.subscribed]);decorateMethodV2(_RecordState.prototype,\"adapterError\",[_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_6__.subscribed]);decorateMethodV2(_RecordState.prototype,\"isPreloaded\",[_ember_data_tracking__WEBPACK_IMPORTED_MODULE_5__.cached]);decorateMethodV2(_RecordState.prototype,\"stateName\",[_ember_data_tracking__WEBPACK_IMPORTED_MODULE_5__.cached]);decorateMethodV2(_RecordState.prototype,\"dirtyType\",[_ember_data_tracking__WEBPACK_IMPORTED_MODULE_5__.cached]);(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_6__.defineSignal)(RecordState.prototype,'isSaving',false);function notifyErrorsStateChanged(state){state.notify('isValid');state.notify('isError');state.notify('adapterError');}/**\n  @module @ember-data/model\n *//*\n * This decorator allows us to lazily compute\n * an expensive getter on first-access and thereafter\n * never recompute it.\n */function computeOnce(target,propertyName,desc){const cache=new WeakMap();// eslint-disable-next-line @typescript-eslint/unbound-method\nconst getter=desc.get;desc.get=function(){let meta=cache.get(this);if(!meta){meta={hasComputed:false,value:undefined};cache.set(this,meta);}if(!meta.hasComputed){meta.value=getter.call(this);meta.hasComputed=true;}return meta.value;};return desc;}/**\n  Base class from which Models can be defined.\n\n  ```js\n  import Model, { attr } from '@ember-data/model';\n\n  export default class User extends Model {\n    @attr name;\n  }\n  ```\n\n  Models are used both to define the static schema for a\n  particular resource type as well as the class to instantiate\n  to present that data from cache.\n\n  @class Model\n  @public\n  @extends Ember.EmberObject\n*/class Model extends (_ember_object__WEBPACK_IMPORTED_MODULE_2___default()){// set during create by the store\ninit(options){{if(!options?._secretInit&&!options?._createProps){throw new Error('You should not call `create` on a model. Instead, call `store.createRecord` with the attributes you would like to set.');}}const createProps=options._createProps;const _secretInit=options._secretInit;options._createProps=null;options._secretInit=null;const store=this.store=_secretInit.store;super.init(options);this[_warp_drive_core_types_symbols__WEBPACK_IMPORTED_MODULE_7__.RecordStore]=store;const identity=_secretInit.identifier;_secretInit.cb(this,_secretInit.cache,identity,_secretInit.store);this.___recordState=new RecordState(this);this.setProperties(createProps);const notifications=store.notifications;this.___private_notifications=notifications.subscribe(identity,(identifier,type,field)=>{notifyChanges(identifier,type,field,this,store);});}// @ts-expect-error destroy should not return a value, but ember's types force it to\ndestroy(){const identifier=(0,_ember_data_store__WEBPACK_IMPORTED_MODULE_3__.recordIdentifierFor)(this);this.___recordState?.destroy();const store=(0,_ember_data_store__WEBPACK_IMPORTED_MODULE_3__.storeFor)(this);store.notifications.unsubscribe(this.___private_notifications);// Legacy behavior is to notify the relationships on destroy\n// such that they \"clear\". It's uncertain this behavior would\n// be good for a new model paradigm, likely cheaper and safer\n// to simply not notify, for this reason the store does not itself\n// notify individual changes once the delete has been signaled,\n// this decision is left to model instances.\nthis.eachRelationship((name,meta)=>{if(meta.kind==='belongsTo'){this.notifyPropertyChange(name);}});LEGACY_SUPPORT.get(this)?.destroy();LEGACY_SUPPORT.delete(this);LEGACY_SUPPORT.delete(identifier);super.destroy();}/**\n    If this property is `true` the record is in the `empty`\n    state. Empty is the first state all records enter after they have\n    been created. Most records created by the store will quickly\n    transition to the `loading` state if data needs to be fetched from\n    the server or the `created` state if the record is created on the\n    client. A record can also enter the empty state if the adapter is\n    unable to locate the record.\n     @property isEmpty\n    @public\n    @type {Boolean}\n    @readOnly\n  */get isEmpty(){return this.currentState.isEmpty;}/**\n    If this property is `true` the record is in the `loading` state. A\n    record enters this state when the store asks the adapter for its\n    data. It remains in this state until the adapter provides the\n    requested data.\n     @property isLoading\n    @public\n    @type {Boolean}\n    @readOnly\n  */get isLoading(){return this.currentState.isLoading;}/**\n    If this property is `true` the record is in the `loaded` state. A\n    record enters this state when its data is populated. Most of a\n    record's lifecycle is spent inside substates of the `loaded`\n    state.\n     Example\n     ```javascript\n    let record = store.createRecord('model');\n    record.isLoaded; // true\n     const { content: { data: model } } = await store.request(findRecord({ type: 'model', id: '1' }));\n    model.isLoaded;\n    ```\n     @property isLoaded\n    @public\n    @type {Boolean}\n    @readOnly\n  */get isLoaded(){return this.currentState.isLoaded;}/**\n    If this property is `true` the record is in the `dirty` state. The\n    record has local changes that have not yet been saved by the\n    adapter. This includes records that have been created (but not yet\n    saved) or deleted.\n     Example\n     ```javascript\n    let record = store.createRecord('model');\n    record.hasDirtyAttributes; // true\n     const { content: { data: model } } = await store.request(findRecord({ type: 'model', id: '1' }));\n     model.hasDirtyAttributes; // false\n    model.foo = 'some value';\n    model.hasDirtyAttributes; // true\n    ```\n     @since 1.13.0\n    @property hasDirtyAttributes\n    @public\n    @type {Boolean}\n    @readOnly\n  */get hasDirtyAttributes(){return this.currentState.isDirty;}/**\n    If this property is `true` the record is in the `saving` state. A\n    record enters the saving state when `save` is called, but the\n    adapter has not yet acknowledged that the changes have been\n    persisted to the backend.\n     Example\n     ```javascript\n    let record = store.createRecord('model');\n    record.isSaving; // false\n    let promise = record.save();\n    record.isSaving; // true\n    promise.then(function() {\n      record.isSaving; // false\n    });\n    ```\n     @property isSaving\n    @public\n    @type {Boolean}\n    @readOnly\n  */get isSaving(){return this.currentState.isSaving;}/**\n    If this property is `true` the record is in the `deleted` state\n    and has been marked for deletion. When `isDeleted` is true and\n    `hasDirtyAttributes` is true, the record is deleted locally but the deletion\n    was not yet persisted. When `isSaving` is true, the change is\n    in-flight. When both `hasDirtyAttributes` and `isSaving` are false, the\n    change has persisted.\n     Example\n     ```javascript\n    let record = store.createRecord('model');\n    record.isDeleted;    // false\n    record.deleteRecord();\n     // Locally deleted\n    record.isDeleted;           // true\n    record.hasDirtyAttributes;  // true\n    record.isSaving;            // false\n     // Persisting the deletion\n    let promise = record.save();\n    record.isDeleted;    // true\n    record.isSaving;     // true\n     // Deletion Persisted\n    promise.then(function() {\n      record.isDeleted;          // true\n      record.isSaving;           // false\n      record.hasDirtyAttributes; // false\n    });\n    ```\n     @property isDeleted\n    @public\n    @type {Boolean}\n    @readOnly\n  */get isDeleted(){return this.currentState.isDeleted;}/**\n    If this property is `true` the record is in the `new` state. A\n    record will be in the `new` state when it has been created on the\n    client and the adapter has not yet report that it was successfully\n    saved.\n     Example\n     ```javascript\n    let record = store.createRecord('model');\n    record.isNew; // true\n     record.save().then(function(model) {\n      model.isNew; // false\n    });\n    ```\n     @property isNew\n    @public\n    @type {Boolean}\n    @readOnly\n  */get isNew(){return this.currentState.isNew;}/**\n    If this property is `true` the record is in the `valid` state.\n     A record will be in the `valid` state when the adapter did not report any\n    server-side validation failures.\n     @property isValid\n    @public\n    @type {Boolean}\n    @readOnly\n  */get isValid(){return this.currentState.isValid;}/**\n    If the record is in the dirty state this property will report what\n    kind of change has caused it to move into the dirty\n    state. Possible values are:\n     - `created` The record has been created by the client and not yet saved to the adapter.\n    - `updated` The record has been updated by the client and not yet saved to the adapter.\n    - `deleted` The record has been deleted by the client and not yet saved to the adapter.\n     Example\n     ```javascript\n    let record = store.createRecord('model');\n    record.dirtyType; // 'created'\n    ```\n     @property dirtyType\n    @public\n    @type {String}\n    @readOnly\n  */get dirtyType(){return this.currentState.dirtyType;}/**\n    If `true` the adapter reported that it was unable to save local\n    changes to the backend for any reason other than a server-side\n    validation error.\n     Example\n     ```javascript\n    record.isError; // false\n    record.set('foo', 'valid value');\n    record.save().then(null, function() {\n      record.isError; // true\n    });\n    ```\n     @property isError\n    @public\n    @type {Boolean}\n    @readOnly\n  */get isError(){return this.currentState.isError;}set isError(v){{throw new Error(`isError is not directly settable`);}}/**\n    If `true` the store is attempting to reload the record from the adapter.\n     Example\n     ```javascript\n    record.isReloading; // false\n    record.reload();\n    record.isReloading; // true\n    ```\n     @property isReloading\n    @public\n    @type {Boolean}\n    @readOnly\n  *//**\n    All ember models have an id property. This is an identifier\n    managed by an external source. These are always coerced to be\n    strings before being used internally. Note when declaring the\n    attributes for a model it is an error to declare an id\n    attribute.\n     ```javascript\n    let record = store.createRecord('model');\n    record.id; // null\n     const { content: { data: model } } = await store.request(findRecord({ type: 'model', id: '1' }));\n    model.id; // '1'\n    ```\n     @property id\n    @public\n    @type {String}\n  */get id(){// this guard exists, because some dev-only deprecation code\n// (addListener via validatePropertyInjections) invokes toString before the\n// object is real.\n{try{return (0,_ember_data_store__WEBPACK_IMPORTED_MODULE_3__.recordIdentifierFor)(this).id;}catch{return null;}}// removed by dead control flow\n{}}set id(id){const normalizedId=(0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_4__.coerceId)(id);const identifier=(0,_ember_data_store__WEBPACK_IMPORTED_MODULE_3__.recordIdentifierFor)(this);const didChange=normalizedId!==identifier.id;(test=>{if(!test){throw new Error(`Cannot set ${identifier.type} record's id to ${id}, because id is already ${identifier.id}`);}})(!didChange||identifier.id===null);if(normalizedId!==null&&didChange){this.store._instanceCache.setRecordId(identifier,normalizedId);this.store.notifications.notify(identifier,'identity');}}toString(){return`<model::${this.constructor.modelName}:${this.id}>`;}/**\n    @property currentState\n    @private\n    @type {Object}\n  */// TODO we can probably make this a computeOnce\n// we likely do not need to notify the currentState root anymore\nget currentState(){// descriptors are called with the wrong `this` context during mergeMixins\n// when using legacy/classic ember classes. Basically: lazy in prod and eager in dev.\n// so we do this to try to steer folks to the nicer \"dont user currentState\"\n// error.\nreturn this.___recordState;}set currentState(_v){throw new Error('cannot set currentState');}/**\n    The store service instance which created this record instance\n    @property store\n    @public\n   *//**\n    When the record is in the `invalid` state this object will contain\n    any errors returned by the adapter. When present the errors hash\n    contains keys corresponding to the invalid property names\n    and values which are arrays of Javascript objects with two keys:\n     - `message` A string containing the error message from the backend\n    - `attribute` The name of the property associated with this error message\n     ```javascript\n    record.errors.length; // 0\n    record.set('foo', 'invalid value');\n    record.save().catch(function() {\n      record.errors.foo;\n      // [{message: 'foo should be a number.', attribute: 'foo'}]\n    });\n    ```\n     The `errors` property is useful for displaying error messages to\n    the user.\n     ```handlebars\n    <label>Username: <Input @value={{@model.username}} /> </label>\n    {{#each @model.errors.username as |error|}}\n      <div class=\"error\">\n        {{error.message}}\n      </div>\n    {{/each}}\n    <label>Email: <Input @value={{@model.email}} /> </label>\n    {{#each @model.errors.email as |error|}}\n      <div class=\"error\">\n        {{error.message}}\n      </div>\n    {{/each}}\n    ```\n      You can also access the special `messages` property on the error\n    object to get an array of all the error strings.\n     ```handlebars\n    {{#each @model.errors.messages as |message|}}\n      <div class=\"error\">\n        {{message}}\n      </div>\n    {{/each}}\n    ```\n     @property errors\n    @public\n    @type {Errors}\n  */get errors(){const errors=Errors.create({__record:this});this.currentState.updateInvalidErrors(errors);return errors;}/**\n    This property holds the `AdapterError` object with which\n    last adapter operation was rejected.\n     @property adapterError\n    @public\n    @type {AdapterError}\n  */get adapterError(){return this.currentState.adapterError;}set adapterError(v){throw new Error(`adapterError is not directly settable`);}/**\n    Create a JSON representation of the record, using the serialization\n    strategy of the store's adapter.\n    `serialize` takes an optional hash as a parameter, currently\n    supported options are:\n    - `includeId`: `true` if the record's ID should be included in the\n      JSON representation.\n     @method serialize\n    @public\n    @param {Object} options\n    @return {Object} an object whose values are primitive JSON values only\n  *//*\n    We hook the default implementation to ensure\n    our tagged properties are properly notified\n    as well. We still super for everything because\n    sync observers require a direct call occuring\n    to trigger their flush. We wouldn't need to\n    super in 4.0+ where sync observers are removed.\n   */// @ts-expect-error no return is necessary, but Ember's types are forcing it\nnotifyPropertyChange(prop){(0,_ember_data_tracking__WEBPACK_IMPORTED_MODULE_5__.notifySignal)(this,prop);super.notifyPropertyChange(prop);}/**\n    Marks the record as deleted but does not save it. You must call\n    `save` afterwards if you want to persist it. You might use this\n    method if you want to allow the user to still `rollbackAttributes()`\n    after a delete was made.\n     Example\n     ```js\n    import Component from '@glimmer/component';\n     export default class extends Component {\n      softDelete = () => {\n        this.args.model.deleteRecord();\n      }\n       confirm = () => {\n        this.args.model.save();\n      }\n       undo = () => {\n        this.args.model.rollbackAttributes();\n      }\n    }\n    ```\n     @method deleteRecord\n    @public\n  *//**\n    Same as `deleteRecord`, but saves the record immediately.\n     Example\n     ```js\n    import Component from '@glimmer/component';\n     export default class extends Component {\n      delete = () => {\n        this.args.model.destroyRecord().then(function() {\n          this.transitionToRoute('model.index');\n        });\n      }\n    }\n    ```\n     If you pass an object on the `adapterOptions` property of the options\n    argument it will be passed to your adapter via the snapshot\n     ```js\n    record.destroyRecord({ adapterOptions: { subscribe: false } });\n    ```\n     ```app/adapters/post.js\n    import MyCustomAdapter from './custom-adapter';\n     export default class PostAdapter extends MyCustomAdapter {\n      deleteRecord(store, type, snapshot) {\n        if (snapshot.adapterOptions.subscribe) {\n          // ...\n        }\n        // ...\n      }\n    }\n    ```\n     @method destroyRecord\n    @public\n    @param {Object} options\n    @return {Promise} a promise that will be resolved when the adapter returns\n    successfully or rejected if the adapter returns with an error.\n  *//**\n    Unloads the record from the store. This will not send a delete request\n    to your server, it just unloads the record from memory.\n     @method unloadRecord\n    @public\n  *//**\n    Returns an object, whose keys are changed properties, and value is\n    an [oldProp, newProp] array.\n     The array represents the diff of the canonical state with the local state\n    of the model. Note: if the model is created locally, the canonical state is\n    empty since the adapter hasn't acknowledged the attributes yet:\n     Example\n     ```app/models/mascot.js\n    import Model, { attr } from '@ember-data/model';\n     export default class MascotModel extends Model {\n      @attr('string') name;\n      @attr('boolean', {\n        defaultValue: false\n      })\n      isAdmin;\n    }\n    ```\n     ```javascript\n    let mascot = store.createRecord('mascot');\n     mascot.changedAttributes(); // {}\n     mascot.set('name', 'Tomster');\n    mascot.changedAttributes(); // { name: [undefined, 'Tomster'] }\n     mascot.set('isAdmin', true);\n    mascot.changedAttributes(); // { isAdmin: [undefined, true], name: [undefined, 'Tomster'] }\n     mascot.save().then(function() {\n      mascot.changedAttributes(); // {}\n       mascot.set('isAdmin', false);\n      mascot.changedAttributes(); // { isAdmin: [true, false] }\n    });\n    ```\n     @method changedAttributes\n    @public\n    @return {Object} an object, whose keys are changed properties,\n      and value is an [oldProp, newProp] array.\n  *//**\n    If the model `hasDirtyAttributes` this function will discard any unsaved\n    changes. If the model `isNew` it will be removed from the store.\n     Example\n     ```javascript\n    record.name; // 'Untitled Document'\n    record.set('name', 'Doc 1');\n    record.name; // 'Doc 1'\n    record.rollbackAttributes();\n    record.name; // 'Untitled Document'\n    ```\n     @since 1.13.0\n    @method rollbackAttributes\n    @public\n  *//**\n    @method _createSnapshot\n    @private\n  */// TODO @deprecate in favor of a public API or examples of how to test successfully\n/**\n    Save the record and persist any changes to the record to an\n    external source via the adapter.\n     Example\n     ```javascript\n    record.set('name', 'Tomster');\n    record.save().then(function() {\n      // Success callback\n    }, function() {\n      // Error callback\n    });\n    ```\n    If you pass an object using the `adapterOptions` property of the options\n   argument it will be passed to your adapter via the snapshot.\n     ```js\n    record.save({ adapterOptions: { subscribe: false } });\n    ```\n     ```app/adapters/post.js\n    import MyCustomAdapter from './custom-adapter';\n     export default class PostAdapter extends MyCustomAdapter {\n      updateRecord(store, type, snapshot) {\n        if (snapshot.adapterOptions.subscribe) {\n          // ...\n        }\n        // ...\n      }\n    }\n    ```\n     @method save\n    @public\n    @param {Object} options\n    @return {Promise} a promise that will be resolved when the adapter returns\n    successfully or rejected if the adapter returns with an error.\n  *//**\n    Reload the record from the adapter.\n     This will only work if the record has already finished loading.\n     Example\n     ```js\n    import Component from '@glimmer/component';\n     export default class extends Component {\n      async reload = () => {\n        await this.args.model.reload();\n        // do something with the reloaded model\n      }\n    }\n    ```\n     @method reload\n    @public\n    @param {Object} options optional, may include `adapterOptions` hash which will be passed to adapter request\n    @return {Promise} a promise that will be resolved with the record when the\n    adapter returns successfully or rejected if the adapter returns\n    with an error.\n  */attr(){(test=>{{throw new Error('The `attr` method is not available on Model, a Snapshot was probably expected. Are you passing a Model instead of a Snapshot to your serializer?');}})();}/**\n    Get the reference for the specified belongsTo relationship.\n     For instance, given the following model\n     ```app/models/blog-post.js\n    import Model, { belongsTo } from '@ember-data/model';\n     export default class BlogPost extends Model {\n      @belongsTo('user', { async: true, inverse: null }) author;\n    }\n    ```\n     Then the reference for the author relationship would be\n    retrieved from a record instance like so:\n     ```js\n    blogPost.belongsTo('author');\n    ```\n     A `BelongsToReference` is a low-level API that allows access\n    and manipulation of a belongsTo relationship.\n     It is especially useful when you're dealing with `async` relationships\n    as it allows synchronous access to the relationship data if loaded, as\n    well as APIs for loading, reloading the data or accessing available\n    information without triggering a load.\n     It may also be useful when using `sync` relationships that need to be\n    loaded/reloaded with more precise timing than marking the\n    relationship as `async` and relying on autofetch would have allowed.\n     However,keep in mind that marking a relationship as `async: false` will introduce\n    bugs into your application if the data is not always guaranteed to be available\n    by the time the relationship is accessed. Ergo, it is recommended when using this\n    approach to utilize `links` for unloaded relationship state instead of identifiers.\n     Reference APIs are entangled with the relationship's underlying state,\n    thus any getters or cached properties that utilize these will properly\n    invalidate if the relationship state changes.\n     References are \"stable\", meaning that multiple calls to retrieve the reference\n    for a given relationship will always return the same HasManyReference.\n     @method belongsTo\n    @public\n    @param {String} name of the relationship\n    @since 2.5.0\n    @return {BelongsToReference} reference for this relationship\n  *//**\n    Get the reference for the specified hasMany relationship.\n     For instance, given the following model\n     ```app/models/blog-post.js\n    import Model, { hasMany } from '@ember-data/model';\n     export default class BlogPost extends Model {\n      @hasMany('comment', { async: true, inverse: null }) comments;\n    }\n    ```\n     Then the reference for the comments relationship would be\n    retrieved from a record instance like so:\n     ```js\n    blogPost.hasMany('comments');\n    ```\n     A `HasManyReference` is a low-level API that allows access\n    and manipulation of a hasMany relationship.\n     It is especially useful when you are dealing with `async` relationships\n    as it allows synchronous access to the relationship data if loaded, as\n    well as APIs for loading, reloading the data or accessing available\n    information without triggering a load.\n     It may also be useful when using `sync` relationships with `@ember-data/model`\n    that need to be loaded/reloaded with more precise timing than marking the\n    relationship as `async` and relying on autofetch would have allowed.\n     However,keep in mind that marking a relationship as `async: false` will introduce\n    bugs into your application if the data is not always guaranteed to be available\n    by the time the relationship is accessed. Ergo, it is recommended when using this\n    approach to utilize `links` for unloaded relationship state instead of identifiers.\n     Reference APIs are entangled with the relationship's underlying state,\n    thus any getters or cached properties that utilize these will properly\n    invalidate if the relationship state changes.\n     References are \"stable\", meaning that multiple calls to retrieve the reference\n    for a given relationship will always return the same HasManyReference.\n     @method hasMany\n    @public\n    @param {String} name of the relationship\n    @since 2.5.0\n    @return {HasManyReference} reference for this relationship\n  *//**\n   Given a callback, iterates over each of the relationships in the model,\n   invoking the callback with the name of each relationship and its relationship\n   descriptor.\n     The callback method you provide should have the following signature (all\n   parameters are optional):\n    ```javascript\n   function(name, descriptor);\n   ```\n    - `name` the name of the current property in the iteration\n   - `descriptor` the meta object that describes this relationship\n    The relationship descriptor argument is an object with the following properties.\n    - **name** <span class=\"type\">String</span> the name of this relationship on the Model\n   - **kind** <span class=\"type\">String</span> \"hasMany\" or \"belongsTo\"\n   - **options** <span class=\"type\">Object</span> the original options hash passed when the relationship was declared\n   - **parentType** <span class=\"type\">Model</span> the type of the Model that owns this relationship\n   - **type** <span class=\"type\">String</span> the type name of the related Model\n    Note that in addition to a callback, you can also pass an optional target\n   object that will be set as `this` on the context.\n    Example\n    ```app/serializers/application.js\n   import JSONSerializer from '@ember-data/serializer/json';\n    export default class ApplicationSerializer extends JSONSerializer {\n      serialize(record, options) {\n      let json = {};\n       record.eachRelationship(function(name, descriptor) {\n        if (descriptor.kind === 'hasMany') {\n          let serializedHasManyName = name.toUpperCase() + '_IDS';\n          json[serializedHasManyName] = record.get(name).map(r => r.id);\n        }\n      });\n       return json;\n    }\n  }\n   ```\n    @method eachRelationship\n   @public\n   @param {Function} callback the callback to invoke\n   @param {any} binding the value to which the callback's `this` should be bound\n   */eachRelationship(callback,binding){this.constructor.eachRelationship(callback,binding);}relationshipFor(name){return this.constructor.relationshipsByName.get(name);}inverseFor(name){return this.constructor.inverseFor(name,(0,_ember_data_store__WEBPACK_IMPORTED_MODULE_3__.storeFor)(this));}eachAttribute(callback,binding){this.constructor.eachAttribute(callback,binding);}/*\n   These class methods below provide relationship\n   introspection abilities about relationships.\n    A note about the computed properties contained here:\n    **These properties are effectively sealed once called for the first time.**\n   To avoid repeatedly doing expensive iteration over a model's fields, these\n   values are computed once and then cached for the remainder of the runtime of\n   your application.\n    If your application needs to modify a class after its initial definition\n   (for example, using `reopen()` to add additional attributes), make sure you\n   do it before using your model with the store, which uses these properties\n   extensively.\n   *//**\n   For a given relationship name, returns the model type of the relationship.\n    For example, if you define a model like this:\n    ```app/models/post.js\n   import Model, { hasMany } from '@ember-data/model';\n    export default class PostModel extends Model {\n     @hasMany('comment') comments;\n   }\n   ```\n    Calling `store.modelFor('post').typeForRelationship('comments', store)` will return `Comment`.\n    @method typeForRelationship\n    @public\n   @static\n   @param {String} name the name of the relationship\n   @param {store} store an instance of Store\n   @return {Model} the type of the relationship, or undefined\n   */static typeForRelationship(name,store){(test=>{if(!test){throw new Error(`Accessing schema information on Models without looking up the model via the store is disallowed.`);}})(this.modelName);const relationship=this.relationshipsByName.get(name);return relationship&&store.modelFor(relationship.type);}static get inverseMap(){(test=>{if(!test){throw new Error(`Accessing schema information on Models without looking up the model via the store is disallowed.`);}})(this.modelName);return Object.create(null);}/**\n   Find the relationship which is the inverse of the one asked for.\n    For example, if you define models like this:\n    ```app/models/post.js\n   import Model, { hasMany } from '@ember-data/model';\n    export default class PostModel extends Model {\n      @hasMany('message') comments;\n    }\n   ```\n    ```app/models/message.js\n   import Model, { belongsTo } from '@ember-data/model';\n    export default class MessageModel extends Model {\n      @belongsTo('post') owner;\n    }\n   ```\n    ``` js\n   store.modelFor('post').inverseFor('comments', store) // { type: 'message', name: 'owner', kind: 'belongsTo' }\n   store.modelFor('message').inverseFor('owner', store) // { type: 'post', name: 'comments', kind: 'hasMany' }\n   ```\n    @method inverseFor\n    @public\n   @static\n   @param {String} name the name of the relationship\n   @param {Store} store\n   @return {Object} the inverse relationship, or null\n   */static inverseFor(name,store){(test=>{if(!test){throw new Error(`Accessing schema information on Models without looking up the model via the store is disallowed.`);}})(this.modelName);const inverseMap=this.inverseMap;if(inverseMap[name]){return inverseMap[name];}else{const inverse=this._findInverseFor(name,store);inverseMap[name]=inverse;return inverse;}}//Calculate the inverse, ignoring the cache\nstatic _findInverseFor(name,store){(test=>{if(!test){throw new Error(`Accessing schema information on Models without looking up the model via the store is disallowed.`);}})(this.modelName);const relationship=this.relationshipsByName.get(name);(test=>{if(!test){throw new Error(`No relationship named '${name}' on '${this.modelName}' exists.`);}})(relationship);if(!relationship){return null;}const{options}=relationship;(test=>{if(!test){throw new Error(`Expected the relationship ${name} on ${this.modelName} to define an inverse.`);}})(options.inverse===null||typeof options.inverse==='string'&&options.inverse.length>0);if(options.inverse===null){return null;}const schemaExists=store.schema.hasResource(relationship);(test=>{if(!test){throw new Error(`No associated schema found for '${relationship.type}' while calculating the inverse of ${name} on ${this.modelName}`);}})(schemaExists);if(!schemaExists){return null;}const inverseField=store.schema.fields(relationship).get(options.inverse);(test=>{if(!test){throw new Error(`No inverse relationship found for '${name}' on '${this.modelName}'`);}})(inverseField&&(inverseField.kind==='belongsTo'||inverseField.kind==='hasMany'));return inverseField||null;}/**\n   The model's relationships as a map, keyed on the type of the\n   relationship. The value of each entry is an array containing a descriptor\n   for each relationship with that type, describing the name of the relationship\n   as well as the type.\n    For example, given the following model definition:\n    ```app/models/blog.js\n   import Model, { belongsTo, hasMany } from '@ember-data/model';\n    export default class BlogModel extends Model {\n      @hasMany('user') users;\n      @belongsTo('user') owner;\n      @hasMany('post') posts;\n    }\n   ```\n    This computed property would return a map describing these\n   relationships, like this:\n    ```javascript\n   import Blog from 'app/models/blog';\n   import User from 'app/models/user';\n   import Post from 'app/models/post';\n    let relationships = Blog.relationships;\n   relationships.user;\n   //=> [ { name: 'users', kind: 'hasMany' },\n   //     { name: 'owner', kind: 'belongsTo' } ]\n   relationships.post;\n   //=> [ { name: 'posts', kind: 'hasMany' } ]\n   ```\n    @property relationships\n    @public\n   @static\n   @type Map\n   @readOnly\n   */static get relationships(){(test=>{if(!test){throw new Error(`Accessing schema information on Models without looking up the model via the store is disallowed.`);}})(this.modelName);const map=new Map();const relationshipsByName=this.relationshipsByName;// Loop through each computed property on the class\nrelationshipsByName.forEach(desc=>{const{type}=desc;if(!map.has(type)){map.set(type,[]);}map.get(type).push(desc);});return map;}/**\n   A hash containing lists of the model's relationships, grouped\n   by the relationship kind. For example, given a model with this\n   definition:\n    ```app/models/blog.js\n   import Model, { belongsTo, hasMany } from '@ember-data/model';\n    export default class BlogModel extends Model {\n      @hasMany('user') users;\n      @belongsTo('user') owner;\n       @hasMany('post') posts;\n    }\n   ```\n    This property would contain the following:\n    ```javascript\n   import Blog from 'app/models/blog';\n    let relationshipNames = Blog.relationshipNames;\n   relationshipNames.hasMany;\n   //=> ['users', 'posts']\n   relationshipNames.belongsTo;\n   //=> ['owner']\n   ```\n    @property relationshipNames\n    @public\n   @static\n   @type Object\n   @readOnly\n   */static get relationshipNames(){(test=>{if(!test){throw new Error(`Accessing schema information on Models without looking up the model via the store is disallowed.`);}})(this.modelName);const names={hasMany:[],belongsTo:[]};this.eachComputedProperty((name,meta)=>{if(isRelationshipSchema(meta)){names[meta.kind].push(name);}});return names;}/**\n   An array of types directly related to a model. Each type will be\n   included once, regardless of the number of relationships it has with\n   the model.\n    For example, given a model with this definition:\n    ```app/models/blog.js\n   import Model, { belongsTo, hasMany } from '@ember-data/model';\n    export default class BlogModel extends Model {\n      @hasMany('user') users;\n      @belongsTo('user') owner;\n       @hasMany('post') posts;\n    }\n   ```\n    This property would contain the following:\n    ```javascript\n   import Blog from 'app/models/blog';\n    let relatedTypes = Blog.relatedTypes');\n   //=> ['user', 'post']\n   ```\n    @property relatedTypes\n   @public\n   @static\n   @type Array\n   @readOnly\n   */static get relatedTypes(){(test=>{if(!test){throw new Error(`Accessing schema information on Models without looking up the model via the store is disallowed.`);}})(this.modelName);const types=[];const rels=this.relationshipsObject;const relationships=Object.keys(rels);// create an array of the unique types involved\n// in relationships\nfor(let i=0;i<relationships.length;i++){const name=relationships[i];const meta=rels[name];const modelName=meta.type;if(!types.includes(modelName)){types.push(modelName);}}return types;}/**\n   A map whose keys are the relationships of a model and whose values are\n   relationship descriptors.\n    For example, given a model with this\n   definition:\n    ```app/models/blog.js\n   import Model, { belongsTo, hasMany } from '@ember-data/model';\n    export default class BlogModel extends Model {\n      @hasMany('user') users;\n      @belongsTo('user') owner;\n       @hasMany('post') posts;\n    }\n   ```\n    This property would contain the following:\n    ```javascript\n   import Blog from 'app/models/blog';\n    let relationshipsByName = Blog.relationshipsByName;\n   relationshipsByName.users;\n   //=> { name: 'users', kind: 'hasMany', type: 'user', options: Object }\n   relationshipsByName.owner;\n   //=> { name: 'owner', kind: 'belongsTo', type: 'user', options: Object }\n   ```\n    @property relationshipsByName\n    @public\n   @static\n   @type Map\n   @readOnly\n   */static get relationshipsByName(){(test=>{if(!test){throw new Error(`Accessing schema information on Models without looking up the model via the store is disallowed.`);}})(this.modelName);const map=new Map();const rels=this.relationshipsObject;const relationships=Object.keys(rels);for(let i=0;i<relationships.length;i++){const name=relationships[i];const value=rels[name];map.set(value.name,value);}return map;}static get relationshipsObject(){(test=>{if(!test){throw new Error(`Accessing schema information on Models without looking up the model via the store is disallowed.`);}})(this.modelName);const relationships=Object.create(null);const modelName=this.modelName;this.eachComputedProperty((name,meta)=>{if(!isRelationshipSchema(meta)){return;}// TODO deprecate key being here\nmeta.key=name;meta.name=name;relationships[name]=meta;(test=>{if(!test){throw new Error(`Expected options in meta`);}})(meta.options&&typeof meta.options==='object');(test=>{if(!test){throw new Error(`You should not specify both options.as and options.inverse as null on ${modelName}.${meta.name}, as if there is no inverse field there is no abstract type to conform to. You may have intended for this relationship to be polymorphic, or you may have mistakenly set inverse to null.`);}})(!(meta.options.inverse===null&&meta.options.as?.length));});return relationships;}/**\n   A map whose keys are the fields of the model and whose values are strings\n   describing the kind of the field. A model's fields are the union of all of its\n   attributes and relationships.\n    For example:\n    ```app/models/blog.js\n   import Model, { attr, belongsTo, hasMany } from '@ember-data/model';\n    export default class BlogModel extends Model {\n      @hasMany('user') users;\n      @belongsTo('user') owner;\n       @hasMany('post') posts;\n       @attr('string') title;\n    }\n   ```\n    ```js\n   import Blog from 'app/models/blog'\n    let fields = Blog.fields;\n   fields.forEach(function(kind, field) {\n      // do thing\n    });\n    // prints:\n   // users, hasMany\n   // owner, belongsTo\n   // posts, hasMany\n   // title, attribute\n   ```\n    @property fields\n    @public\n   @static\n   @type Map\n   @readOnly\n   */static get fields(){(test=>{if(!test){throw new Error(`Accessing schema information on Models without looking up the model via the store is disallowed.`);}})(this.modelName);const map=new Map();this.eachComputedProperty((name,meta)=>{if(isRelationshipSchema(meta)){map.set(name,meta.kind);}else if(isAttributeSchema(meta)){map.set(name,'attribute');}});return map;}/**\n   Given a callback, iterates over each of the relationships in the model,\n   invoking the callback with the name of each relationship and its relationship\n   descriptor.\n    @method eachRelationship\n    @public\n   @static\n   @param {Function} callback the callback to invoke\n   @param {any} binding the value to which the callback's `this` should be bound\n   */static eachRelationship(callback,binding){(test=>{if(!test){throw new Error(`Accessing schema information on Models without looking up the model via the store is disallowed.`);}})(this.modelName);this.relationshipsByName.forEach((relationship,name)=>{callback.call(binding,name,relationship);});}/**\n   Given a callback, iterates over each of the types related to a model,\n   invoking the callback with the related type's class. Each type will be\n   returned just once, regardless of how many different relationships it has\n   with a model.\n    @method eachRelatedType\n    @public\n   @static\n   @param {Function} callback the callback to invoke\n   @param {any} binding the value to which the callback's `this` should be bound\n   */static eachRelatedType(callback,binding){(test=>{if(!test){throw new Error(`Accessing schema information on Models without looking up the model via the store is disallowed.`);}})(this.modelName);const relationshipTypes=this.relatedTypes;for(let i=0;i<relationshipTypes.length;i++){const type=relationshipTypes[i];callback.call(binding,type);}}/**\n   *\n   * @method determineRelationshipType\n   * @private\n   * @deprecated\n   */static determineRelationshipType(knownSide,store){(test=>{if(!test){throw new Error(`Accessing schema information on Models without looking up the model via the store is disallowed.`);}})(this.modelName);const knownKey=knownSide.name;const knownKind=knownSide.kind;const inverse=this.inverseFor(knownKey,store);// let key;\nif(!inverse){return knownKind==='belongsTo'?'oneToNone':'manyToNone';}// key = inverse.name;\nconst otherKind=inverse.kind;if(otherKind==='belongsTo'){return knownKind==='belongsTo'?'oneToOne':'manyToOne';}else{return knownKind==='belongsTo'?'oneToMany':'manyToMany';}}/**\n   A map whose keys are the attributes of the model (properties\n   described by attr) and whose values are the meta object for the\n   property.\n    Example\n    ```app/models/person.js\n   import Model, { attr } from '@ember-data/model';\n    export default class PersonModel extends Model {\n      @attr('string') firstName;\n      @attr('string') lastName;\n      @attr('date') birthday;\n    }\n   ```\n    ```javascript\n   import Person from 'app/models/person'\n    let attributes = Person.attributes\n    attributes.forEach(function(meta, name) {\n      // do thing\n    });\n    // prints:\n   // firstName {type: \"string\", kind: 'attribute', options: Object, parentType: function, name: \"firstName\"}\n   // lastName {type: \"string\", kind: 'attribute', options: Object, parentType: function, name: \"lastName\"}\n   // birthday {type: \"date\", kind: 'attribute', options: Object, parentType: function, name: \"birthday\"}\n   ```\n    @property attributes\n    @public\n   @static\n   @type {Map}\n   @readOnly\n   */static get attributes(){(test=>{if(!test){throw new Error(`Accessing schema information on Models without looking up the model via the store is disallowed.`);}})(this.modelName);const map=new Map();this.eachComputedProperty((name,meta)=>{if(isAttributeSchema(meta)){(test=>{if(!test){throw new Error(\"You may not set 'id' as an attribute on your model. Please remove any lines that look like: `id: attr('<type>')` from \"+this.toString());}})(name!=='id');// TODO deprecate key being here\nmeta.key=name;meta.name=name;map.set(name,meta);}});return map;}/**\n   A map whose keys are the attributes of the model (properties\n   described by attr) and whose values are type of transformation\n   applied to each attribute. This map does not include any\n   attributes that do not have an transformation type.\n    Example\n    ```app/models/person.js\n   import Model, { attr } from '@ember-data/model';\n    export default class PersonModel extends Model {\n      @attr firstName;\n      @attr('string') lastName;\n      @attr('date') birthday;\n    }\n   ```\n    ```javascript\n   import Person from 'app/models/person';\n    let transformedAttributes = Person.transformedAttributes\n    transformedAttributes.forEach(function(field, type) {\n      // do thing\n    });\n    // prints:\n   // lastName string\n   // birthday date\n   ```\n    @property transformedAttributes\n    @public\n   @static\n   @type {Map}\n   @readOnly\n   */static get transformedAttributes(){(test=>{if(!test){throw new Error(`Accessing schema information on Models without looking up the model via the store is disallowed.`);}})(this.modelName);const map=new Map();this.eachAttribute((name,meta)=>{if(meta.type){map.set(name,meta.type);}});return map;}/**\n   Iterates through the attributes of the model, calling the passed function on each\n   attribute.\n    The callback method you provide should have the following signature (all\n   parameters are optional):\n    ```javascript\n   function(name, meta);\n   ```\n    - `name` the name of the current property in the iteration\n   - `meta` the meta object for the attribute property in the iteration\n    Note that in addition to a callback, you can also pass an optional target\n   object that will be set as `this` on the context.\n    Example\n    ```javascript\n   import Model, { attr } from '@ember-data/model';\n    class PersonModel extends Model {\n      @attr('string') firstName;\n      @attr('string') lastName;\n      @attr('date') birthday;\n    }\n    PersonModel.eachAttribute(function(name, meta) {\n      // do thing\n    });\n    // prints:\n   // firstName {type: \"string\", kind: 'attribute', options: Object, parentType: function, name: \"firstName\"}\n   // lastName {type: \"string\", kind: 'attribute', options: Object, parentType: function, name: \"lastName\"}\n   // birthday {type: \"date\", kind: 'attribute', options: Object, parentType: function, name: \"birthday\"}\n   ```\n    @method eachAttribute\n    @public\n   @param {Function} callback The callback to execute\n   @param {Object} [binding] the value to which the callback's `this` should be bound\n   @static\n   */static eachAttribute(callback,binding){(test=>{if(!test){throw new Error(`Accessing schema information on Models without looking up the model via the store is disallowed.`);}})(this.modelName);this.attributes.forEach((meta,name)=>{callback.call(binding,name,meta);});}/**\n   Iterates through the transformedAttributes of the model, calling\n   the passed function on each attribute. Note the callback will not be\n   called for any attributes that do not have an transformation type.\n    The callback method you provide should have the following signature (all\n   parameters are optional):\n    ```javascript\n   function(name, type);\n   ```\n    - `name` the name of the current property in the iteration\n   - `type` a string containing the name of the type of transformed\n   applied to the attribute\n    Note that in addition to a callback, you can also pass an optional target\n   object that will be set as `this` on the context.\n    Example\n    ```javascript\n   import Model, { attr } from '@ember-data/model';\n    let Person = Model.extend({\n      firstName: attr(),\n      lastName: attr('string'),\n      birthday: attr('date')\n    });\n    Person.eachTransformedAttribute(function(name, type) {\n      // do thing\n    });\n    // prints:\n   // lastName string\n   // birthday date\n   ```\n    @method eachTransformedAttribute\n    @public\n   @param {Function} callback The callback to execute\n   @param {Object} [binding] the value to which the callback's `this` should be bound\n   @static\n   */static eachTransformedAttribute(callback,binding){(test=>{if(!test){throw new Error(`Accessing schema information on Models without looking up the model via the store is disallowed.`);}})(this.modelName);this.transformedAttributes.forEach((type,name)=>{callback.call(binding,name,type);});}/**\n   Returns the name of the model class.\n    @method toString\n    @public\n   @static\n   */static toString(){(test=>{if(!test){throw new Error(`Accessing schema information on Models without looking up the model via the store is disallowed.`);}})(this.modelName);return`model:${this.modelName}`;}}// @ts-expect-error TS doesn't know how to do `this` function overloads\n_Model=Model;decorateMethodV2(_Model.prototype,\"isEmpty\",[_ember_data_tracking__WEBPACK_IMPORTED_MODULE_5__.compat]);decorateMethodV2(_Model.prototype,\"isLoading\",[_ember_data_tracking__WEBPACK_IMPORTED_MODULE_5__.compat]);decorateMethodV2(_Model.prototype,\"isLoaded\",[_ember_data_tracking__WEBPACK_IMPORTED_MODULE_5__.compat]);decorateMethodV2(_Model.prototype,\"hasDirtyAttributes\",[_ember_data_tracking__WEBPACK_IMPORTED_MODULE_5__.compat]);decorateMethodV2(_Model.prototype,\"isSaving\",[_ember_data_tracking__WEBPACK_IMPORTED_MODULE_5__.compat]);decorateMethodV2(_Model.prototype,\"isDeleted\",[_ember_data_tracking__WEBPACK_IMPORTED_MODULE_5__.compat]);decorateMethodV2(_Model.prototype,\"isNew\",[_ember_data_tracking__WEBPACK_IMPORTED_MODULE_5__.compat]);decorateMethodV2(_Model.prototype,\"isValid\",[_ember_data_tracking__WEBPACK_IMPORTED_MODULE_5__.compat]);decorateMethodV2(_Model.prototype,\"dirtyType\",[_ember_data_tracking__WEBPACK_IMPORTED_MODULE_5__.compat]);decorateMethodV2(_Model.prototype,\"isError\",[_ember_data_tracking__WEBPACK_IMPORTED_MODULE_5__.compat]);decorateMethodV2(_Model.prototype,\"id\",[_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_6__.subscribed]);decorateMethodV2(_Model.prototype,\"currentState\",[_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_6__.subscribed]);decorateMethodV2(_Model.prototype,\"errors\",[computeOnce]);decorateMethodV2(_Model.prototype,\"adapterError\",[_ember_data_tracking__WEBPACK_IMPORTED_MODULE_5__.compat]);_defineProperty(Model,\"isModel\",true);/**\n    Create should only ever be called by the store. To create an instance of a\n    `Model` in a dirty state use `store.createRecord`.\n    To create instances of `Model` in a clean state, use `store.push`\n     @method create\n    @private\n    @static\n  *//**\n   Represents the model's class name as a string. This can be used to look up the model's class name through\n   `Store`'s modelFor method.\n    `modelName` is generated for you by EmberData. It will be a lowercased, dasherized string.\n   For example:\n    ```javascript\n   store.modelFor('post').modelName; // 'post'\n   store.modelFor('blog-post').modelName; // 'blog-post'\n   ```\n    The most common place you'll want to access `modelName` is in your serializer's `payloadKeyFromModelName` method. For example, to change payload\n   keys to underscore (instead of dasherized), you might use the following code:\n    ```javascript\n   import RESTSerializer from '@ember-data/serializer/rest';\n   import { underscore } from '<app-name>/utils/string-utils';\n    export default const PostSerializer = RESTSerializer.extend({\n     payloadKeyFromModelName(modelName) {\n       return underscore(modelName);\n     }\n   });\n   ```\n   @property modelName\n    @public\n   @type String\n   @readonly\n   @static\n  */_defineProperty(Model,\"modelName\",null);decorateMethodV2(_Model,\"inverseMap\",[computeOnce]);decorateMethodV2(_Model,\"relationships\",[computeOnce]);decorateMethodV2(_Model,\"relationshipNames\",[computeOnce]);decorateMethodV2(_Model,\"relatedTypes\",[computeOnce]);decorateMethodV2(_Model,\"relationshipsByName\",[computeOnce]);decorateMethodV2(_Model,\"relationshipsObject\",[computeOnce]);decorateMethodV2(_Model,\"fields\",[computeOnce]);decorateMethodV2(_Model,\"attributes\",[computeOnce]);decorateMethodV2(_Model,\"transformedAttributes\",[computeOnce]);Model.prototype.save=save;// @ts-expect-error TS doesn't know how to do `this` function overloads\nModel.prototype.destroyRecord=destroyRecord;Model.prototype.unloadRecord=unloadRecord;Model.prototype.hasMany=hasMany;Model.prototype.belongsTo=belongsTo;Model.prototype.serialize=serialize;Model.prototype._createSnapshot=createSnapshot;Model.prototype.deleteRecord=deleteRecord;Model.prototype.changedAttributes=changedAttributes;Model.prototype.rollbackAttributes=rollbackAttributes;Model.prototype.reload=reload;(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_6__.defineSignal)(Model.prototype,'isReloading',false);// this is required to prevent `init` from passing\n// the values initialized during create to `setUnknownProperty`\nModel.prototype._createProps=null;Model.prototype._secretInit=null;{const lookupDescriptor=function lookupDescriptor(obj,keyName){let current=obj;do{const descriptor=Object.getOwnPropertyDescriptor(current,keyName);if(descriptor!==undefined){return descriptor;}current=Object.getPrototypeOf(current);}while(current!==null);return null;};// eslint-disable-next-line @typescript-eslint/unbound-method\nconst init=Model.prototype.init;Model.prototype.init=function(createArgs){init.call(this,createArgs);const ourDescriptor=lookupDescriptor(Model.prototype,'currentState');const theirDescriptor=lookupDescriptor(this,'currentState');if(!ourDescriptor||!theirDescriptor){throw new Error(`Unable to determine if 'currentState' is a reserved property name on instances of classes extending Model. Please ensure that 'currentState' is not defined as a property on ${this.constructor.toString()}`);}const realState=this.___recordState;if(ourDescriptor.get!==theirDescriptor.get||realState!==this.currentState){throw new Error(`'currentState' is a reserved property name on instances of classes extending Model. Please choose a different property name for ${this.constructor.toString()}`);}const ID_DESCRIPTOR=lookupDescriptor(Model.prototype,'id');const idDesc=lookupDescriptor(this,'id');if(!ID_DESCRIPTOR||!idDesc){throw new Error(`Unable to determine if 'id' is a reserved property name on instances of classes extending Model. Please ensure that 'id' is not defined as a property on ${this.constructor.toString()}`);}if(idDesc.get!==ID_DESCRIPTOR.get){throw new Error(`You may not set 'id' as an attribute on your model. Please remove any lines that look like: \\`id: attr('<type>')\\` from ${this.constructor.toString()}`);}};delete Model.reopen;delete Model.reopenClass;}function isRelationshipSchema(meta){const hasKind=typeof meta==='object'&&meta!==null&&'kind'in meta&&'options'in meta;return hasKind&&(meta.kind==='hasMany'||meta.kind==='belongsTo');}function isAttributeSchema(meta){return typeof meta==='object'&&meta!==null&&'kind'in meta&&meta.kind==='attribute';}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@ember-data/model/dist/model-rk3atPqV.js?");

/***/ }),

/***/ "./node_modules/@ember-data/model/dist/schema-provider-Bvogtzx9.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@ember-data/model/dist/schema-provider-Bvogtzx9.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   M: () => (/* binding */ ModelSchemaProvider),\n/* harmony export */   b: () => (/* binding */ buildSchema),\n/* harmony export */   g: () => (/* binding */ getModelFactory)\n/* harmony export */ });\n/* harmony import */ var _ember_application__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/application */ \"@ember/application\");\n/* harmony import */ var _ember_application__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_application__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/debug */ \"@ember/debug\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _model_rk3atPqV_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./model-rk3atPqV.js */ \"./node_modules/@ember-data/model/dist/model-rk3atPqV.js\");\n/*\n    In case someone defined a relationship to a mixin, for example:\n    ```ts\n      class CommentModel extends Model {\n        @belongsTo('commentable', { polymorphic: true }) owner;\n      }\n\n      let Commentable = Mixin.create({\n        @hasMany('comment') comments;\n      });\n    ```\n    we want to look up a Commentable class which has all the necessary\n    relationship meta data. Thus, we look up the mixin and create a mock\n    Model, so we can access the relationship CPs of the mixin (`comments`)\n    in this case\n  */function modelForMixin(store,normalizedModelName){const owner=(0,_ember_application__WEBPACK_IMPORTED_MODULE_0__.getOwner)(store);const MaybeMixin=owner.factoryFor(`mixin:${normalizedModelName}`);const mixin=MaybeMixin&&MaybeMixin.class;if(mixin){const ModelForMixin=_model_rk3atPqV_js__WEBPACK_IMPORTED_MODULE_2__.M.extend(mixin);ModelForMixin.__isMixin=true;ModelForMixin.__mixin=mixin;//Cache the class as a model\nowner.register(`model:${normalizedModelName}`,ModelForMixin);}return owner.factoryFor(`model:${normalizedModelName}`);}class ModelSchemaProvider{constructor(store){this.store=store;this._schemas=new Map();this._typeMisses=new Set();}resourceTypes(){return Array.from(this._schemas.keys());}hasTrait(type){(test=>{{throw new Error(`hasTrait is not available with @ember-data/model's SchemaService`);}})();return false;}resourceHasTrait(resource,trait){(test=>{{throw new Error(`resourceHasTrait is not available with @ember-data/model's SchemaService`);}})();return false;}transformation(field){(test=>{{throw new Error(`transformation is not available with @ember-data/model's SchemaService`);}})();}derivation(field){(test=>{{throw new Error(`derivation is not available with @ember-data/model's SchemaService`);}})();}hashFn(field){(test=>{{throw new Error(`hashFn is not available with @ember-data/model's SchemaService`);}})();}resource(resource){const type=(0,_model_rk3atPqV_js__WEBPACK_IMPORTED_MODULE_2__.n)(resource.type);if(!this._schemas.has(type)){this._loadModelSchema(type);}return this._schemas.get(type).schema;}registerResources(schemas){(test=>{{throw new Error(`registerResources is not available with @ember-data/model's SchemaService`);}})();}registerResource(schema){(test=>{{throw new Error(`registerResource is not available with @ember-data/model's SchemaService`);}})();}registerTransformation(transform){(test=>{{throw new Error(`registerTransformation is not available with @ember-data/model's SchemaService`);}})();}registerDerivation(derivation){(test=>{{throw new Error(`registerDerivation is not available with @ember-data/model's SchemaService`);}})();}registerHashFn(hashFn){(test=>{{throw new Error(`registerHashFn is not available with @ember-data/model's SchemaService`);}})();}_loadModelSchema(type){const modelClass=this.store.modelFor(type);const attributeMap=modelClass.attributes;const attributes=Object.create(null);attributeMap.forEach((meta,name)=>attributes[name]=meta);const relationships=modelClass.relationshipsObject||null;const fields=new Map();for(const attr of Object.values(attributes)){fields.set(attr.name,attr);}for(const rel of Object.values(relationships)){fields.set(rel.name,rel);}const schema={legacy:true,identity:{name:'id',kind:'@id'},type,fields:Array.from(fields.values())};const internalSchema={schema,attributes,relationships,fields};this._schemas.set(type,internalSchema);return internalSchema;}fields(resource){const type=(0,_model_rk3atPqV_js__WEBPACK_IMPORTED_MODULE_2__.n)(resource.type);if(!this._schemas.has(type)){this._loadModelSchema(type);}return this._schemas.get(type).fields;}hasResource(resource){const type=(0,_model_rk3atPqV_js__WEBPACK_IMPORTED_MODULE_2__.n)(resource.type);if(this._schemas.has(type)){return true;}if(this._typeMisses.has(type)){return false;}const factory=getModelFactory(this.store,type);const exists=factory!==null;if(!exists){this._typeMisses.add(type);return false;}return true;}}{ModelSchemaProvider.prototype.doesTypeExist=function(type){(0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.deprecate)(`Use \\`schema.hasResource({ type })\\` instead of \\`schema.doesTypeExist(type)\\``,false,{id:'ember-data:schema-service-updates',until:'6.0',for:'ember-data',since:{available:'4.13',enabled:'5.4'}});return this.hasResource({type});};ModelSchemaProvider.prototype.attributesDefinitionFor=function(resource){(0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.deprecate)(`Use \\`schema.fields({ type })\\` instead of \\`schema.attributesDefinitionFor({ type })\\``,false,{id:'ember-data:schema-service-updates',until:'6.0',for:'ember-data',since:{available:'4.13',enabled:'5.4'}});const type=(0,_model_rk3atPqV_js__WEBPACK_IMPORTED_MODULE_2__.n)(resource.type);if(!this._schemas.has(type)){this._loadModelSchema(type);}return this._schemas.get(type).attributes;};ModelSchemaProvider.prototype.relationshipsDefinitionFor=function(resource){(0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.deprecate)(`Use \\`schema.fields({ type })\\` instead of \\`schema.relationshipsDefinitionFor({ type })\\``,false,{id:'ember-data:schema-service-updates',until:'6.0',for:'ember-data',since:{available:'4.13',enabled:'5.4'}});const type=(0,_model_rk3atPqV_js__WEBPACK_IMPORTED_MODULE_2__.n)(resource.type);if(!this._schemas.has(type)){this._loadModelSchema(type);}return this._schemas.get(type).relationships;};}function buildSchema(store){return new ModelSchemaProvider(store);}function getModelFactory(store,type){if(!store._modelFactoryCache){store._modelFactoryCache=Object.create(null);}const cache=store._modelFactoryCache;let factory=cache[type];if(!factory){const owner=(0,_ember_application__WEBPACK_IMPORTED_MODULE_0__.getOwner)(store);factory=owner.factoryFor(`model:${type}`);if(!factory){//Support looking up mixins as base types for polymorphic relationships\nfactory=modelForMixin(store,type);}if(!factory){// we don't cache misses in case someone wants to register a missing model\nreturn null;}const klass=factory.class;if(klass.isModel){const hasOwnModelNameSet=klass.modelName&&Object.prototype.hasOwnProperty.call(klass,'modelName');if(!hasOwnModelNameSet){Object.defineProperty(klass,'modelName',{value:type});}}cache[type]=factory;}return factory;}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@ember-data/model/dist/schema-provider-Bvogtzx9.js?");

/***/ }),

/***/ "./node_modules/@ember-data/request-utils/dist/deprecation-support.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@ember-data/request-utils/dist/deprecation-support.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"@ember/debug\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _inflect_8aYUyMN7_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./inflect-8aYUyMN7.js */ \"./node_modules/@ember-data/request-utils/dist/inflect-8aYUyMN7.js\");\n{}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@ember-data/request-utils/dist/deprecation-support.js?");

/***/ }),

/***/ "./node_modules/@ember-data/request-utils/dist/inflect-8aYUyMN7.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@ember-data/request-utils/dist/inflect-8aYUyMN7.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ singular),\n/* harmony export */   b: () => (/* binding */ plural),\n/* harmony export */   c: () => (/* binding */ loadUncountable),\n/* harmony export */   d: () => (/* binding */ clear),\n/* harmony export */   e: () => (/* binding */ clearRules),\n/* harmony export */   f: () => (/* binding */ dasherize),\n/* harmony export */   g: () => (/* binding */ camelize),\n/* harmony export */   h: () => (/* binding */ capitalize),\n/* harmony export */   i: () => (/* binding */ irregular),\n/* harmony export */   j: () => (/* binding */ underscore),\n/* harmony export */   k: () => (/* binding */ setMaxLRUCacheSize),\n/* harmony export */   l: () => (/* binding */ loadIrregular),\n/* harmony export */   m: () => (/* binding */ defaultRules),\n/* harmony export */   p: () => (/* binding */ pluralize),\n/* harmony export */   r: () => (/* binding */ resetToDefaults),\n/* harmony export */   s: () => (/* binding */ singularize),\n/* harmony export */   u: () => (/* binding */ uncountable)\n/* harmony export */ });\nconst defaultRules={plurals:[[/$/,'s'],[/s$/i,'s'],[/^(ax|test)is$/i,'$1es'],[/(octop|vir)us$/i,'$1i'],[/(octop|vir)i$/i,'$1i'],[/(alias|status|bonus)$/i,'$1es'],[/(bu)s$/i,'$1ses'],[/(buffal|tomat)o$/i,'$1oes'],[/([ti])um$/i,'$1a'],[/([ti])a$/i,'$1a'],[/sis$/i,'ses'],[/(?:([^f])fe|([lr])f)$/i,'$1$2ves'],[/(hive)$/i,'$1s'],[/([^aeiouy]|qu)y$/i,'$1ies'],[/(x|ch|ss|sh)$/i,'$1es'],[/(matr|vert|ind)(?:ix|ex)$/i,'$1ices'],[/^(m|l)ouse$/i,'$1ice'],[/^(m|l)ice$/i,'$1ice'],[/^(ox)$/i,'$1en'],[/^(oxen)$/i,'$1'],[/(quiz)$/i,'$1zes']],singular:[[/s$/i,''],[/(ss)$/i,'$1'],[/(n)ews$/i,'$1ews'],[/([ti])a$/i,'$1um'],[/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$/i,'$1sis'],[/(^analy)(sis|ses)$/i,'$1sis'],[/([^f])ves$/i,'$1fe'],[/(hive)s$/i,'$1'],[/(tive)s$/i,'$1'],[/([lr])ves$/i,'$1f'],[/([^aeiouy]|qu)ies$/i,'$1y'],[/(s)eries$/i,'$1eries'],[/(m)ovies$/i,'$1ovie'],[/(x|ch|ss|sh)es$/i,'$1'],[/^(m|l)ice$/i,'$1ouse'],[/(bus)(es)?$/i,'$1'],[/(o)es$/i,'$1'],[/(shoe)s$/i,'$1'],[/(cris|test)(is|es)$/i,'$1is'],[/^(a)x[ie]s$/i,'$1xis'],[/(octop|vir)(us|i)$/i,'$1us'],[/(alias|status|bonus)(es)?$/i,'$1'],[/^(ox)en/i,'$1'],[/(vert|ind)ices$/i,'$1ex'],[/(matr)ices$/i,'$1ix'],[/(quiz)zes$/i,'$1'],[/(database)s$/i,'$1']],irregularPairs:[['person','people'],['man','men'],['child','children'],['sex','sexes'],['move','moves'],['cow','kine'],['zombie','zombies']],uncountable:['equipment','information','rice','money','species','series','fish','sheep','jeans','police']};const DEFAULT_MAX_CACHE_SIZE=10_000;class LRUCache{// debug stats\nconstructor(doWork,size){this.size=size||DEFAULT_MAX_CACHE_SIZE;this.state=new Map();this.doWork=doWork;{this._hits=0;this._misses=0;this._ejected=0;}}get(key){const value=this.state.get(key);if(value){{this._hits++;}this.state.delete(key);this.state.set(key,value);return value;}{this._misses++;}const newValue=this.doWork(key);this.set(key,newValue);return newValue;}set(key,value){if(this.state.size===this.size){for(const[k]of this.state){{this._ejected++;}this.state.delete(k);break;}}this.state.set(key,value);}clear(){this.state.clear();{this._hits=0;this._misses=0;this._ejected=0;}}}const STRING_DASHERIZE_REGEXP=/[ _]/g;const STRING_DECAMELIZE_REGEXP=/([a-z\\d])([A-Z])/g;const STRING_DASHERIZE_CACHE=new LRUCache(key=>key.replace(STRING_DECAMELIZE_REGEXP,'$1_$2').toLowerCase().replace(STRING_DASHERIZE_REGEXP,'-'));// eslint-disable-next-line no-useless-escape\nconst STRING_CAMELIZE_REGEXP_1=/(\\-|\\_|\\.|\\s)+(.)?/g;const STRING_CAMELIZE_REGEXP_2=/(^|\\/)([A-Z])/g;const CAMELIZE_CACHE=new LRUCache(key=>key.replace(STRING_CAMELIZE_REGEXP_1,(_match,_separator,chr)=>chr?chr.toUpperCase():'').replace(STRING_CAMELIZE_REGEXP_2,(match/*, separator, chr */)=>match.toLowerCase()));const STRING_UNDERSCORE_REGEXP_1=/([a-z\\d])([A-Z]+)/g;// eslint-disable-next-line no-useless-escape\nconst STRING_UNDERSCORE_REGEXP_2=/\\-|\\s+/g;const UNDERSCORE_CACHE=new LRUCache(str=>str.replace(STRING_UNDERSCORE_REGEXP_1,'$1_$2').replace(STRING_UNDERSCORE_REGEXP_2,'_').toLowerCase());const STRING_CAPITALIZE_REGEXP=/(^|\\/)([a-z\\u00C0-\\u024F])/g;const CAPITALIZE_CACHE=new LRUCache(str=>str.replace(STRING_CAPITALIZE_REGEXP,(match/*, separator, chr */)=>match.toUpperCase()));/**\n  Replaces underscores, spaces, or camelCase with dashes.\n\n  ```js\n  import { dasherize } from '@ember-data/request-utils/string';\n\n  dasherize('innerHTML');                // 'inner-html'\n  dasherize('action_name');              // 'action-name'\n  dasherize('css-class-name');           // 'css-class-name'\n  dasherize('my favorite items');        // 'my-favorite-items'\n  dasherize('privateDocs/ownerInvoice';  // 'private-docs/owner-invoice'\n  ```\n\n  @typedoc\n*/function dasherize(str){return STRING_DASHERIZE_CACHE.get(str);}/**\n  Returns the lowerCamelCase form of a string.\n\n  ```js\n  import { camelize } from '@ember-data/request-utils/string';\n\n  camelize('innerHTML');                   // 'innerHTML'\n  camelize('action_name');                 // 'actionName'\n  camelize('css-class-name');              // 'cssClassName'\n  camelize('my favorite items');           // 'myFavoriteItems'\n  camelize('My Favorite Items');           // 'myFavoriteItems'\n  camelize('private-docs/owner-invoice');  // 'privateDocs/ownerInvoice'\n```\n\n  @typedoc\n*/function camelize(str){return CAMELIZE_CACHE.get(str);}/**\n  Returns the lower\\_case\\_and\\_underscored form of a string.\n\n  ```js\n  import { underscore } from '@ember-data/request-utils/string';\n\n  underscore('innerHTML');                 // 'inner_html'\n  underscore('action_name');               // 'action_name'\n  underscore('css-class-name');            // 'css_class_name'\n  underscore('my favorite items');         // 'my_favorite_items'\n  underscore('privateDocs/ownerInvoice');  // 'private_docs/owner_invoice'\n  ```\n\n  @typedoc\n*/function underscore(str){return UNDERSCORE_CACHE.get(str);}/**\n  Returns the Capitalized form of a string\n\n  ```js\n  import { capitalize } from '@ember-data/request-utils/string';\n\n  capitalize('innerHTML')                 // 'InnerHTML'\n  capitalize('action_name')               // 'Action_name'\n  capitalize('css-class-name')            // 'Css-class-name'\n  capitalize('my favorite items')         // 'My favorite items'\n  capitalize('privateDocs/ownerInvoice'); // 'PrivateDocs/ownerInvoice'\n  ```\n\n  @typedoc\n*/function capitalize(str){return CAPITALIZE_CACHE.get(str);}function setMaxLRUCacheSize(size){CAMELIZE_CACHE.size=size;UNDERSCORE_CACHE.size=size;CAPITALIZE_CACHE.size=size;STRING_DASHERIZE_CACHE.size=size;}const BLANK_REGEX=/^\\s*$/;const LAST_WORD_DASHED_REGEX=/([\\w/-]+[_/\\s-])([a-z\\d]+$)/;const LAST_WORD_CAMELIZED_REGEX=/([\\w/\\s-]+)([A-Z][a-z\\d]*$)/;const CAMELIZED_REGEX=/[A-Z][a-z\\d]*$/;const SINGULARS=new LRUCache(word=>{return _singularize(word);});const PLURALS=new LRUCache(word=>{return _pluralize(word);});const UNCOUNTABLE=new Set(defaultRules.uncountable);const IRREGULAR=new Map();const INVERSE_IRREGULAR=new Map();const SINGULAR_RULES=new Map(defaultRules.singular.reverse());const PLURAL_RULES=new Map(defaultRules.plurals.reverse());function uncountable(word){UNCOUNTABLE.add(word.toLowerCase());}function loadUncountable(uncountables){uncountables.forEach(word=>{uncountable(word);});}function irregular(single,plur){//pluralizing\nIRREGULAR.set(single.toLowerCase(),plur);IRREGULAR.set(plur.toLowerCase(),plur);//singularizing\nINVERSE_IRREGULAR.set(plur.toLowerCase(),single);INVERSE_IRREGULAR.set(single.toLowerCase(),single);}function loadIrregular(irregularPairs){irregularPairs.forEach(pair=>{//pluralizing\nIRREGULAR.set(pair[0].toLowerCase(),pair[1]);IRREGULAR.set(pair[1].toLowerCase(),pair[1]);//singularizing\nINVERSE_IRREGULAR.set(pair[1].toLowerCase(),pair[0]);INVERSE_IRREGULAR.set(pair[0].toLowerCase(),pair[0]);});}loadIrregular(defaultRules.irregularPairs);function clear(){SINGULARS.clear();PLURALS.clear();}function resetToDefaults(){clearRules();defaultRules.uncountable.forEach(v=>UNCOUNTABLE.add(v));defaultRules.singular.forEach(v=>SINGULAR_RULES.set(v[0],v[1]));defaultRules.plurals.forEach(v=>PLURAL_RULES.set(v[0],v[1]));loadIrregular(defaultRules.irregularPairs);}function clearRules(){SINGULARS.clear();PLURALS.clear();UNCOUNTABLE.clear();IRREGULAR.clear();INVERSE_IRREGULAR.clear();SINGULAR_RULES.clear();PLURAL_RULES.clear();}function singularize(word){(test=>{if(!test){throw new Error(`singularize expects to receive a non-empty string`);}})(typeof word==='string'&&word.length>0);if(!word)return'';return SINGULARS.get(word);}function pluralize(word){(test=>{if(!test){throw new Error(`pluralize expects to receive a non-empty string`);}})(typeof word==='string'&&word.length>0);if(!word)return'';return PLURALS.get(word);}function unshiftMap(v,map){// reorder\nconst rules=[v,...map.entries()];map.clear();rules.forEach(rule=>{map.set(rule[0],rule[1]);});}function plural(regex,string){// rule requires reordering if exists, so remove it first\nif(PLURAL_RULES.has(regex)){PLURAL_RULES.delete(regex);}// reorder\nunshiftMap([regex,string],PLURAL_RULES);}function singular(regex,string){// rule requires reordering if exists, so remove it first\nif(SINGULAR_RULES.has(regex)){SINGULAR_RULES.delete(regex);}// reorder\nunshiftMap([regex,string],SINGULAR_RULES);}function _pluralize(word){return inflect(word,PLURAL_RULES,IRREGULAR);}function _singularize(word){return inflect(word,SINGULAR_RULES,INVERSE_IRREGULAR);}function inflect(word,typeRules,irregulars){// empty strings\nconst isBlank=!word||BLANK_REGEX.test(word);if(isBlank){return word;}// basic uncountables\nconst lowercase=word.toLowerCase();if(UNCOUNTABLE.has(lowercase)){return word;}// adv uncountables\nconst wordSplit=LAST_WORD_DASHED_REGEX.exec(word)||LAST_WORD_CAMELIZED_REGEX.exec(word);const lastWord=wordSplit?wordSplit[2].toLowerCase():null;if(lastWord&&UNCOUNTABLE.has(lastWord)){return word;}// handle irregulars\nconst isCamelized=CAMELIZED_REGEX.test(word);for(let[rule,substitution]of irregulars){if(lowercase.match(rule+'$')){if(isCamelized&&lastWord&&irregulars.has(lastWord)){substitution=capitalize(substitution);rule=capitalize(rule);}return word.replace(new RegExp(rule,'i'),substitution);}}// do the actual inflection\nfor(const[rule,substitution]of typeRules){if(rule.test(word)){return word.replace(rule,substitution);}}return word;}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@ember-data/request-utils/dist/inflect-8aYUyMN7.js?");

/***/ }),

/***/ "./node_modules/@ember-data/request-utils/dist/string.js":
/*!***************************************************************!*\
  !*** ./node_modules/@ember-data/request-utils/dist/string.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   camelize: () => (/* reexport safe */ _inflect_8aYUyMN7_js__WEBPACK_IMPORTED_MODULE_0__.g),\n/* harmony export */   capitalize: () => (/* reexport safe */ _inflect_8aYUyMN7_js__WEBPACK_IMPORTED_MODULE_0__.h),\n/* harmony export */   clear: () => (/* reexport safe */ _inflect_8aYUyMN7_js__WEBPACK_IMPORTED_MODULE_0__.d),\n/* harmony export */   clearRules: () => (/* reexport safe */ _inflect_8aYUyMN7_js__WEBPACK_IMPORTED_MODULE_0__.e),\n/* harmony export */   dasherize: () => (/* reexport safe */ _inflect_8aYUyMN7_js__WEBPACK_IMPORTED_MODULE_0__.f),\n/* harmony export */   irregular: () => (/* reexport safe */ _inflect_8aYUyMN7_js__WEBPACK_IMPORTED_MODULE_0__.i),\n/* harmony export */   loadIrregular: () => (/* reexport safe */ _inflect_8aYUyMN7_js__WEBPACK_IMPORTED_MODULE_0__.l),\n/* harmony export */   loadUncountable: () => (/* reexport safe */ _inflect_8aYUyMN7_js__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   plural: () => (/* reexport safe */ _inflect_8aYUyMN7_js__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   pluralize: () => (/* reexport safe */ _inflect_8aYUyMN7_js__WEBPACK_IMPORTED_MODULE_0__.p),\n/* harmony export */   resetToDefaults: () => (/* reexport safe */ _inflect_8aYUyMN7_js__WEBPACK_IMPORTED_MODULE_0__.r),\n/* harmony export */   setMaxLRUCacheSize: () => (/* reexport safe */ _inflect_8aYUyMN7_js__WEBPACK_IMPORTED_MODULE_0__.k),\n/* harmony export */   singular: () => (/* reexport safe */ _inflect_8aYUyMN7_js__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   singularize: () => (/* reexport safe */ _inflect_8aYUyMN7_js__WEBPACK_IMPORTED_MODULE_0__.s),\n/* harmony export */   uncountable: () => (/* reexport safe */ _inflect_8aYUyMN7_js__WEBPACK_IMPORTED_MODULE_0__.u),\n/* harmony export */   underscore: () => (/* reexport safe */ _inflect_8aYUyMN7_js__WEBPACK_IMPORTED_MODULE_0__.j)\n/* harmony export */ });\n/* harmony import */ var _inflect_8aYUyMN7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./inflect-8aYUyMN7.js */ \"./node_modules/@ember-data/request-utils/dist/inflect-8aYUyMN7.js\");\n\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@ember-data/request-utils/dist/string.js?");

/***/ }),

/***/ "./node_modules/@ember-data/request/dist/debug-nHWzWIMX.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ember-data/request/dist/debug-nHWzWIMX.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   I: () => (/* binding */ IS_CACHE_HANDLER),\n/* harmony export */   a: () => (/* binding */ assertValidRequest),\n/* harmony export */   b: () => (/* binding */ createDeferred),\n/* harmony export */   c: () => (/* binding */ clearRequestResult),\n/* harmony export */   d: () => (/* binding */ getPromiseResult),\n/* harmony export */   e: () => (/* binding */ executeNextHandler),\n/* harmony export */   f: () => (/* binding */ cloneResponseProperties),\n/* harmony export */   g: () => (/* binding */ getRequestResult),\n/* harmony export */   s: () => (/* binding */ setPromiseResult),\n/* harmony export */   u: () => (/* binding */ upgradePromise)\n/* harmony export */ });\n/* harmony import */ var _warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @warp-drive/core-types/-private */ \"./node_modules/@warp-drive/core-types/dist/-private.js\");\n/* harmony import */ var _warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @warp-drive/core-types/request */ \"./node_modules/@warp-drive/core-types/dist/request.js\");\nfunction _classPrivateFieldInitSpec(e,t,a){_checkPrivateRedeclaration(e,t),t.set(e,a);}function _checkPrivateRedeclaration(e,t){if(t.has(e))throw new TypeError(\"Cannot initialize the same private elements twice on an object\");}function _classPrivateFieldGet(s,a){return s.get(_assertClassBrand(s,a));}function _classPrivateFieldSet(s,a,r){return s.set(_assertClassBrand(s,a),r),r;}function _assertClassBrand(e,t,n){if(\"function\"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError(\"Private element is not present on this object\");}function _defineProperty(e,r,t){return(r=_toPropertyKey(r))in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e;}function _toPropertyKey(t){var i=_toPrimitive(t,\"string\");return\"symbol\"==typeof i?i:i+\"\";}function _toPrimitive(t,r){if(\"object\"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||\"default\");if(\"object\"!=typeof i)return i;throw new TypeError(\"@@toPrimitive must return a primitive value.\");}return(\"string\"===r?String:Number)(t);}const PromiseCache=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_0__.getOrSetUniversal)('PromiseCache',new WeakMap());const RequestMap=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_0__.getOrSetUniversal)('RequestMap',new Map());function setRequestResult(requestId,result){RequestMap.set(requestId,result);}function clearRequestResult(requestId){RequestMap.delete(requestId);}function getRequestResult(requestId){return RequestMap.get(requestId);}function setPromiseResult(promise,result){PromiseCache.set(promise,result);}function getPromiseResult(promise){return PromiseCache.get(promise);}const IS_CACHE_HANDLER=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_0__.getOrSetGlobal)('IS_CACHE_HANDLER',Symbol('IS_CACHE_HANDLER'));function curryFuture(owner,inbound,outbound){owner.setStream(inbound.getStream());inbound.then(doc=>{const document={[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_1__.STRUCTURED]:true,request:owner.request,response:doc.response,content:doc.content};outbound.resolve(document);},error=>{if(isDoc(error)){owner.setStream(owner.god.stream);}if(!error||!(error instanceof Error)){try{throw new Error(error?error:`Request Rejected with an Unknown Error`);}catch(e){if(error&&typeof error==='object'){Object.assign(e,error);e.message=error.message||`Request Rejected with an Unknown Error`;}error=e;}}error[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_1__.STRUCTURED]=true;error.request=owner.request;error.response=owner.getResponse();error.error=error.error||error.message;outbound.reject(error);});return outbound.promise;}function isDoc(doc){return doc&&doc[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_1__.STRUCTURED]===true;}function ensureDoc(owner,content,isError){if(isDoc(content)){return content;}if(isError){return{[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_1__.STRUCTURED]:true,request:owner.request,response:owner.getResponse(),error:content};}return{[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_1__.STRUCTURED]:true,request:owner.request,response:owner.getResponse(),content:content};}function enhanceReason(reason){return new DOMException(reason||'The user aborted a request.','AbortError');}function handleOutcome(owner,inbound,outbound){inbound.then(content=>{if(owner.controller.signal.aborted){// the next function did not respect the signal, we handle it here\noutbound.reject(enhanceReason(owner.controller.signal.reason));return;}if(isDoc(content)){owner.setStream(owner.god.stream);content=content.content;}const document={[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_1__.STRUCTURED]:true,request:owner.request,response:owner.getResponse(),content};outbound.resolve(document);},error=>{if(isDoc(error)){owner.setStream(owner.god.stream);}if(!error||!(error instanceof Error)){try{throw new Error(error?error:`Request Rejected with an Unknown Error`);}catch(e){if(error&&typeof error==='object'){Object.assign(e,error);e.message=error.message||`Request Rejected with an Unknown Error`;}error=e;}}error[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_1__.STRUCTURED]=true;error.request=owner.request;error.response=owner.getResponse();error.error=error.error||error.message;outbound.reject(error);});return outbound.promise;}function isCacheHandler(handler,index){return index===0&&Boolean(handler[IS_CACHE_HANDLER]);}function executeNextHandler(wares,request,i,god){{if(i===wares.length){throw new Error(`No handler was able to handle this request.`);}assertValidRequest(request,false);}const owner=new ContextOwner(request,god,i===0);function next(r){owner.nextCalled++;return executeNextHandler(wares,r,i+1,god);}const _isCacheHandler=isCacheHandler(wares[i],i);const context=new Context(owner,_isCacheHandler);let outcome;try{outcome=wares[i].request(context,next);if(_isCacheHandler){context._finalize();}if(!!outcome&&_isCacheHandler){if(!(outcome instanceof Promise)){setRequestResult(owner.requestId,{isError:false,result:ensureDoc(owner,outcome,false)});outcome=Promise.resolve(outcome);}}else{if(!outcome||!(outcome instanceof Promise)&&!(typeof outcome==='object'&&'then'in outcome)){// eslint-disable-next-line no-console\nconsole.log({request,handler:wares[i],outcome});if(outcome===undefined){throw new Error(`Expected handler.request to return a promise, instead received undefined.`);}throw new Error(`Expected handler.request to return a promise, instead received a synchronous value.`);}}}catch(e){if(_isCacheHandler){setRequestResult(owner.requestId,{isError:true,result:ensureDoc(owner,e,true)});}// eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\noutcome=Promise.reject(e);}const future=createFuture(owner);if(isFuture(outcome)){return curryFuture(owner,outcome,future);}return handleOutcome(owner,outcome,future);}function isFuture(maybe){return Boolean(maybe&&maybe instanceof Promise&&maybe[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_1__.IS_FUTURE]===true);}function createDeferred(){let resolve;let reject;const promise=new Promise((res,rej)=>{resolve=res;reject=rej;});return{resolve,reject,promise};}function upgradePromise(promise,future){promise[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_1__.IS_FUTURE]=true;// eslint-disable-next-line @typescript-eslint/unbound-method\npromise.getStream=future.getStream;// eslint-disable-next-line @typescript-eslint/unbound-method\npromise.abort=future.abort;// eslint-disable-next-line @typescript-eslint/unbound-method\npromise.onFinalize=future.onFinalize;promise.id=future.id;promise.lid=future.lid;return promise;}function createFuture(owner){const deferred=createDeferred();let{promise}=deferred;let cbs;promise=promise.finally(()=>{owner.resolveStream();if(cbs){cbs.forEach(cb=>cb());}});promise.onFinalize=fn=>{cbs=cbs||[];cbs.push(fn);};promise[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_1__.IS_FUTURE]=true;promise.getStream=()=>{return owner.getStream();};promise.abort=reason=>{owner.abort(enhanceReason(reason));};promise.id=owner.requestId;promise.lid=owner.god.identifier;deferred.promise=promise;return deferred;}function upgradeHeaders(headers){headers.clone=()=>{return new Headers(headers);};headers.toJSON=()=>{return Array.from(headers);};return headers;}function cloneResponseProperties(response){const{headers,ok,redirected,status,statusText,type,url}=response;upgradeHeaders(headers);return{headers:headers,ok,redirected,status,statusText,type,url};}class ContextOwner{constructor(request,god,isRoot=false){_defineProperty(this,\"hasSetStream\",false);_defineProperty(this,\"hasSetResponse\",false);_defineProperty(this,\"hasSubscribers\",false);_defineProperty(this,\"stream\",createDeferred());_defineProperty(this,\"response\",null);_defineProperty(this,\"nextCalled\",0);this.isRoot=isRoot;this.requestId=god.id;this.controller=request.controller||god.controller;this.stream.promise.sizeHint=0;if(request.controller){if(request.controller!==god.controller){god.controller.signal.addEventListener('abort',()=>{this.controller.abort(god.controller.signal.reason);});}delete request.controller;}let enhancedRequest=Object.assign({signal:this.controller.signal},request);{if(!request?.cacheOptions?.[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_1__.SkipCache]){request=deepFreeze(request);enhancedRequest=deepFreeze(enhancedRequest);}}this.enhancedRequest=enhancedRequest;this.request=request;this.god=god;this.stream.promise=this.stream.promise.then(stream=>{if(this.god.stream===stream&&this.hasSubscribers){this.god.stream=null;}return stream;});}get hasRequestedStream(){return this.god.hasRequestedStream;}getResponse(){if(this.hasSetResponse){return this.response;}if(this.nextCalled===1){return this.god.response;}return null;}getStream(){if(this.isRoot){this.god.hasRequestedStream=true;}if(!this.hasSetResponse){const hint=this.god.response?.headers?.get('content-length');this.stream.promise.sizeHint=hint?parseInt(hint,10):0;}this.hasSubscribers=true;return this.stream.promise;}abort(reason){this.controller.abort(reason);}setStream(stream){if(!this.hasSetStream){this.hasSetStream=true;if(!(stream instanceof Promise)){this.god.stream=stream;}// @ts-expect-error\nthis.stream.resolve(stream);}}resolveStream(){this.setStream(this.nextCalled===1?this.god.stream:null);}setResponse(response){if(this.hasSetResponse){{throw new Error(`Cannot setResponse when a response has already been set`);}// removed by dead control flow\n{}}this.hasSetResponse=true;if(response instanceof Response){// TODO potentially avoid cloning in prod\nlet responseData=cloneResponseProperties(response);{responseData=deepFreeze(responseData);}this.response=responseData;this.god.response=responseData;const sizeHint=response.headers?.get('content-length');this.stream.promise.sizeHint=sizeHint?parseInt(sizeHint,10):0;}else{this.response=response;this.god.response=response;}}}var _owner=/*#__PURE__*/new WeakMap();class Context{constructor(owner,isCacheHandler){_classPrivateFieldInitSpec(this,_owner,void 0);this.id=owner.requestId;_classPrivateFieldSet(_owner,this,owner);this.request=owner.enhancedRequest;this._isCacheHandler=isCacheHandler;this._finalized=false;}setStream(stream){_classPrivateFieldGet(_owner,this).setStream(stream);}setResponse(response){_classPrivateFieldGet(_owner,this).setResponse(response);}setIdentifier(identifier){(test=>{if(!test){throw new Error(`setIdentifier may only be used synchronously from a CacheHandler`);}})(identifier&&this._isCacheHandler&&!this._finalized);_classPrivateFieldGet(_owner,this).god.identifier=identifier;}get hasRequestedStream(){return _classPrivateFieldGet(_owner,this).hasRequestedStream;}_finalize(){this._finalized=true;}}const BODY_TYPES={type:'string',klass:['Blob','ArrayBuffer','TypedArray','DataView','FormData','URLSearchParams','ReadableStream']};const ValidKeys=new Map([['records','array'],['data','json'],['body',BODY_TYPES],['disableTestWaiter','boolean'],['options','object'],['cacheOptions','object'],['op','string'],['store','object'],['url','string'],['cache',['default','force-cache','no-cache','no-store','only-if-cached','reload']],['credentials',['include','omit','same-origin']],['destination',['','object','audio','audioworklet','document','embed','font','frame','iframe','image','manifest','paintworklet','report','script','sharedworker','style','track','video','worker','xslt']],['headers','headers'],['integrity','string'],['keepalive','boolean'],['method',['QUERY','GET','PUT','PATCH','DELETE','POST','OPTIONS','HEAD','CONNECT','TRACE']],['mode',['same-origin','cors','navigate','no-cors']],['redirect',['error','follow','manual']],['referrer','string'],['signal','AbortSignal'],['controller','AbortController'],['referrerPolicy',['','same-origin','no-referrer','no-referrer-when-downgrade','origin','origin-when-cross-origin','strict-origin','strict-origin-when-cross-origin','unsafe-url']]]);const IS_FROZEN=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_0__.getOrSetGlobal)('IS_FROZEN',Symbol('FROZEN'));const IS_COLLECTION=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_0__.getOrSetGlobal)('IS_COLLECTION',Symbol.for('Collection'));function freezeHeaders(headers){headers.delete=headers.set=headers.append=()=>{throw new Error(`Cannot Mutate Immutatable Headers, use headers.clone to get a copy`);};upgradeHeaders(headers);return headers;}function deepFreeze(value){if(value&&value[IS_FROZEN]){return value;}const _type=typeof value;switch(_type){case'boolean':case'string':case'number':case'symbol':case'undefined':case'bigint':return value;case'function':throw new Error(`Cannot deep-freeze a function`);case'object':{const _niceType=niceTypeOf(value);switch(_niceType){case'array':{if(value[IS_COLLECTION]){return value;}const arr=value.map(deepFreeze);arr[IS_FROZEN]=true;return Object.freeze(arr);}case'null':return value;case'object':Object.keys(value).forEach(key=>{try{value[key]=deepFreeze(value[key]);}catch{// continue\n}});value[IS_FROZEN]=true;return Object.freeze(value);case'headers':return freezeHeaders(value);case'Collection':case'Store':case'AbortSignal':return value;case'date':case'map':case'set':case'error':case'stream':default:// console.log(`Cannot deep-freeze ${_niceType}`);\nreturn value;}}}}function isMaybeContext(request){if(request&&typeof request==='object'){const keys=Object.keys(request);if(keys.length===1&&keys[0]==='request'){return true;}}return false;}function niceTypeOf(v){if(v===null){return'null';}if(typeof v==='string'){return v?'non-empty-string':'empty-string';}if(!v){return typeof v;}if(Array.isArray(v)){return'array';}if(v instanceof Date){return'date';}if(v instanceof Map){return'map';}if(v instanceof Set){return'set';}if(v instanceof Error){return'error';}if(v instanceof ReadableStream||v instanceof WritableStream||v instanceof TransformStream){return'stream';}if(v instanceof Headers){return'headers';}if(typeof v==='object'&&v.constructor&&v.constructor.name!=='Object'){return v.constructor.name;}return typeof v;}function validateKey(key,value,errors){const schema=ValidKeys.get(key);if(!schema&&!IgnoredKeys.has(key)){errors.push(`InvalidKey: '${key}'`);return;}if(schema){if(schema===BODY_TYPES){if(typeof value==='string'||value instanceof ReadableStream){return;}const type=niceTypeOf(value);if(schema.klass.includes(type)){return;}errors.push(`InvalidValue: key 'body' should be a string or one of '${schema.klass.join(\"', '\")}', received ${'<a value of type '+niceTypeOf(value)+'>'}`);return;}if(Array.isArray(schema)){if(!schema.includes(value)){errors.push(`InvalidValue: key ${key} should be one of '${schema.join(\"', '\")}', received ${typeof value==='string'?value:'<a value of type '+niceTypeOf(value)+'>'}`);}return;}else if(schema==='json'){try{JSON.stringify(value);}catch(e){errors.push(`InvalidValue: key ${key} should be a JSON serializable value, but failed to serialize with Error - ${e.message}`);}return;}else if(schema==='headers'){if(!(value instanceof Headers)){errors.push(`InvalidValue: key ${key} should be an instance of Headers, received ${niceTypeOf(value)}`);}return;}else if(schema==='record'){const _type=typeof value;// record must extend plain object or Object.create(null)\nif(!value||_type!=='object'||value.constructor&&value.constructor!==Object){errors.push(`InvalidValue: key ${key} should be a dictionary of string keys to string values, received ${niceTypeOf(value)}`);return;}const keys=Object.keys(value);keys.forEach(k=>{const v=value[k];if(typeof k!=='string'){errors.push(`\\tThe key ${String(k)} on ${key} should be a string key`);}else if(typeof v!=='string'){errors.push(`\\tThe value of ${key}.${k} should be a string not ${niceTypeOf(v)}`);}});return;}else if(schema==='string'){if(typeof value!=='string'||value.length===0){errors.push(`InvalidValue: key ${key} should be a non-empty string, received ${typeof value==='string'?\"''\":typeof value}`);}return;}else if(schema==='object'){if(!value||Array.isArray(value)||typeof value!=='object'){errors.push(`InvalidValue: key ${key} should be an object`);}return;}else if(schema==='boolean'){if(typeof value!=='boolean'){errors.push(`InvalidValue: key ${key} should be a boolean, received ${typeof value}`);}return;}else if(schema==='array'){if(!Array.isArray(value)){errors.push(`InvalidValue: key ${key} should be an array, received ${typeof value}`);}return;}}}const IgnoredKeys=new Set([]);function assertValidRequest(request,isTopLevel){{// handle basic shape\nif(!request){throw new Error(`Expected ${isTopLevel?'RequestManager.request':'next'}(<request>) to be called with a request, but none was provided.`);}if(Array.isArray(request)||typeof request!=='object'){throw new Error(`The \\`request\\` passed to \\`${isTopLevel?'RequestManager.request':'next'}(<request>)\\` should be an object, received \\`${niceTypeOf(request)}\\``);}if(Object.keys(request).length===0){throw new Error(`The \\`request\\` passed to \\`${isTopLevel?'RequestManager.request':'next'}(<request>)\\` was empty (\\`{}\\`). Requests need at least one valid key.`);}// handle accidentally passing context entirely\nif(request instanceof Context){throw new Error(`Expected a request passed to \\`${isTopLevel?'RequestManager.request':'next'}(<request>)\\` but received the previous handler's context instead`);}// handle Object.assign({}, context);\nif(isMaybeContext(request)){throw new Error(`Expected a request passed to \\`${isTopLevel?'RequestManager.request':'next'}(<request>)\\` but received an object with a request key instead.`);}// handle schema\nconst keys=Object.keys(request);const validationErrors=[];const isLegacyRequest=Boolean('op'in request&&!request.url);keys.forEach(key=>{if(isLegacyRequest&&key==='data'){return;}validateKey(key,request[key],validationErrors);});if(validationErrors.length){const error=new Error(`Invalid Request passed to \\`${isTopLevel?'RequestManager.request':'next'}(<request>)\\`.\\n\\nThe following issues were found:\\n\\n\\t${validationErrors.join('\\n\\t')}`);error.errors=validationErrors;throw error;}}}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@ember-data/request/dist/debug-nHWzWIMX.js?");

/***/ }),

/***/ "./node_modules/@ember-data/request/dist/fetch.js":
/*!********************************************************!*\
  !*** ./node_modules/@ember-data/request/dist/fetch.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Fetch)\n/* harmony export */ });\n/* harmony import */ var _debug_nHWzWIMX_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debug-nHWzWIMX.js */ \"./node_modules/@ember-data/request/dist/debug-nHWzWIMX.js\");\n/**\n * A basic Fetch Handler which converts a request into a\n * `fetch` call presuming the response to be `json`.\n *\n * ```ts\n * import Fetch from '@ember-data/request/fetch';\n *\n * manager.use([Fetch]);\n * ```\n *\n * @module @ember-data/request/fetch\n * @main @ember-data/request/fetch\n */// Lazily close over fetch to avoid breaking Mirage\nconst _fetch=typeof fetch!=='undefined'?(...args)=>fetch(...args):typeof FastBoot!=='undefined'?(...args)=>FastBoot.require('node-fetch')(...args):()=>{throw new Error('No Fetch Implementation Found');};// clones a response in a way that should still\n// allow it to stream\nfunction cloneResponse(response,overrides){const props=(0,_debug_nHWzWIMX_js__WEBPACK_IMPORTED_MODULE_0__.f)(response);return new Response(response.body,Object.assign(props,overrides));}let IS_MAYBE_MIRAGE=()=>false;{IS_MAYBE_MIRAGE=()=>Boolean(typeof window!=='undefined'&&(window.server?.pretender||window.fetch.toString().replace(/\\s+/g,'')!=='function fetch() { [native code] }'.replace(/\\s+/g,'')));}const MUTATION_OPS=new Set(['updateRecord','createRecord','deleteRecord']);const ERROR_STATUS_CODE_FOR=new Map([[400,'Bad Request'],[401,'Unauthorized'],[402,'Payment Required'],[403,'Forbidden'],[404,'Not Found'],[405,'Method Not Allowed'],[406,'Not Acceptable'],[407,'Proxy Authentication Required'],[408,'Request Timeout'],[409,'Conflict'],[410,'Gone'],[411,'Length Required'],[412,'Precondition Failed'],[413,'Payload Too Large'],[414,'URI Too Long'],[415,'Unsupported Media Type'],[416,'Range Not Satisfiable'],[417,'Expectation Failed'],[419,'Page Expired'],[420,'Enhance Your Calm'],[421,'Misdirected Request'],[422,'Unprocessable Entity'],[423,'Locked'],[424,'Failed Dependency'],[425,'Too Early'],[426,'Upgrade Required'],[428,'Precondition Required'],[429,'Too Many Requests'],[430,'Request Header Fields Too Large'],[431,'Request Header Fields Too Large'],[450,'Blocked By Windows Parental Controls'],[451,'Unavailable For Legal Reasons'],[500,'Internal Server Error'],[501,'Not Implemented'],[502,'Bad Gateway'],[503,'Service Unavailable'],[504,'Gateway Timeout'],[505,'HTTP Version Not Supported'],[506,'Variant Also Negotiates'],[507,'Insufficient Storage'],[508,'Loop Detected'],[509,'Bandwidth Limit Exceeded'],[510,'Not Extended'],[511,'Network Authentication Required']]);/**\n * A basic handler which converts a request into a\n * `fetch` call presuming the response to be `json`.\n *\n * ```ts\n * import Fetch from '@ember-data/request/fetch';\n *\n * manager.use([Fetch]);\n * ```\n *\n * @class Fetch\n * @public\n */const Fetch={async request(context){let response;try{response=await _fetch(context.request.url,context.request);}catch(e){if(e instanceof DOMException&&e.name==='AbortError'){e.statusText='Aborted';e.status=20;e.isRequestError=true;}else{e.statusText='Unknown Network Error';e.status=0;e.isRequestError=true;}throw e;}const isError=!response.ok||response.status>=400;const op=context.request.op;const isMutationOp=Boolean(op&&MUTATION_OPS.has(op));if(!isError&&!isMutationOp&&response.status!==204&&!response.headers.has('date')){if(IS_MAYBE_MIRAGE()){response.headers.set('date',new Date().toUTCString());}else{const headers=new Headers(response.headers);headers.set('date',new Date().toUTCString());response=cloneResponse(response,{headers});}}context.setResponse(response);if(response.status===204){return null;}let text='';// if we are in a mirage context, we cannot support streaming\nif(IS_MAYBE_MIRAGE()){text=await response.text();}else{const reader=response.body.getReader();const decoder=new TextDecoder();let isStreaming=context.hasRequestedStream;let stream=isStreaming?new TransformStream():null;let writer=stream?.writable.getWriter();if(isStreaming){// Listen for the abort event on the AbortSignal\ncontext.request.signal?.addEventListener('abort',()=>{if(!isStreaming){return;}void stream.writable.abort('Request Aborted');void stream.readable.cancel('Request Aborted');});context.setStream(stream.readable);}while(true){// we manually read the stream instead of using `response.json()`\n// or `response.text()` because if we need to stream the body\n// we need to be able to pass the stream along efficiently.\nconst{done,value}=await reader.read();if(done){if(isStreaming){isStreaming=false;await writer.ready;await writer.close();}break;}text+=decoder.decode(value,{stream:true});// if we are streaming, we want to pass the stream along\nif(isStreaming){await writer.ready;await writer.write(value);}else if(context.hasRequestedStream){const encode=new TextEncoder();isStreaming=true;stream=new TransformStream();// Listen for the abort event on the AbortSignal\n// eslint-disable-next-line @typescript-eslint/no-loop-func\ncontext.request.signal?.addEventListener('abort',()=>{if(!isStreaming){return;}void stream.writable.abort('Request Aborted');void stream.readable.cancel('Request Aborted');});context.setStream(stream.readable);writer=stream.writable.getWriter();await writer.ready;await writer.write(encode.encode(text));await writer.ready;await writer.write(value);}}if(isStreaming){isStreaming=false;await writer.ready;await writer.close();}}// if we are an error, we will want to throw\nif(isError){let errorPayload;try{errorPayload=JSON.parse(text);}catch{// void;\n}// attempt errors discovery\nconst errors=Array.isArray(errorPayload)?errorPayload:isDict(errorPayload)&&Array.isArray(errorPayload.errors)?errorPayload.errors:null;const statusText=response.statusText||ERROR_STATUS_CODE_FOR.get(response.status)||'Unknown Request Error';const msg=`[${response.status} ${statusText}] ${context.request.method??'GET'} (${response.type}) - ${response.url}`;const error=errors?new AggregateError(errors,msg):new Error(msg);error.status=response.status;error.statusText=statusText;error.isRequestError=true;error.code=error.status;error.name=error.statusText.replaceAll(' ','')+'Error';error.content=errorPayload;throw error;}else{return JSON.parse(text);}}};function isDict(v){return v!==null&&typeof v==='object';}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@ember-data/request/dist/fetch.js?");

/***/ }),

/***/ "./node_modules/@ember-data/request/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@ember-data/request/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDeferred: () => (/* reexport safe */ _debug_nHWzWIMX_js__WEBPACK_IMPORTED_MODULE_2__.b),\n/* harmony export */   \"default\": () => (/* binding */ RequestManager),\n/* harmony export */   getPromiseResult: () => (/* reexport safe */ _debug_nHWzWIMX_js__WEBPACK_IMPORTED_MODULE_2__.d),\n/* harmony export */   setPromiseResult: () => (/* reexport safe */ _debug_nHWzWIMX_js__WEBPACK_IMPORTED_MODULE_2__.s)\n/* harmony export */ });\n/* harmony import */ var _warp_drive_core_types_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @warp-drive/core-types/runtime */ \"./node_modules/@warp-drive/core-types/dist/runtime.js\");\n/* harmony import */ var _warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @warp-drive/core-types/-private */ \"./node_modules/@warp-drive/core-types/dist/-private.js\");\n/* harmony import */ var _debug_nHWzWIMX_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./debug-nHWzWIMX.js */ \"./node_modules/@ember-data/request/dist/debug-nHWzWIMX.js\");\n/* harmony import */ var _embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../@embroider/macros/src/addon/es-compat2 */ \"./node_modules/@embroider/macros/src/addon/es-compat2.js\");\n/* harmony import */ var _ember_test_waiters__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ember/test-waiters */ \"./node_modules/@ember/test-waiters/dist/index.js\");\nfunction _classPrivateFieldInitSpec(e,t,a){_checkPrivateRedeclaration(e,t),t.set(e,a);}function _checkPrivateRedeclaration(e,t){if(t.has(e))throw new TypeError(\"Cannot initialize the same private elements twice on an object\");}function _classPrivateFieldGet(s,a){return s.get(_assertClassBrand(s,a));}function _assertClassBrand(e,t,n){if(\"function\"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError(\"Private element is not present on this object\");}/* eslint-disable no-irregular-whitespace *//**\n *\n  <p align=\"center\">\n  <img\n    class=\"project-logo\"\n    src=\"https://raw.githubusercontent.com/emberjs/data/4612c9354e4c54d53327ec2cf21955075ce21294/ember-data-logo-light.svg#gh-light-mode-only\"\n    alt=\"EmberData RequestManager\"\n    width=\"240px\"\n    title=\"EmberData RequestManager\"\n    />\n</p>\n\n<p align=\"center\">⚡️ a simple abstraction over fetch to enable easy management of request/response flows</p>\n\nThis package provides [*Ember*‍**Data**](https://github.com/emberjs/data/)'s `RequestManager`, a framework agnostic library that can be integrated with any Javascript application to make [fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) happen.\n\n- [Installation](#installation)\n- [Basic Usage](#🚀-basic-usage)\n- [Architecture](#🪜-architecture)\n- [Usage](#usage)\n  - [Making Requests](#making-requests)\n    - [Using The Response](#using-the-response)\n  - [Request Handlers](#handling-requests)\n    - [Handling Errors](#handling-errors)\n    - [Handling Abort](#handling-abort)\n    - [Stream Currying](#stream-currying)\n    - [Automatic Currying](#automatic-currying-of-stream-and-response)\n  - [Using as a Service](#using-as-a-service)\n    - [Using with `@ember-data/store`](#using-with-ember-datastore)\n    - [Using with `ember-data`](#using-with-ember-data)\n\n---\n\n## Installation\n\nInstall using your javascript package manager of choice. For instance with [pnpm](https://pnpm.io/)\n\n```no-highlight\npnpm add @ember-data/request\n```\n\n---\n\n## 🚀 Basic Usage\n\nA `RequestManager` provides a request/response flow in which configured handlers are successively given the opportunity to handle, modify, or pass-along a request.\n\nThe RequestManager on its own does not know how to fulfill requests. For this we must register at least one handler. A basic `Fetch` handler is provided that will take the request options provided and execute `fetch`.\n\n```ts\nimport RequestManager from '@ember-data/request';\nimport Fetch from '@ember-data/request/fetch';\nimport { apiUrl } from './config';\n\n// ... create manager and add our Fetch handler\nconst manager = new RequestManager()\n  .use([Fetch]);\n\n// ... execute a request\nconst response = await manager.request({\n  url: `${apiUrl}/users`\n});\n```\n\n---\n\n## 🪜 Architecture\n\nA `RequestManager` receives a request and manages fulfillment via configured handlers. It may be used standalone from the rest of *Ember*‍**Data** and is not specific to any library or framework.\n\nEach handler may choose to fulfill the request using some source of data or to pass the request along to other handlers.\n\nThe same or a separate instance of a `RequestManager` may also be used to fulfill requests issued by [*Ember*‍**Data**{Store}](https://github.com/emberjs/data/tree/main/packages/store)\n\nWhen the same instance is used by both this allows for simple coordination throughout the application. Requests issued by the Store will use the in-memory cache\nand return hydrated responses, requests issued directly to the RequestManager\nwill skip the in-memory cache and return raw responses.\n\n---\n\n## Usage\n\n```ts\nconst userList = await manager.request({\n  url: `/api/v1/users.list`\n});\n\nconst users = userList.content;\n```\n\n---\n\n### Making Requests\n\n`RequestManager` has a single asyncronous method as it's API: `request`\n\n```ts\nclass RequestManager {\n  request<T>(req: RequestInfo): Future<T>;\n}\n```\n\n`manager.request(<RequestInfo>)` accepts an object containing the information\nnecessary for the request to be handled successfully.\n\nThese options extend the [options](https://developer.mozilla.org/en-US/docs/Web/API/fetch#parameters) provided to `fetch`, and can accept a [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request/Request). All properties accepted by Request options and fetch options are valid.\n\n```ts\ninterface RequestInfo extends FetchOptions {\n  op?: string;\n  store?: Store;\n\n  url: string;\n   // data that a handler should convert into\n   // the query (GET) or body (POST)\n  data?: Record<string, unknown>;\n\n  // options specifically intended for handlers\n  // to utilize to process the request\n  options?: Record<string, unknown>;\n}\n```\n\n> **note**\n> providing a `signal` is unnecessary as an `AbortController` is automatically provided if none is present.\n\n---\n\n#### Using the Response\n\n`manager.request` returns a `Future`, which allows access to limited information about the request while it is still pending and fulfills with the final state when the request completes and the response has been read.\n\n```ts\nconst usersFuture = manager.request({\n  url: `/api/v1/users.list`\n});\n```\n\nA `Future` is cancellable via `abort`.\n\n```ts\nusersFuture.abort();\n```\n\nHandlers may *optionally* expose a ReadableStream to the `Future` for streaming data; however, when doing so the handler should not resolve until it has fully read the response stream itself.\n\n```ts\ninterface Future<T> extends Promise<StructuredDocument<T>> {\n  abort(): void;\n\n  async getStream(): ReadableStream | null;\n}\n```\n\nA Future resolves or rejects with a `StructuredDocument`.\n\n```ts\ninterface StructuredDocument<T> {\n  request: RequestInfo;\n  response: ResponseInfo | null;\n  content?: T;\n  error?: Error;\n}\n```\n\nThe `RequestInfo` specified by `document.request` is the same as originally provided to `manager.request`. If any handler fulfilled this request using different request info it is not represented here. This contract helps to ensure that `retry` and `caching` are possible since the original arguments are correctly preserved. This also allows handlers to \"fork\" the request or fulfill from multiple sources without the details of fulfillment muddying the original request.\n\nThe `ResponseInfo` is a serializable fulfilled subset of a [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response) if set via `setResponse`. If no response was ever set this will be `null`.\n\n```ts\ninterface ResponseInfo {\n  headers?: Record<string, string>;\n  ok?: boolean;\n  redirected?: boolean;\n  status?: HTTPStatusCode;\n  statusText?: string;\n  type?: 'basic' | 'cors';\n  url?: string;\n}\n```\n\n---\n\n### Request Handlers\n\nRequests are fulfilled by handlers. A handler receives the request context\nas well as a `next` function with which to pass along a request to the next\nhandler if it so chooses.\n\nA handler may be any object with a `request` method. This allows both stateful and non-stateful\nhandlers to be utilized.\n\nIf a handler calls `next`, it receives a `Future` which resolves to a `StructuredDocument`\nthat it can then compose how it sees fit with its own response.\n\n```ts\n\ntype NextFn<P> = (req: RequestInfo) => Future<P>;\n\ninterface Handler {\n  async request<T>(context: RequestContext, next: NextFn<P>): T;\n}\n```\n\n`RequestContext` contains a readonly version of the RequestInfo as well as a few methods for building up the `StructuredDocument` and `Future` that will be part of the response.\n\n```ts\ninterface RequestContext<T> {\n  readonly request: RequestInfo;\n\n  setStream(stream: ReadableStream | Promise<ReadableStream>): void;\n  setResponse(response: Response | ResponseInfo): void;\n}\n```\n\nA basic `fetch` handler with support for streaming content updates while\nthe download is still underway might look like the following, where we use\n[`response.clone()`](https://developer.mozilla.org/en-US/docs/Web/API/Response/clone) to `tee` the `ReadableStream` into two streams.\n\nA more efficient handler might read from the response stream, building up the\nresponse content before passing along the chunk downstream.\n\n```ts\nconst FetchHandler = {\n  async request(context) {\n    const response = await fetch(context.request);\n    context.setResponse(reponse);\n    context.setStream(response.clone().body);\n\n    return response.json();\n  }\n}\n```\n\nRequest handlers are registered by configuring the manager via `use`\n\n```ts\nmanager.use([Handler1, Handler2])\n```\n\nHandlers will be invoked in the order they are registered (\"fifo\", first-in first-out), and may only be registered up until the first request is made. It is recommended but not required to register all handlers at one time in order to ensure explicitly visible handler ordering.\n\n---\n\n#### Handling Errors\n\nEach handler in the chain can catch errors from upstream and choose to\neither handle the error, re-throw the error, or throw a new error.\n\n```ts\nconst MAX_RETRIES = 5;\n\nconst Handler = {\n  async request(context, next) {\n    let attempts = 0;\n\n    while (attempts < MAX_RETRIES) {\n      attempts++;\n      try {\n        const response = await next(context.request);\n        return response;\n      } catch (e) {\n        if (isTimeoutError(e) && attempts < MAX_RETRIES) {\n          // retry request\n          continue;\n        }\n        // rethrow if it is not a timeout error\n        throw e;\n      }\n    }\n  }\n}\n```\n\n---\n\n#### Handling Abort\n\nAborting a request will reject the current handler in the chain. However,\nevery handler can potentially catch this error. If your handler needs to\nseparate AbortError from other Error types, it is recommended to check\n`context.request.signal.aborted` (or if a custom controller was supplied `controller.signal.aborted`).\n\nIn this manner it is possible for a request to recover from an abort and\nstill proceed; however, as a best practice this should be used for necessary\ncleanup only and the original AbortError rethrown if the abort signal comes\nfrom the root controller.\n\n**AbortControllers are Always Present and Always Entangled**\n\nIf the initial request does not supply an [AbortController](https://developer.mozilla.org/en-US/docs/Web/API/AbortController), one will be generated.\n\nThe [signal](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal) for this controller is automatically added to the request passed into the first handler.\n\nEach handler has the option to supply a new controller to the request when calling `next`. If a new controller is provided it will be automatically\nentangled with the root controller. If the root controller aborts, so will\nany entangled controllers.\n\nIf an entangled controller aborts, the root controller will not abort. This\nallows for advanced request-flow scenarios to abort subsections of the request tree without aborting the entire request.\n\n---\n\n#### Stream Currying\n\n`RequestManager.request` and `next` differ from `fetch` in one **crucial detail** in that the outer Promise resolves only once the response stream has been processed.\n\nFor context, it helps to understand a few of the use-cases that RequestManager\nis intended to allow.\n\n- to manage and return streaming content (such as video files)\n- to fulfill a request from multiple sources or by splitting one request into multiple requests\n  - for instance one API call for a user and another for the user's friends\n  - or e.g. fulfilling part of the request from one source (one API, in-memory, localStorage, IndexedDB\n   etc.) and the rest from another source (a different API, a WebWorker, etc.)\n- to coalesce multiple requests\n- to decorate a request with additional info\n  - e.g. an Auth handler that ensures the correct tokens or headers or cookies are attached.\n\n\n`await fetch(<req>)` resolves at the moment headers are received. This allows for the body of the request to be processed as a stream by application\ncode *while chunks are still being received by the browser*.\n\nWhen an app chooses to `await response.json()` what occurs is the browser reads the stream to completion and then returns the result. Additionally, this stream may only be read **once**.\n\nThe `RequestManager` preserves this ability to subscribe to and utilize the stream by either the application or the handler – thereby delivering the full power and flexibility of native APIs – without restricting developers in ways that lead to complicated workarounds.\n\nEach handler may call `setStream` only once, but may do so *at any time* until the promise that the handler returns has resolved. The associated promise returned by calling `future.getStream` will resolve with the stream set by `setStream` if that method is called, or `null` if that method\nhas not been called by the time that the handler's request method has resolved.\n\nHandlers that do not create a stream of their own, but which call `next`, should defensively pipe the stream forward. While this is not required (see automatic currying below) it is better to do so in most cases as otherwise the stream may not become available to downstream handlers or the application until the upstream handler has fully read it.\n\n```ts\ncontext.setStream(future.getStream());\n```\n\nHandlers that either call `next` multiple times or otherwise have reason to create multiple  fetch requests should either choose to return no stream, meaningfully combine the streams, or select a single prioritized stream.\n\nOf course, any handler may choose to read and handle the stream, and return either no stream or a different stream in the process.\n\n---\n\n#### Automatic Currying of Stream and Response\n\nIn order to simplify the common case for handlers which decorate a request, if `next` is called only a single time and `setResponse` was never called by the handler, the response set by the next handler in the chain will be applied to that handler's outcome. For instance, this makes the following pattern possible `return (await next(<req>)).content;`.\n\nSimilarly, if `next` is called only a single time and neither `setStream` nor `getStream` was called, we automatically curry the stream from the future returned by `next` onto the future returned by the handler.\n\nFinally, if the return value of a handler is a `Future`, we curry `content` and `errors` as well, thus enabling the simplest form `return next(<req>)`.\n\nIn the case of the `Future` being returned, `Stream` proxying is automatic and immediate and does not wait for the `Future` to resolve.\n\n---\n\n### Using as a Service\n\nMost applications will desire to have a single `RequestManager` instance, which can be achieved using module-state patterns for singletons, or for [Ember](https://emberjs.com) applications by exporting the manager as a [service](https://guides.emberjs.com/release/services/).\n\n*services/request.ts*\n```ts\nimport RequestManager from '@ember-data/request';\nimport Fetch from '@ember-data/request/fetch';\nimport Auth from 'ember-simple-auth/ember-data-handler';\n\nexport default class extends RequestManager {\n  constructor(createArgs) {\n    super(createArgs);\n    this.use([Auth, Fetch]);\n  }\n}\n```\n\n---\n\n#### Using with `@ember-data/store`\n\nTo have a request service unique to a Store:\n\n```ts\nimport Store, { CacheHandler } from '@ember-data/store';\nimport RequestManager from '@ember-data/request';\nimport Fetch from '@ember-data/request/fetch';\n\nclass extends Store {\n  requestManager = new RequestManager()\n    .use([Fetch])\n    .useCache(CacheHandler);\n}\n```\n\n---\n\n#### Using with `ember-data`\n\nIf using the package [ember-data](https://github.com/emberjs/data/tree/main/packages/-ember-data),\nthe following configuration will automatically be done in order to preserve the\nlegacy [Adapter](https://github.com/emberjs/data/tree/main/packages/adapter) and\n[Serializer](https://github.com/emberjs/data/tree/main/packages/serializer) behavior.\nAdditional handlers or a service injection like the above would need to be done by the\nconsuming application in order to make broader use of `RequestManager`.\n\n```ts\nimport Store from 'ember-data/store';\nimport { CacheHandler } from '@ember-data/store';\nimport RequestManager from '@ember-data/request';\nimport Fetch from '@ember-data/request/fetch';\nimport { LegacyNetworkHandler } from '@ember-data/legacy-compat';\n\nexport default class extends Store {\n  requestManager = new RequestManager()\n    .use([LegacyNetworkHandler, Fetch])\n    .useCache(CacheHandler);\n}\n```\n\nTo provide a different configuration, import and extend `ember-data/store`. The\ndefault configuration will be ignored if the `requestManager` property is set,\nthough the store will still register the CacheHandler.\n\nFor usage of the store's `requestManager` via `store.request(<req>)` see the\n[Store](https://api.emberjs.com/ember-data/release/modules/@ember-data%2Fstore) documentation.\n\n *\n * @module @ember-data/request\n * @main @ember-data/request\n *//**\n * ```js\n * import RequestManager from '@ember-data/request';\n * ```\n *\n * A RequestManager provides a request/response flow in which configured\n * handlers are successively given the opportunity to handle, modify, or\n * pass-along a request.\n *\n * ```ts\n * interface RequestManager {\n *   request<T>(req: RequestInfo): Future<T>;\n * }\n * ```\n *\n * For example:\n *\n * ```ts\n * import RequestManager from '@ember-data/request';\n * import Fetch from '@ember-data/request/fetch';\n * import Auth from 'ember-simple-auth/ember-data-handler';\n * import Config from './config';\n *\n * const { apiUrl } = Config;\n *\n * // ... create manager\n * const manager = new RequestManager().use([Auth, Fetch]);\n *\n * // ... execute a request\n * const response = await manager.request({\n *   url: `${apiUrl}/users`\n * });\n * ```\n *\n * ### Futures\n *\n * The return value of `manager.request` is a `Future`, which allows\n * access to limited information about the request while it is still\n * pending and fulfills with the final state when the request completes.\n *\n * A `Future` is cancellable via `abort`.\n *\n * Handlers may optionally expose a `ReadableStream` to the `Future` for\n * streaming data; however, when doing so the future should not resolve\n * until the response stream is fully read.\n *\n * ```ts\n * interface Future<T> extends Promise<StructuredDocument<T>> {\n *   abort(): void;\n *\n *   async getStream(): ReadableStream | null;\n * }\n * ```\n *\n * ### StructuredDocuments\n *\n * A Future resolves with a `StructuredDataDocument` or rejects with a `StructuredErrorDocument`.\n *\n * ```ts\n * interface StructuredDataDocument<T> {\n *   request: ImmutableRequestInfo;\n *   response: ImmutableResponseInfo;\n *   content: T;\n * }\n * interface StructuredErrorDocument extends Error {\n *   request: ImmutableRequestInfo;\n *   response: ImmutableResponseInfo;\n *   error: string | object;\n * }\n * type StructuredDocument<T> = StructuredDataDocument<T> | StructuredErrorDocument;\n * ```\n *\n * @class RequestManager\n * @public\n */var _handlers=/*#__PURE__*/new WeakMap();class RequestManager{/**\n   * A map of pending requests from request.id to their\n   * associated CacheHandler promise.\n   *\n   * This queue is managed by the CacheHandler\n   *\n   * @internal\n   */constructor(options){_classPrivateFieldInitSpec(this,_handlers,[]);Object.assign(this,options);this._pending=new Map();this._deduped=new Map();}/**\n   * Register a handler to use for primary cache intercept.\n   *\n   * Only one such handler may exist. If using the same\n   * RequestManager as the Store instance the Store\n   * registers itself as a Cache handler.\n   *\n   * @method useCache\n   * @public\n   * @param {Handler[]} cacheHandler\n   * @return {ThisType}\n   */useCache(cacheHandler){{if(this._hasCacheHandler){throw new Error(`\\`RequestManager.useCache(<handler>)\\` May only be invoked once.`);}if(Object.isFrozen(_classPrivateFieldGet(_handlers,this))){throw new Error(`\\`RequestManager.useCache(<handler>)\\` May only be invoked prior to any request having been made.`);}this._hasCacheHandler=true;}cacheHandler[_debug_nHWzWIMX_js__WEBPACK_IMPORTED_MODULE_2__.I]=true;_classPrivateFieldGet(_handlers,this).unshift(cacheHandler);return this;}/**\n   * Register handler(s) to use when a request is issued.\n   *\n   * Handlers will be invoked in the order they are registered.\n   * Each Handler is given the opportunity to handle the request,\n   * curry the request, or pass along a modified request.\n   *\n   * @method use\n   * @public\n   * @param {Handler[]} newHandlers\n   * @return {ThisType}\n   */use(newHandlers){const handlers=_classPrivateFieldGet(_handlers,this);{if(Object.isFrozen(handlers)){throw new Error(`Cannot add a Handler to a RequestManager after a request has been made`);}if(!Array.isArray(newHandlers)){throw new Error(`\\`RequestManager.use(<Handler[]>)\\` expects an array of handlers, but was called with \\`${typeof newHandlers}\\``);}newHandlers.forEach((handler,index)=>{if(!handler||typeof handler!=='object'||typeof handler.request!=='function'){throw new Error(`\\`RequestManager.use(<Handler[]>)\\` expected to receive an array of handler objects with request methods, by the handler at index ${index} does not conform.`);}});}handlers.push(...newHandlers);return this;}/**\n   * Issue a Request.\n   *\n   * Returns a Future that fulfills with a StructuredDocument\n   *\n   * @method request\n   * @public\n   * @param {RequestInfo} request\n   * @return {Future}\n   */request(request){const handlers=_classPrivateFieldGet(_handlers,this);{if(!Object.isFrozen(handlers)){Object.freeze(handlers);}(0,_debug_nHWzWIMX_js__WEBPACK_IMPORTED_MODULE_2__.a)(request,true);}const controller=request.controller||new AbortController();if(request.controller){delete request.controller;}const requestId=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_1__.peekUniversalTransient)('REQ_ID')??0;(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_1__.setUniversalTransient)('REQ_ID',requestId+1);const context={controller,response:null,stream:null,hasRequestedStream:false,id:requestId,identifier:null};const promise=(0,_debug_nHWzWIMX_js__WEBPACK_IMPORTED_MODULE_2__.e)(handlers,request,0,context);// the cache handler will set the result of the request synchronously\n// if it is able to fulfill the request from the cache\nconst cacheResult=(0,_debug_nHWzWIMX_js__WEBPACK_IMPORTED_MODULE_2__.g)(requestId);{if(!request.disableTestWaiter){const{waitForPromise}=(0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(_ember_test_waiters__WEBPACK_IMPORTED_MODULE_4__);const newPromise=waitForPromise(promise);const finalPromise=(0,_debug_nHWzWIMX_js__WEBPACK_IMPORTED_MODULE_2__.u)(newPromise.then(result=>{(0,_debug_nHWzWIMX_js__WEBPACK_IMPORTED_MODULE_2__.s)(finalPromise,{isError:false,result});(0,_debug_nHWzWIMX_js__WEBPACK_IMPORTED_MODULE_2__.c)(requestId);return result;},error=>{(0,_debug_nHWzWIMX_js__WEBPACK_IMPORTED_MODULE_2__.s)(finalPromise,{isError:true,result:error});(0,_debug_nHWzWIMX_js__WEBPACK_IMPORTED_MODULE_2__.c)(requestId);throw error;}),promise);if(cacheResult){(0,_debug_nHWzWIMX_js__WEBPACK_IMPORTED_MODULE_2__.s)(finalPromise,cacheResult);}return finalPromise;}}// const promise1 = store.request(myRequest);\n// const promise2 = store.request(myRequest);\n// promise1 === promise2; // false\n// either we need to make promise1 === promise2, or we need to make sure that\n// we need to have a way to key from request to result\n// such that we can lookup the result here and return it if it exists\nconst finalPromise=(0,_debug_nHWzWIMX_js__WEBPACK_IMPORTED_MODULE_2__.u)(promise.then(result=>{(0,_debug_nHWzWIMX_js__WEBPACK_IMPORTED_MODULE_2__.s)(finalPromise,{isError:false,result});(0,_debug_nHWzWIMX_js__WEBPACK_IMPORTED_MODULE_2__.c)(requestId);return result;},error=>{(0,_debug_nHWzWIMX_js__WEBPACK_IMPORTED_MODULE_2__.s)(finalPromise,{isError:true,result:error});(0,_debug_nHWzWIMX_js__WEBPACK_IMPORTED_MODULE_2__.c)(requestId);throw error;}),promise);if(cacheResult){(0,_debug_nHWzWIMX_js__WEBPACK_IMPORTED_MODULE_2__.s)(finalPromise,cacheResult);}return finalPromise;}static create(options){return new this(options);}}// @ts-expect-error adding to globalThis\nglobalThis.setWarpDriveLogging=_warp_drive_core_types_runtime__WEBPACK_IMPORTED_MODULE_0__.setLogging;// @ts-expect-error adding to globalThis\nglobalThis.getWarpDriveRuntimeConfig=_warp_drive_core_types_runtime__WEBPACK_IMPORTED_MODULE_0__.getRuntimeConfig;\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@ember-data/request/dist/index.js?");

/***/ }),

/***/ "./node_modules/@ember-data/serializer/dist/transform.js":
/*!***************************************************************!*\
  !*** ./node_modules/@ember-data/serializer/dist/transform.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BooleanTransform: () => (/* binding */ BooleanTransform),\n/* harmony export */   DateTransform: () => (/* binding */ DateTransform),\n/* harmony export */   NumberTransform: () => (/* binding */ NumberTransform),\n/* harmony export */   StringTransform: () => (/* binding */ StringTransform),\n/* harmony export */   \"default\": () => (/* binding */ Transform)\n/* harmony export */ });\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/object */ \"@ember/object\");\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_object__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _warp_drive_core_types_symbols__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @warp-drive/core-types/symbols */ \"./node_modules/@warp-drive/core-types/dist/symbols.js\");\nfunction _defineProperty(e,r,t){return(r=_toPropertyKey(r))in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e;}function _toPropertyKey(t){var i=_toPrimitive(t,\"string\");return\"symbol\"==typeof i?i:i+\"\";}function _toPrimitive(t,r){if(\"object\"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||\"default\");if(\"object\"!=typeof i)return i;throw new TypeError(\"@@toPrimitive must return a primitive value.\");}return(\"string\"===r?String:Number)(t);}/**\n  @module @ember-data/serializer\n*//**\n  The `Transform` class is used to serialize and deserialize model\n  attributes when they are saved or loaded from an\n  adapter. Subclassing `Transform` is useful for creating custom\n  attributes. All subclasses of `Transform` must implement a\n  `serialize` and a `deserialize` method.\n\n  Example\n\n  ```app/transforms/temperature.js\n\n  // Converts centigrade in the JSON to fahrenheit in the app\n  export default class TemperatureTransform {\n    deserialize(serialized, options) {\n      return (serialized *  1.8) + 32;\n    }\n\n    serialize(deserialized, options) {\n      return (deserialized - 32) / 1.8;\n    }\n\n    static create() {\n      return new this();\n    }\n  }\n  ```\n\n  Usage\n\n  ```app/models/requirement.js\n  import Model, { attr } from '@ember-data/model';\n\n  export default class RequirementModel extends Model {\n    @attr('string') name;\n    @attr('temperature') temperature;\n  }\n  ```\n\n  The options passed into the `attr` function when the attribute is\n  declared on the model is also available in the transform.\n\n  ```app/models/post.js\n  import Model, { attr } from '@ember-data/model';\n\n  export default class PostModel extends Model {\n    @attr('string') title;\n    @attr('markdown', {\n      markdown: {\n        gfm: false,\n        sanitize: true\n      }\n    })\n    markdown;\n  }\n  ```\n\n  ```app/transforms/markdown.js\n  export default class MarkdownTransform {\n    serialize(deserialized, options) {\n      return deserialized.raw;\n    }\n\n    deserialize(serialized, options) {\n      let markdownOptions = options.markdown || {};\n\n      return marked(serialized, markdownOptions);\n    }\n\n    static create() {\n      return new this();\n    }\n  }\n  ```\n\n  @class Transform\n  @public\n *//**\n  When given a deserialized value from a record attribute this\n  method must return the serialized value.\n\n  Example\n\n  ```javascript\n  serialize(deserialized, options) {\n    return deserialized ? null : Number(deserialized);\n  }\n  ```\n\n  @method serialize\n  @public\n  @param deserialized The deserialized value\n  @param options hash of options passed to `attr`\n  @return The serialized value\n*//**\n  When given a serialized value from a JSON object this method must\n  return the deserialized value for the record attribute.\n\n  Example\n\n  ```javascript\n  deserialize(serialized, options) {\n    return empty(serialized) ? null : Number(serialized);\n  }\n  ```\n\n  @method deserialize\n  @public\n  @param serialized The serialized value\n  @param options hash of options passed to `attr`\n  @return The deserialized value\n*/const Transform=(_ember_object__WEBPACK_IMPORTED_MODULE_0___default());/**\n  @module @ember-data/serializer\n*//**\n  The `BooleanTransform` class is used to serialize and deserialize\n  boolean attributes on Ember Data record objects. This transform is\n  used when `boolean` is passed as the type parameter to the\n  [attr](/ember-data/release/functions/@ember-data%2Fmodel/attr) function.\n\n  Usage\n\n  ```app/models/user.js\n  import Model, { attr } from '@ember-data/model';\n\n  export default class UserModel extends Model {\n    @attr('boolean') isAdmin;\n    @attr('string') name;\n    @attr('string') email;\n  }\n  ```\n\n  By default, the boolean transform only allows for values of `true` or\n  `false`. You can opt into allowing `null` values for\n  boolean attributes via `attr('boolean', { allowNull: true })`\n\n  ```app/models/user.js\n  import Model, { attr } from '@ember-data/model';\n\n  export default class UserModel extends Model {\n    @attr('string') email;\n    @attr('string') username;\n    @attr('boolean', { allowNull: true }) wantsWeeklyEmail;\n  }\n  ```\n\n  @class BooleanTransform\n  @public\n */class BooleanTransform{deserialize(serialized,options){if((serialized===null||serialized===undefined)&&options?.allowNull===true){return null;}if(typeof serialized==='boolean'){return serialized;}else if(typeof serialized==='string'){return /^(true|t|1)$/i.test(serialized);}else if(typeof serialized==='number'){return serialized===1;}else{return false;}}serialize(deserialized,options){if((deserialized===null||deserialized===undefined)&&options?.allowNull===true){return null;}return Boolean(deserialized);}static create(){return new this();}}/**\n  @module @ember-data/serializer\n*//**\n The `DateTransform` class is used to serialize and deserialize\n date attributes on Ember Data record objects. This transform is used\n when `date` is passed as the type parameter to the\n [attr](/ember-data/release/functions/@ember-data%2Fmodel/attr) function. It uses the [`ISO 8601`](https://en.wikipedia.org/wiki/ISO_8601)\n standard.\n\n ```app/models/score.js\n import Model, { attr, belongsTo } from '@ember-data/model';\n\n export default class ScoreModel extends Model {\n    @attr('number') value;\n    @belongsTo('player') player;\n    @attr('date') date;\n  }\n ```\n\n @class DateTransform\n  @public\n */class DateTransform{constructor(){_defineProperty(this,_warp_drive_core_types_symbols__WEBPACK_IMPORTED_MODULE_1__.TransformName,'date');}deserialize(serialized,_options){if(typeof serialized==='string'){let offset=serialized.indexOf('+');if(offset!==-1&&serialized.length-5===offset){offset+=3;return new Date(serialized.slice(0,offset)+':'+serialized.slice(offset));}return new Date(serialized);}else if(typeof serialized==='number'){return new Date(serialized);}else if(serialized===null||serialized===undefined){// if the value is null return null\n// if the value is not present in the data return undefined\nreturn serialized;}else{return null;}}serialize(date,_options){// @ts-expect-error isNaN accepts date as it is coercible\nif(date instanceof Date&&!isNaN(date)){return date.toISOString();}else{return null;}}static create(){return new this();}}/**\n  @module @ember-data/serializer\n*/function isNumber(value){return value===value&&value!==Infinity&&value!==-Infinity;}/**\n  The `NumberTransform` class is used to serialize and deserialize\n  numeric attributes on Ember Data record objects. This transform is\n  used when `number` is passed as the type parameter to the\n  [attr](/ember-data/release/functions/@ember-data%2Fmodel/attr) function.\n\n  Usage\n\n  ```app/models/score.js\n  import Model, { attr, belongsTo } from '@ember-data/model';\n\n  export default class ScoreModel extends Model {\n    @attr('number') value;\n    @belongsTo('player') player;\n    @attr('date') date;\n  }\n  ```\n\n  @class NumberTransform\n  @public\n */class NumberTransform{constructor(){_defineProperty(this,_warp_drive_core_types_symbols__WEBPACK_IMPORTED_MODULE_1__.TransformName,'number');}deserialize(serialized,_options){if(serialized===''||serialized===null||serialized===undefined){return null;}else{const transformed=Number(serialized);return isNumber(transformed)?transformed:null;}}serialize(deserialized,_options){if(deserialized===''||deserialized===null||deserialized===undefined){return null;}else{const transformed=Number(deserialized);return isNumber(transformed)?transformed:null;}}static create(){return new this();}}/**\n  @module @ember-data/serializer\n*//**\n  The `StringTransform` class is used to serialize and deserialize\n  string attributes on Ember Data record objects. This transform is\n  used when `string` is passed as the type parameter to the\n  [attr](/ember-data/release/functions/@ember-data%2Fmodel/attr) function.\n\n  Usage\n\n  ```app/models/user.js\n  import Model, { attr, belongsTo } from '@ember-data/model';\n\n  export default class UserModel extends Model {\n    @attr('boolean') isAdmin;\n    @attr('string') name;\n    @attr('string') email;\n  }\n  ```\n\n  @class StringTransform\n  @public\n */class StringTransform{constructor(){_defineProperty(this,_warp_drive_core_types_symbols__WEBPACK_IMPORTED_MODULE_1__.TransformName,'string');}deserialize(serialized,_options){return!serialized&&serialized!==''?null:String(serialized);}serialize(deserialized,_options){return!deserialized&&deserialized!==''?null:String(deserialized);}static create(){return new this();}}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@ember-data/serializer/dist/transform.js?");

/***/ }),

/***/ "./node_modules/@ember-data/store/dist/-private.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ember-data/store/dist/-private.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ARRAY_SIGNAL: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.A),\n/* harmony export */   CacheHandler: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.C),\n/* harmony export */   CollectionRecordArray: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.k),\n/* harmony export */   LiveArray: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.I),\n/* harmony export */   MUTATE: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.M),\n/* harmony export */   RecordArrayManager: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.R),\n/* harmony export */   RelatedCollection: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.w),\n/* harmony export */   SOURCE: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.l),\n/* harmony export */   Store: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.S),\n/* harmony export */   StoreMap: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.t),\n/* harmony export */   _clearCaches: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__._),\n/* harmony export */   _deprecatingNormalize: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.v),\n/* harmony export */   coerceId: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.h),\n/* harmony export */   constructResource: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.g),\n/* harmony export */   ensureStringId: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.j),\n/* harmony export */   fastPush: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.m),\n/* harmony export */   isDocumentIdentifier: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.f),\n/* harmony export */   isStableIdentifier: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.i),\n/* harmony export */   log: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.x),\n/* harmony export */   logGroup: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.y),\n/* harmony export */   notifyArray: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.n),\n/* harmony export */   peekCache: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.p),\n/* harmony export */   recordIdentifierFor: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.r),\n/* harmony export */   removeRecordDataFor: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.o),\n/* harmony export */   setCacheFor: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.u),\n/* harmony export */   setRecordIdentifier: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.q),\n/* harmony export */   storeFor: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.s)\n/* harmony export */ });\n/* harmony import */ var _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./many-array-BwVo-2vv.js */ \"./node_modules/@ember-data/store/dist/many-array-BwVo-2vv.js\");\n\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@ember-data/store/dist/-private.js?");

/***/ }),

/***/ "./node_modules/@ember-data/store/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@ember-data/store/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CacheHandler: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.C),\n/* harmony export */   \"default\": () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.S),\n/* harmony export */   recordIdentifierFor: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.r),\n/* harmony export */   setIdentifierForgetMethod: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   setIdentifierGenerationMethod: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   setIdentifierResetMethod: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.d),\n/* harmony export */   setIdentifierUpdateMethod: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   setKeyInfoForResource: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.e),\n/* harmony export */   storeFor: () => (/* reexport safe */ _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__.s)\n/* harmony export */ });\n/* harmony import */ var _many_array_BwVo_2vv_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./many-array-BwVo-2vv.js */ \"./node_modules/@ember-data/store/dist/many-array-BwVo-2vv.js\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/debug */ \"@ember/debug\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ember_data_request_utils_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember-data/request-utils/string */ \"./node_modules/@ember-data/request-utils/dist/string.js\");\n\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@ember-data/store/dist/index.js?");

/***/ }),

/***/ "./node_modules/@ember-data/store/dist/many-array-BwVo-2vv.js":
/*!********************************************************************!*\
  !*** ./node_modules/@ember-data/store/dist/many-array-BwVo-2vv.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ ARRAY_SIGNAL),\n/* harmony export */   C: () => (/* binding */ CacheHandler),\n/* harmony export */   I: () => (/* binding */ IdentifierArray),\n/* harmony export */   M: () => (/* binding */ MUTATE),\n/* harmony export */   R: () => (/* binding */ RecordArrayManager),\n/* harmony export */   S: () => (/* binding */ Store),\n/* harmony export */   _: () => (/* binding */ _clearCaches),\n/* harmony export */   a: () => (/* binding */ setIdentifierGenerationMethod),\n/* harmony export */   b: () => (/* binding */ setIdentifierUpdateMethod),\n/* harmony export */   c: () => (/* binding */ setIdentifierForgetMethod),\n/* harmony export */   d: () => (/* binding */ setIdentifierResetMethod),\n/* harmony export */   e: () => (/* binding */ setKeyInfoForResource),\n/* harmony export */   f: () => (/* binding */ isDocumentIdentifier),\n/* harmony export */   g: () => (/* binding */ constructResource),\n/* harmony export */   h: () => (/* binding */ coerceId),\n/* harmony export */   i: () => (/* binding */ isStableIdentifier),\n/* harmony export */   j: () => (/* binding */ ensureStringId),\n/* harmony export */   k: () => (/* binding */ Collection),\n/* harmony export */   l: () => (/* binding */ SOURCE),\n/* harmony export */   m: () => (/* binding */ fastPush),\n/* harmony export */   n: () => (/* binding */ notifyArray),\n/* harmony export */   o: () => (/* binding */ removeRecordDataFor),\n/* harmony export */   p: () => (/* binding */ peekCache),\n/* harmony export */   q: () => (/* binding */ setRecordIdentifier),\n/* harmony export */   r: () => (/* binding */ recordIdentifierFor),\n/* harmony export */   s: () => (/* binding */ storeFor),\n/* harmony export */   t: () => (/* binding */ StoreMap),\n/* harmony export */   u: () => (/* binding */ setCacheFor),\n/* harmony export */   v: () => (/* binding */ normalizeModelName),\n/* harmony export */   w: () => (/* binding */ RelatedCollection),\n/* harmony export */   x: () => (/* binding */ log),\n/* harmony export */   y: () => (/* binding */ logGroup)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"@ember/debug\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @warp-drive/core-types/request */ \"./node_modules/@warp-drive/core-types/dist/request.js\");\n/* harmony import */ var _warp_drive_core_types_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @warp-drive/core-types/runtime */ \"./node_modules/@warp-drive/core-types/dist/runtime.js\");\n/* harmony import */ var _warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @warp-drive/core-types/-private */ \"./node_modules/@warp-drive/core-types/dist/-private.js\");\n/* harmony import */ var _ember_runloop__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ember/runloop */ \"@ember/runloop\");\n/* harmony import */ var _ember_runloop__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_ember_runloop__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ember-data/tracking/-private */ \"./node_modules/@ember-data/tracking/dist/-private.js\");\n/* harmony import */ var _warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @warp-drive/core-types/identifier */ \"./node_modules/@warp-drive/core-types/dist/identifier.js\");\n/* harmony import */ var _ember_data_request_utils_string__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ember-data/request-utils/string */ \"./node_modules/@ember-data/request-utils/dist/string.js\");\n/* harmony import */ var _ember_data_tracking__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ember-data/tracking */ \"./node_modules/@ember-data/tracking/dist/index.js\");\n/* harmony import */ var _embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../@embroider/macros/src/addon/runtime */ \"./node_modules/@embroider/macros/src/addon/runtime.js\");\nvar _IdentifierArray;function _classPrivateFieldInitSpec(e,t,a){_checkPrivateRedeclaration(e,t),t.set(e,a);}function _classPrivateFieldGet(s,a){return s.get(_assertClassBrand(s,a));}function _classPrivateFieldSet(s,a,r){return s.set(_assertClassBrand(s,a),r),r;}function _defineProperty(e,r,t){return(r=_toPropertyKey(r))in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e;}function _toPropertyKey(t){var i=_toPrimitive(t,\"string\");return\"symbol\"==typeof i?i:i+\"\";}function _toPrimitive(t,r){if(\"object\"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||\"default\");if(\"object\"!=typeof i)return i;throw new TypeError(\"@@toPrimitive must return a primitive value.\");}return(\"string\"===r?String:Number)(t);}function _classPrivateMethodInitSpec(e,a){_checkPrivateRedeclaration(e,a),a.add(e);}function _checkPrivateRedeclaration(e,t){if(t.has(e))throw new TypeError(\"Cannot initialize the same private elements twice on an object\");}function _assertClassBrand(e,t,n){if(\"function\"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError(\"Private element is not present on this object\");}/**\n  @module @ember-data/store\n*/function coerceId(id){{let normalized;if(id===null||id===undefined||id===''){normalized=null;}else{normalized=String(id);}(0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(`The resource id '<${typeof id}> ${String(id)} ' is not normalized. Update your application code to use '${JSON.stringify(normalized)}' instead.`,normalized===id,{id:'ember-data:deprecate-non-strict-id',until:'6.0',for:'ember-data',since:{available:'4.13',enabled:'5.3'}});return normalized;}// removed by dead control flow\n{}// removed by dead control flow\n{}}function ensureStringId(id){let normalized=null;if(typeof id==='string'){normalized=id.length>0?id:null;}else if(typeof id==='number'&&!isNaN(id)){normalized=String(id);}(test=>{if(!test){throw new Error(`Expected id to be a string or number, received ${String(id)}`);}})(normalized!==null);return normalized;}function normalizeModelName(type){{const result=(0,_ember_data_request_utils_string__WEBPACK_IMPORTED_MODULE_7__.dasherize)(type);(0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(`The resource type '${type}' is not normalized. Update your application code to use '${result}' instead of '${type}'.`,result===type,{id:'ember-data:deprecate-non-strict-types',until:'6.0',for:'ember-data',since:{available:'4.13',enabled:'5.3'}});return result;}// removed by dead control flow\n{}}/**\n  @module @ember-data/store\n*/function installPolyfill(){const isFastBoot=typeof FastBoot!=='undefined';const CRYPTO=isFastBoot?FastBoot.require('crypto'):globalThis.crypto;if(!CRYPTO.randomUUID){// we might be able to optimize this by requesting more bytes than we need at a time\nconst rng=function(){// WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\nconst rnds8=new Uint8Array(16);if(!CRYPTO.getRandomValues&&!isFastBoot){throw new Error(`Unable to generate bytes for UUID`);}return CRYPTO.getRandomValues?CRYPTO.getRandomValues(rnds8):CRYPTO.randomFillSync(rnds8);};/*\n     * Convert array of 16 byte values to UUID string format of the form:\n     * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n     */const byteToHex=[];for(let i=0;i<256;++i){byteToHex[i]=(i+0x100).toString(16).substr(1);}const bytesToUuid=function(buf){const bth=byteToHex;// join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\nreturn[bth[buf[0]],bth[buf[1]],bth[buf[2]],bth[buf[3]],'-',bth[buf[4]],bth[buf[5]],'-',bth[buf[6]],bth[buf[7]],'-',bth[buf[8]],bth[buf[9]],'-',bth[buf[10]],bth[buf[11]],bth[buf[12]],bth[buf[13]],bth[buf[14]],bth[buf[15]]].join('');};CRYPTO.randomUUID=function uuidv4(){const rnds=rng();// Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\nrnds[6]=rnds[6]&0x0f|0x40;rnds[8]=rnds[8]&0x3f|0x80;return bytesToUuid(rnds);};}}function isResource(resource){return Boolean(resource&&typeof resource==='object');}function hasProp(resource,prop){return Boolean(isResource(resource)&&prop in resource&&typeof resource[prop]==='string'&&resource[prop].length);}function hasLid(resource){return hasProp(resource,'lid');}function hasId(resource){return hasProp(resource,'id')||Boolean(isResource(resource)&&'id'in resource&&typeof resource.id==='number');}function hasType(resource){return hasProp(resource,'type');}/**\n  @module @ember-data/store\n*/const DOCUMENTS=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.getOrSetGlobal)('DOCUMENTS',new Set());function isStableIdentifier(identifier){return identifier[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_6__.CACHE_OWNER]!==undefined;}function isDocumentIdentifier(identifier){return DOCUMENTS.has(identifier);}const isFastBoot=typeof FastBoot!=='undefined';const _crypto=isFastBoot?FastBoot.require('crypto'):globalThis.crypto;function uuidv4(){(test=>{if(!test){throw new Error('crypto.randomUUID needs to be avaliable. Some browsers incorrectly disallow it in insecure contexts. You maybe want to enable the polyfill: https://github.com/emberjs/data#randomuuid-polyfill');}})(typeof _crypto.randomUUID==='function');return _crypto.randomUUID();}function freeze(obj){if(typeof Object.freeze==='function'){return Object.freeze(obj);}return obj;}// type IdentifierTypeLookup = { all: Set<StableRecordIdentifier>; id: Map<string, StableRecordIdentifier> };\n// type IdentifiersByType = Map<string, IdentifierTypeLookup>;\nfunction setIdentifierGenerationMethod(method){(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.setTransient)('configuredGenerationMethod',method);}function setIdentifierUpdateMethod(method){(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.setTransient)('configuredUpdateMethod',method);}function setIdentifierForgetMethod(method){(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.setTransient)('configuredForgetMethod',method);}function setIdentifierResetMethod(method){(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.setTransient)('configuredResetMethod',method);}function setKeyInfoForResource(method){(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.setTransient)('configuredKeyInfoMethod',method);}// Map<type, Map<id, lid>>\n// TODO can we just delete this?\nconst NEW_IDENTIFIERS=new Map();// TODO @runspired maybe needs peekTransient ?\nlet IDENTIFIER_CACHE_ID=0;function updateTypeIdMapping(typeMap,identifier,id){let idMap=typeMap.get(identifier.type);if(!idMap){idMap=new Map();typeMap.set(identifier.type,idMap);}idMap.set(id,identifier.lid);}function defaultUpdateMethod(identifier,data,bucket){if(bucket==='record'){(test=>{if(!test){throw new Error(`Expected identifier to be a StableRecordIdentifier`);}})(isStableIdentifier(identifier));if(!identifier.id&&hasId(data)){updateTypeIdMapping(NEW_IDENTIFIERS,identifier,data.id);}}}function defaultKeyInfoMethod(resource,known){// TODO RFC something to make this configurable\nconst id=hasId(resource)?coerceId(resource.id):null;const type=hasType(resource)?normalizeModelName(resource.type):known?known.type:null;(test=>{if(!test){throw new Error(`Expected keyInfoForResource to provide a type for the resource`);}})(type);return{type,id};}function defaultGenerationMethod(data,bucket){if(bucket==='record'){if(hasLid(data)){return data.lid;}(test=>{if(!test){throw new Error(`Cannot generate an identifier for a resource without a type`);}})(hasType(data));if(hasId(data)){const type=normalizeModelName(data.type);const lid=NEW_IDENTIFIERS.get(type)?.get(data.id);return lid||`@lid:${type}-${data.id}`;}return uuidv4();}else if(bucket==='document'){if(!data.url){return null;}if(!data.method||data.method.toUpperCase()==='GET'){return data.url;}return null;}(test=>{{throw new Error(`Unknown bucket ${bucket}`);}})();}function defaultEmptyCallback(...args){}function defaultMergeMethod(a,_b,_c){return a;}let DEBUG_MAP;{DEBUG_MAP=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.getOrSetGlobal)('DEBUG_MAP',new WeakMap());}/**\n * Each instance of {Store} receives a unique instance of a IdentifierCache.\n *\n * This cache is responsible for assigning or retrieving the unique identify\n * for arbitrary resource data encountered by the store. Data representing\n * a unique resource or record should always be represented by the same\n * identifier.\n *\n * It can be configured by consuming applications.\n *\n * @class IdentifierCache\n   @public\n */class IdentifierCache{constructor(){// we cache the user configuredGenerationMethod at init because it must\n// be configured prior and is not allowed to be changed\nthis._generate=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.peekTransient)('configuredGenerationMethod')||defaultGenerationMethod;this._update=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.peekTransient)('configuredUpdateMethod')||defaultUpdateMethod;this._forget=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.peekTransient)('configuredForgetMethod')||defaultEmptyCallback;this._reset=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.peekTransient)('configuredResetMethod')||defaultEmptyCallback;this._merge=defaultMergeMethod;this._keyInfoForResource=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.peekTransient)('configuredKeyInfoMethod')||defaultKeyInfoMethod;this._id=IDENTIFIER_CACHE_ID++;this._cache={resources:new Map(),resourcesByType:Object.create(null),documents:new Map(),polymorphicLidBackMap:new Map()};}/**\n   * Internal hook to allow management of merge conflicts with identifiers.\n   *\n   * we allow late binding of this private internal merge so that\n   * the cache can insert itself here to handle elimination of duplicates\n   *\n   * @method __configureMerge\n   * @private\n   */__configureMerge(method){this._merge=method||defaultMergeMethod;}upgradeIdentifier(resource){return this._getRecordIdentifier(resource,2);}/**\n   * @method _getRecordIdentifier\n   * @private\n   */_getRecordIdentifier(resource,shouldGenerate){{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_IDENTIFIERS||globalThis.getWarpDriveRuntimeConfig().debug.LOG_IDENTIFIERS){// eslint-disable-next-line no-console\nconsole.groupCollapsed(`Identifiers: ${shouldGenerate?'Generating':'Peeking'} Identifier`,resource);}}// short circuit if we're already the stable version\nif(isStableIdentifier(resource)){{// TODO should we instead just treat this case as a new generation skipping the short circuit?\nif(!this._cache.resources.has(resource.lid)||this._cache.resources.get(resource.lid)!==resource){throw new Error(`The supplied identifier ${JSON.stringify(resource)} does not belong to this store instance`);}}{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_IDENTIFIERS||globalThis.getWarpDriveRuntimeConfig().debug.LOG_IDENTIFIERS){// eslint-disable-next-line no-console\nconsole.log(`Identifiers: cache HIT - Stable ${resource.lid}`);// eslint-disable-next-line no-console\nconsole.groupEnd();}}return resource;}// the resource is unknown, ask the application to identify this data for us\nconst lid=this._generate(resource,'record');{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_IDENTIFIERS||globalThis.getWarpDriveRuntimeConfig().debug.LOG_IDENTIFIERS){// eslint-disable-next-line no-console\nconsole.log(`Identifiers: ${lid?'no ':''}lid ${lid?lid+' ':''}determined for resource`,resource);}}let identifier=/*#__NOINLINE__*/getIdentifierFromLid(this._cache,lid,resource);if(identifier!==null){{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_IDENTIFIERS||globalThis.getWarpDriveRuntimeConfig().debug.LOG_IDENTIFIERS){// eslint-disable-next-line no-console\nconsole.groupEnd();}}return identifier;}if(shouldGenerate===0){{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_IDENTIFIERS||globalThis.getWarpDriveRuntimeConfig().debug.LOG_IDENTIFIERS){// eslint-disable-next-line no-console\nconsole.groupEnd();}}return;}// if we still don't have an identifier, time to generate one\nif(shouldGenerate===2){resource.lid=lid;resource[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_6__.CACHE_OWNER]=this._id;identifier=/*#__NOINLINE__*/makeStableRecordIdentifier(resource,'record',false);}else{// we lie a bit here as a memory optimization\nconst keyInfo=this._keyInfoForResource(resource,null);keyInfo.lid=lid;keyInfo[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_6__.CACHE_OWNER]=this._id;identifier=/*#__NOINLINE__*/makeStableRecordIdentifier(keyInfo,'record',false);}addResourceToCache(this._cache,identifier);{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_IDENTIFIERS||globalThis.getWarpDriveRuntimeConfig().debug.LOG_IDENTIFIERS){// eslint-disable-next-line no-console\nconsole.groupEnd();}}return identifier;}/**\n   * allows us to peek without generating when needed\n   * useful for the \"create\" case when we need to see if\n   * we are accidentally overwritting something\n   *\n   * @method peekRecordIdentifier\n   * @param resource\n   * @return {StableRecordIdentifier | undefined}\n   * @private\n   */peekRecordIdentifier(resource){return this._getRecordIdentifier(resource,0);}/**\n    Returns the DocumentIdentifier for the given Request, creates one if it does not yet exist.\n    Returns `null` if the request does not have a `cacheKey` or `url`.\n     @method getOrCreateDocumentIdentifier\n    @param request\n    @return {StableDocumentIdentifier | null}\n    @public\n  */getOrCreateDocumentIdentifier(request){let cacheKey=request.cacheOptions?.key;if(!cacheKey){cacheKey=this._generate(request,'document');}if(!cacheKey){return null;}let identifier=this._cache.documents.get(cacheKey);if(identifier===undefined){identifier={lid:cacheKey};{Object.freeze(identifier);}DOCUMENTS.add(identifier);this._cache.documents.set(cacheKey,identifier);}return identifier;}/**\n    Returns the Identifier for the given Resource, creates one if it does not yet exist.\n     Specifically this means that we:\n     - validate the `id` `type` and `lid` combo against known identifiers\n    - return an object with an `lid` that is stable (repeated calls with the same\n      `id` + `type` or `lid` will return the same `lid` value)\n    - this referential stability of the object itself is guaranteed\n     @method getOrCreateRecordIdentifier\n    @param resource\n    @return {StableRecordIdentifier}\n    @public\n  */getOrCreateRecordIdentifier(resource){return this._getRecordIdentifier(resource,1);}/**\n   Returns a new Identifier for the supplied data. Call this method to generate\n   an identifier when a new resource is being created local to the client and\n   potentially does not have an `id`.\n    Delegates generation to the user supplied `GenerateMethod` if one has been provided\n   with the signature `generateMethod({ type }, 'record')`.\n    @method createIdentifierForNewRecord\n   @param data\n   @return {StableRecordIdentifier}\n   @public\n  */createIdentifierForNewRecord(data){const newLid=this._generate(data,'record');const identifier=/*#__NOINLINE__*/makeStableRecordIdentifier({id:data.id||null,type:data.type,lid:newLid,[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_6__.CACHE_OWNER]:this._id},'record',true);// populate our unique table\n{if(this._cache.resources.has(identifier.lid)){throw new Error(`The lid generated for the new record is not unique as it matches an existing identifier`);}}/*#__NOINLINE__*/addResourceToCache(this._cache,identifier);{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_IDENTIFIERS||globalThis.getWarpDriveRuntimeConfig().debug.LOG_IDENTIFIERS){// eslint-disable-next-line no-console\nconsole.log(`Identifiers: created identifier ${String(identifier)} for newly generated resource`,data);}}return identifier;}/**\n   Provides the opportunity to update secondary lookup tables for existing identifiers\n   Called after an identifier created with `createIdentifierForNewRecord` has been\n   committed.\n    Assigned `id` to an `Identifier` if `id` has not previously existed; however,\n   attempting to change the `id` or calling update without providing an `id` when\n   one is missing will throw an error.\n     - sets `id` (if `id` was previously `null`)\n    - `lid` and `type` MUST NOT be altered post creation\n     If a merge occurs, it is possible the returned identifier does not match the originally\n    provided identifier. In this case the abandoned identifier will go through the usual\n    `forgetRecordIdentifier` codepaths.\n     @method updateRecordIdentifier\n    @param identifierObject\n    @param data\n    @return {StableRecordIdentifier}\n    @public\n  */updateRecordIdentifier(identifierObject,data){let identifier=this.getOrCreateRecordIdentifier(identifierObject);const keyInfo=this._keyInfoForResource(data,identifier);let existingIdentifier=/*#__NOINLINE__*/detectMerge(this._cache,keyInfo,identifier,data);const hadLid=hasLid(data);if(!existingIdentifier){// If the incoming type does not match the identifier type, we need to create an identifier for the incoming\n// data so we can merge the incoming data with the existing identifier, see #7325 and #7363\nif(identifier.type!==keyInfo.type){if(hadLid){// Strip the lid to ensure we force a new identifier creation\ndelete data.lid;}existingIdentifier=this.getOrCreateRecordIdentifier(data);}}if(existingIdentifier){const generatedIdentifier=identifier;identifier=this._mergeRecordIdentifiers(keyInfo,generatedIdentifier,existingIdentifier,data);// make sure that the `lid` on the data we are processing matches the lid we kept\nif(hadLid){data.lid=identifier.lid;}{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_IDENTIFIERS||globalThis.getWarpDriveRuntimeConfig().debug.LOG_IDENTIFIERS){// eslint-disable-next-line no-console\nconsole.log(`Identifiers: merged identifiers ${generatedIdentifier.lid} and ${existingIdentifier.lid} for resource into ${identifier.lid}`,data);}}}const id=identifier.id;/*#__NOINLINE__*/performRecordIdentifierUpdate(identifier,keyInfo,data,this._update);const newId=identifier.id;// add to our own secondary lookup table\nif(id!==newId&&newId!==null){{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_IDENTIFIERS||globalThis.getWarpDriveRuntimeConfig().debug.LOG_IDENTIFIERS){// eslint-disable-next-line no-console\nconsole.log(`Identifiers: updated id for identifier ${identifier.lid} from '${String(id)}' to '${String(newId)}' for resource`,data);}}const typeSet=this._cache.resourcesByType[identifier.type];(test=>{if(!test){throw new Error(`Expected to find a typeSet for ${identifier.type}`);}})(typeSet);typeSet.id.set(newId,identifier);if(id!==null){typeSet.id.delete(id);}}else{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_IDENTIFIERS||globalThis.getWarpDriveRuntimeConfig().debug.LOG_IDENTIFIERS){// eslint-disable-next-line no-console\nconsole.log(`Identifiers: updated identifier ${identifier.lid} resource`,data);}}return identifier;}/**\n   * @method _mergeRecordIdentifiers\n   * @private\n   */_mergeRecordIdentifiers(keyInfo,identifier,existingIdentifier,data){(test=>{if(!test){throw new Error(`Expected keyInfo to contain an id`);}})(hasId(keyInfo));// delegate determining which identifier to keep to the configured MergeMethod\nconst kept=this._merge(identifier,existingIdentifier,data);const abandoned=kept===identifier?existingIdentifier:identifier;// get any backreferences before forgetting this identifier, as it will be removed from the cache\n// and we will no longer be able to find them\nconst abandonedBackReferences=this._cache.polymorphicLidBackMap.get(abandoned.lid);// delete the backreferences for the abandoned identifier so that forgetRecordIdentifier\n// does not try to remove them.\nif(abandonedBackReferences)this._cache.polymorphicLidBackMap.delete(abandoned.lid);// cleanup the identifier we no longer need\nthis.forgetRecordIdentifier(abandoned);// ensure a secondary cache entry for the original lid for the abandoned identifier\nthis._cache.resources.set(abandoned.lid,kept);// backReferences let us know which other identifiers are pointing at this identifier\n// so we can delete them later if we forget this identifier\nconst keptBackReferences=this._cache.polymorphicLidBackMap.get(kept.lid)??[];keptBackReferences.push(abandoned.lid);// update the backreferences from the abandoned identifier to be for the kept identifier\nif(abandonedBackReferences){abandonedBackReferences.forEach(lid=>{keptBackReferences.push(lid);this._cache.resources.set(lid,kept);});}this._cache.polymorphicLidBackMap.set(kept.lid,keptBackReferences);return kept;}/**\n   Provides the opportunity to eliminate an identifier from secondary lookup tables\n   as well as eliminates it from ember-data's own lookup tables and book keeping.\n    Useful when a record has been deleted and the deletion has been persisted and\n   we do not care about the record anymore. Especially useful when an `id` of a\n   deleted record might be reused later for a new record.\n    @method forgetRecordIdentifier\n   @param identifierObject\n   @public\n  */forgetRecordIdentifier(identifierObject){const identifier=this.getOrCreateRecordIdentifier(identifierObject);const typeSet=this._cache.resourcesByType[identifier.type];(test=>{if(!test){throw new Error(`Expected to find a typeSet for ${identifier.type}`);}})(typeSet);if(identifier.id!==null){typeSet.id.delete(identifier.id);}this._cache.resources.delete(identifier.lid);typeSet.lid.delete(identifier.lid);const backReferences=this._cache.polymorphicLidBackMap.get(identifier.lid);if(backReferences){backReferences.forEach(lid=>{this._cache.resources.delete(lid);});this._cache.polymorphicLidBackMap.delete(identifier.lid);}{identifier[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_6__.DEBUG_STALE_CACHE_OWNER]=identifier[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_6__.CACHE_OWNER];}identifier[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_6__.CACHE_OWNER]=undefined;this._forget(identifier,'record');{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_IDENTIFIERS||globalThis.getWarpDriveRuntimeConfig().debug.LOG_IDENTIFIERS){// eslint-disable-next-line no-console\nconsole.log(`Identifiers: released identifier ${identifierObject.lid}`);}}}destroy(){NEW_IDENTIFIERS.clear();this._cache.documents.forEach(identifier=>{DOCUMENTS.delete(identifier);});this._reset();}}function makeStableRecordIdentifier(recordIdentifier,bucket,clientOriginated){{// we enforce immutability in dev\n//  but preserve our ability to do controlled updates to the reference\nlet wrapper={type:recordIdentifier.type,lid:recordIdentifier.lid,get id(){return recordIdentifier.id;}};const proto={get[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_6__.CACHE_OWNER](){return recordIdentifier[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_6__.CACHE_OWNER];},set[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_6__.CACHE_OWNER](value){recordIdentifier[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_6__.CACHE_OWNER]=value;},get[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_6__.DEBUG_STALE_CACHE_OWNER](){return recordIdentifier[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_6__.DEBUG_STALE_CACHE_OWNER];},set[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_6__.DEBUG_STALE_CACHE_OWNER](value){recordIdentifier[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_6__.DEBUG_STALE_CACHE_OWNER]=value;},get[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_6__.DEBUG_CLIENT_ORIGINATED](){return clientOriginated;},get[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_6__.DEBUG_IDENTIFIER_BUCKET](){return bucket;}};Object.defineProperty(proto,'toString',{enumerable:false,value:()=>{const{type,id,lid}=recordIdentifier;return`${clientOriginated?'[CLIENT_ORIGINATED] ':''}${String(type)}:${String(id)} (${lid})`;}});Object.defineProperty(proto,'toJSON',{enumerable:false,value:()=>{const{type,id,lid}=recordIdentifier;return{type,id,lid};}});Object.setPrototypeOf(wrapper,proto);DEBUG_MAP.set(wrapper,recordIdentifier);wrapper=freeze(wrapper);return wrapper;}// removed by dead control flow\n{}}function performRecordIdentifierUpdate(identifier,keyInfo,data,updateFn){{const{id,type}=keyInfo;// get the mutable instance behind our proxy wrapper\nconst wrapper=identifier;identifier=DEBUG_MAP.get(wrapper);if(hasLid(data)){const lid=data.lid;if(lid!==identifier.lid){throw new Error(`The 'lid' for a RecordIdentifier cannot be updated once it has been created. Attempted to set lid for '${wrapper.lid}' to '${lid}'.`);}}if(id&&identifier.id!==null&&identifier.id!==id){// here we warn and ignore, as this may be a mistake, but we allow the user\n// to have multiple cache-keys pointing at a single lid so we cannot error\n(0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.warn)(`The 'id' for a RecordIdentifier should not be updated once it has been set. Attempted to set id for '${wrapper.lid}' to '${id}'.`,false,{id:'ember-data:multiple-ids-for-identifier'});}// TODO consider just ignoring here to allow flexible polymorphic support\nif(type&&type!==identifier.type){throw new Error(`The 'type' for a RecordIdentifier cannot be updated once it has been set. Attempted to set type for '${wrapper.lid}' to '${type}'.`);}updateFn(wrapper,data,'record');}// upgrade the ID, this is a \"one time only\" ability\n// for the multiple-cache-key scenario we \"could\"\n// use a heuristic to guess the best id for display\n// (usually when `data.id` is available and `data.attributes` is not)\nif(data.id!==undefined){identifier.id=coerceId(data.id);}}function detectMerge(cache,keyInfo,identifier,data){const newId=keyInfo.id;const{id,type,lid}=identifier;const typeSet=cache.resourcesByType[identifier.type];// if the IDs are present but do not match\n// then check if we have an existing identifier\n// for the newer ID.\nif(id!==null&&id!==newId&&newId!==null){const existingIdentifier=typeSet&&typeSet.id.get(newId);return existingIdentifier!==undefined?existingIdentifier:false;}else{const newType=keyInfo.type;// If the ids and type are the same but lid is not the same, we should trigger a merge of the identifiers\n// we trigger a merge of the identifiers\n// though probably we should just throw an error here\nif(id!==null&&id===newId&&newType===type&&hasLid(data)&&data.lid!==lid){return getIdentifierFromLid(cache,data.lid,data)||false;// If the lids are the same, and ids are the same, but types are different we should trigger a merge of the identifiers\n}else if(id!==null&&id===newId&&newType&&newType!==type&&hasLid(data)&&data.lid===lid){const newTypeSet=cache.resourcesByType[newType];const existingIdentifier=newTypeSet&&newTypeSet.id.get(newId);return existingIdentifier!==undefined?existingIdentifier:false;}}return false;}function getIdentifierFromLid(cache,lid,resource){const identifier=cache.resources.get(lid);{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_IDENTIFIERS||globalThis.getWarpDriveRuntimeConfig().debug.LOG_IDENTIFIERS){// eslint-disable-next-line no-console\nconsole.log(`Identifiers: cache ${identifier?'HIT':'MISS'} - Non-Stable ${lid}`,resource);}}return identifier||null;}function addResourceToCache(cache,identifier){cache.resources.set(identifier.lid,identifier);let typeSet=cache.resourcesByType[identifier.type];if(!typeSet){typeSet={lid:new Map(),id:new Map()};cache.resourcesByType[identifier.type]=typeSet;}typeSet.lid.set(identifier.lid,identifier);if(identifier.id){typeSet.id.set(identifier.id,identifier);}}const TEXT_COLORS={TEXT:'inherit',notify:['white','white','inherit','magenta','inherit'],'reactive-ui':['white','white','inherit','magenta','inherit'],graph:['white','white','inherit','magenta','inherit'],request:['white','white','inherit','magenta','inherit'],cache:['white','white','inherit','magenta','inherit']};const BG_COLORS={TEXT:'transparent',notify:['dimgray','cadetblue','transparent','transparent','transparent'],'reactive-ui':['dimgray','cadetblue','transparent','transparent','transparent'],graph:['dimgray','cadetblue','transparent','transparent','transparent'],request:['dimgray','cadetblue','transparent','transparent','transparent'],cache:['dimgray','cadetblue','transparent','transparent','transparent']};const NOTIFY_BORDER={TEXT:0,notify:[3,2,0,0,0],'reactive-ui':[3,2,0,0,0],graph:[3,2,0,0,0],request:[3,2,0,0,0],cache:[3,2,0,0,0]};const LIGHT_DARK_ALT={lightgreen:'green',green:'lightgreen'};function badge(isLight,color,bgColor,border){return[`color: ${correctColor(isLight,color)}; background-color: ${correctColor(isLight,bgColor)}; padding: ${border}px ${2*border}px; border-radius: ${border}px;`,`color: ${TEXT_COLORS.TEXT}; background-color: ${BG_COLORS.TEXT};`];}function colorForBucket(isLight,scope,bucket){if(scope==='notify'){return bucket==='added'?badge(isLight,'lightgreen','transparent',0):bucket==='removed'?badge(isLight,'red','transparent',0):badge(isLight,TEXT_COLORS[scope][2],BG_COLORS[scope][2],NOTIFY_BORDER[scope][2]);}if(scope==='reactive-ui'){return bucket==='created'?badge(isLight,'lightgreen','transparent',0):bucket==='disconnected'?badge(isLight,'red','transparent',0):badge(isLight,TEXT_COLORS[scope][2],BG_COLORS[scope][2],NOTIFY_BORDER[scope][2]);}if(scope==='cache'){return bucket==='inserted'?badge(isLight,'lightgreen','transparent',0):bucket==='removed'?badge(isLight,'red','transparent',0):badge(isLight,TEXT_COLORS[scope][2],BG_COLORS[scope][2],NOTIFY_BORDER[scope][2]);}return badge(isLight,TEXT_COLORS[scope][3],BG_COLORS[scope][3],NOTIFY_BORDER[scope][3]);}function logGroup(scope,prefix,subScop1,subScop2,subScop3,subScop4){// eslint-disable-next-line no-console\nconsole.groupCollapsed(..._log(scope,prefix,subScop1,subScop2,subScop3,subScop4));}function log(scope,prefix,subScop1,subScop2,subScop3,subScop4){// eslint-disable-next-line no-console\nconsole.log(..._log(scope,prefix,subScop1,subScop2,subScop3,subScop4));}function correctColor(isLight,color){if(!isLight){return color;}return color in LIGHT_DARK_ALT?LIGHT_DARK_ALT[color]:color;}function isLightMode(){if(window?.matchMedia?.('(prefers-color-scheme: light)').matches){return true;}return false;}function _log(scope,prefix,subScop1,subScop2,subScop3,subScop4){const isLight=isLightMode();switch(scope){case'reactive-ui':case'notify':{const scopePath=prefix?`[${prefix}] ${scope}`:scope;const path=subScop4?`${subScop3}.${subScop4}`:subScop3;return[`%c@warp%c-%cdrive%c %c${scopePath}%c %c${subScop1}%c %c${subScop2}%c %c${path}%c`,...badge(isLight,'lightgreen','transparent',0),...badge(isLight,'magenta','transparent',0),...badge(isLight,TEXT_COLORS[scope][0],BG_COLORS[scope][0],NOTIFY_BORDER[scope][0]),...badge(isLight,TEXT_COLORS[scope][1],BG_COLORS[scope][1],NOTIFY_BORDER[scope][1]),...badge(isLight,TEXT_COLORS[scope][2],BG_COLORS[scope][2],NOTIFY_BORDER[scope][2]),...colorForBucket(isLight,scope,path)];}case'cache':{const scopePath=prefix?`${scope} (${prefix})`:scope;return[`%c@warp%c-%cdrive%c %c${scopePath}%c %c${subScop1}%c %c${subScop2}%c %c${subScop3}%c %c${subScop4}%c`,...badge(isLight,'lightgreen','transparent',0),...badge(isLight,'magenta','transparent',0),...badge(isLight,TEXT_COLORS[scope][0],BG_COLORS[scope][0],NOTIFY_BORDER[scope][0]),...badge(isLight,TEXT_COLORS[scope][1],BG_COLORS[scope][1],NOTIFY_BORDER[scope][1]),...badge(isLight,TEXT_COLORS[scope][2],BG_COLORS[scope][2],NOTIFY_BORDER[scope][2]),...colorForBucket(isLight,scope,subScop3),...badge(isLight,TEXT_COLORS[scope][4],BG_COLORS[scope][4],NOTIFY_BORDER[scope][4])];}}return[];}/**\n * @module @ember-data/store\n */function urlFromLink(link){if(typeof link==='string')return link;return link.href;}/**\n * A Document is a class that wraps the response content from a request to the API\n * returned by `Cache.put` or `Cache.peek`, converting resource-identifiers into\n * record instances.\n *\n * It is not directly instantiated by the user, and its properties should not\n * be directly modified. Whether individual properties are mutable or not is\n * determined by the record instance itself.\n *\n * @public\n * @class ReactiveDocument\n */var _ReactiveDocument_brand=/*#__PURE__*/new WeakSet();class ReactiveDocument{/**\n   * The links object for this document, if any\n   *\n   * e.g.\n   *\n   * ```\n   * {\n   *   self: '/articles?page[number]=3',\n   * }\n   * ```\n   *\n   * @property links\n   * @type {object|undefined} - a links object\n   * @public\n   *//**\n   * The primary data for this document, if any.\n   *\n   * If this document has no primary data (e.g. because it is an error document)\n   * this property will be `undefined`.\n   *\n   * For collections this will be an array of record instances,\n   * for single resource requests it will be a single record instance or null.\n   *\n   * @property data\n   * @public\n   * @type {object|Array<object>|null|undefined} - a data object\n   *//**\n   * The errors returned by the API for this request, if any\n   *\n   * @property errors\n   * @public\n   * @type {object|undefined} - an errors object\n   *//**\n   * The meta object for this document, if any\n   *\n   * @property meta\n   * @public\n   * @type {object|undefined} - a meta object\n   *//**\n   * The identifier associated with this document, if any\n   *\n   * @property identifier\n   * @public\n   * @type {StableDocumentIdentifier|null}\n   */constructor(store,identifier,localCache){_classPrivateMethodInitSpec(this,_ReactiveDocument_brand);this._store=store;this._localCache=localCache;this.identifier=identifier;// TODO if we ever enable auto-cleanup of the cache, we will need to tear this down\n// in a destroy method\nif(identifier){store.notifications.subscribe(identifier,(_identifier,type)=>{switch(type){case'updated':// FIXME in the case of a collection we need to notify it's length\n// and have it recalc\n(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.notifySignal)(this,'data');(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.notifySignal)(this,'links');(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.notifySignal)(this,'meta');(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.notifySignal)(this,'errors');break;}});}}/**\n   * Fetches the related link for this document, returning a promise that resolves\n   * with the document when the request completes. If no related link is present,\n   * will fallback to the self link if present\n   *\n   * @method fetch\n   * @public\n   * @param {object} options\n   * @return Promise<Document>\n   */fetch(options={}){(test=>{if(!test){throw new Error(`No self or related link`);}})(this.links?.related||this.links?.self);options.cacheOptions=options.cacheOptions||{};options.cacheOptions.key=this.identifier?.lid;return _assertClassBrand(_ReactiveDocument_brand,this,_request).call(this,this.links.related?'related':'self',options);}/**\n   * Fetches the next link for this document, returning a promise that resolves\n   * with the new document when the request completes, or null  if there is no\n   * next link.\n   *\n   * @method next\n   * @public\n   * @param {object} options\n   * @return Promise<Document | null>\n   */next(options={}){return _assertClassBrand(_ReactiveDocument_brand,this,_request).call(this,'next',options);}/**\n   * Fetches the prev link for this document, returning a promise that resolves\n   * with the new document when the request completes, or null if there is no\n   * prev link.\n   *\n   * @method prev\n   * @public\n   * @param {object} options\n   * @return Promise<Document | null>\n   */prev(options={}){return _assertClassBrand(_ReactiveDocument_brand,this,_request).call(this,'prev',options);}/**\n   * Fetches the first link for this document, returning a promise that resolves\n   * with the new document when the request completes, or null if there is no\n   * first link.\n   *\n   * @method first\n   * @public\n   * @param {object} options\n   * @return Promise<Document | null>\n   */first(options={}){return _assertClassBrand(_ReactiveDocument_brand,this,_request).call(this,'first',options);}/**\n   * Fetches the last link for this document, returning a promise that resolves\n   * with the new document when the request completes, or null if there is no\n   * last link.\n   *\n   * @method last\n   * @public\n   * @param {object} options\n   * @return Promise<Document | null>\n   */last(options={}){return _assertClassBrand(_ReactiveDocument_brand,this,_request).call(this,'last',options);}/**\n   * Implemented for `JSON.stringify` support.\n   *\n   * Returns the JSON representation of the document wrapper.\n   *\n   * This is a shallow serialization, it does not deeply serialize\n   * the document's contents, leaving that to the individual record\n   * instances to determine how to do, if at all.\n   *\n   * @method toJSON\n   * @public\n   * @return\n   */toJSON(){const data={};data.identifier=this.identifier;if(this.data!==undefined){data.data=this.data;}if(this.links!==undefined){data.links=this.links;}if(this.errors!==undefined){data.errors=this.errors;}if(this.meta!==undefined){data.meta=this.meta;}return data;}}async function _request(link,options){const href=this.links?.[link];if(!href){return null;}options.method=options.method||'GET';Object.assign(options,{url:urlFromLink(href)});const response=await this._store.request(options);return response.content;}(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.defineSubscription)(ReactiveDocument.prototype,'errors',{get(){const{identifier}=this;if(!identifier){const{document}=this._localCache;if('errors'in document){return document.errors;}return;}const doc=this._store.cache.peek(identifier);(test=>{if(!test){throw new Error(`No cache data was found for the document '${identifier.lid}'`);}})(doc);return'errors'in doc?doc.errors:undefined;}});(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.defineSubscription)(ReactiveDocument.prototype,'data',{get(){const{identifier,_localCache}=this;const doc=identifier?this._store.cache.peek(identifier):_localCache.document;(test=>{if(!test){throw new Error(`No cache data was found for the document '${identifier?.lid??'<uncached document>'}'`);}})(doc);const data='data'in doc?doc.data:undefined;if(Array.isArray(data)){return this._store.recordArrayManager.getCollection({type:identifier?identifier.lid:_localCache.request.url,identifiers:data.slice(),doc:identifier?undefined:doc,identifier:identifier??null});}else if(data){return this._store.peekRecord(data);}else{return data;}}});(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.defineSubscription)(ReactiveDocument.prototype,'links',{get(){const{identifier}=this;if(!identifier){return this._localCache.document.links;}const data=this._store.cache.peek(identifier);(test=>{if(!test){throw new Error(`No cache data was found for the document '${identifier.lid}'`);}})(data);return data.links;}});(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.defineSubscription)(ReactiveDocument.prototype,'meta',{get(){const{identifier}=this;if(!identifier){return this._localCache.document.meta;}const data=this._store.cache.peek(identifier);(test=>{if(!test){throw new Error(`No cache data was found for the document '${identifier.lid}'`);}})(data);return data.meta;}});/**\n  @module @ember-data/store\n*//**\n   A `RecordReference` is a low-level API that allows users and\n   addon authors to perform meta-operations on a record.\n\n   @class RecordReference\n   @public\n*/class RecordReference{constructor(store,identifier){// unsubscribe token given to us by the notification manager\n_defineProperty(this,\"___token\",void 0);_defineProperty(this,\"___identifier\",void 0);this.store=store;this.___identifier=identifier;this.___token=store.notifications.subscribe(identifier,(_,bucket,notifiedKey)=>{if(bucket==='identity'||bucket==='attributes'&&notifiedKey==='id'){this._ref++;}});}destroy(){this.store.notifications.unsubscribe(this.___token);}get type(){return this.identifier().type;}/**\n     The `id` of the record that this reference refers to.\n      Together, the `type` and `id` properties form a composite key for\n     the identity map.\n      Example\n      ```javascript\n     let userRef = store.getReference('user', 1);\n      userRef.id(); // '1'\n     ```\n      @method id\n    @public\n     @return {String} The id of the record.\n  */id(){// eslint-disable-next-line @typescript-eslint/no-unused-expressions\nthis._ref;// consume the tracked prop\nreturn this.___identifier.id;}/**\n     The `identifier` of the record that this reference refers to.\n      Together, the `type` and `id` properties form a composite key for\n     the identity map.\n      Example\n      ```javascript\n     let userRef = store.getReference('user', 1);\n      userRef.identifier(); // '1'\n     ```\n      @method identifier\n    @public\n     @return {String} The identifier of the record.\n  */identifier(){return this.___identifier;}/**\n     How the reference will be looked up when it is loaded. Currently\n     this always returns `identity` to signify that a record will be\n     loaded by its `type` and `id`.\n      Example\n      ```javascript\n     const userRef = store.getReference('user', 1);\n      userRef.remoteType(); // 'identity'\n     ```\n      @method remoteType\n     @public\n     @return {String} 'identity'\n  */remoteType(){return'identity';}/**\n    This API allows you to provide a reference with new data. The\n    simplest usage of this API is similar to `store.push`: you provide a\n    normalized hash of data and the object represented by the reference\n    will update.\n     If you pass a promise to `push`, Ember Data will not ask the adapter\n    for the data if another attempt to fetch it is made in the\n    interim. When the promise resolves, the underlying object is updated\n    with the new data, and the promise returned by *this function* is resolved\n    with that object.\n     For example, `recordReference.push(promise)` will be resolved with a\n    record.\n      Example\n      ```javascript\n     let userRef = store.getReference('user', 1);\n      // provide data for reference\n     userRef.push({\n       data: {\n         id: \"1\",\n         type: \"user\",\n         attributes: {\n           username: \"@user\"\n         }\n       }\n     }).then(function(user) {\n       userRef.value() === user;\n     });\n     ```\n     @method push\n    @public\n    @param objectOrPromise a JSON:API ResourceDocument or a promise resolving to one\n    @return a promise for the value (record or relationship)\n  */push(objectOrPromise){// TODO @deprecate pushing unresolved payloads\nreturn Promise.resolve(objectOrPromise).then(data=>{return this.store.push(data);});}/**\n    If the entity referred to by the reference is already loaded, it is\n    present as `reference.value`. Otherwise the value returned by this function\n    is `null`.\n      Example\n      ```javascript\n     let userRef = store.getReference('user', 1);\n      userRef.value(); // user\n     ```\n      @method value\n    @public\n     @return {Model} the record for this RecordReference\n  */value(){return this.store.peekRecord(this.___identifier);}/**\n     Triggers a fetch for the backing entity based on its `remoteType`\n     (see `remoteType` definitions per reference type).\n      Example\n      ```javascript\n     let userRef = store.getReference('user', 1);\n      // load user (via store.find)\n     userRef.load().then(...)\n     ```\n      @method load\n    @public\n     @return {Promise<record>} the record for this RecordReference\n  */load(){const id=this.id();if(id!==null){return this.store.findRecord(this.type,id);}(test=>{{throw new Error(`Unable to fetch record of type ${this.type} without an id`);}})();}/**\n     Reloads the record if it is already loaded. If the record is not\n     loaded it will load the record via `store.findRecord`\n      Example\n      ```javascript\n     let userRef = store.getReference('user', 1);\n      // or trigger a reload\n     userRef.reload().then(...)\n     ```\n      @method reload\n    @public\n     @return {Promise<record>} the record for this RecordReference\n  */reload(){const id=this.id();if(id!==null){return this.store.findRecord(this.type,id,{reload:true});}(test=>{{throw new Error(`Unable to fetch record of type ${this.type} without an id`);}})();}}(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.defineSignal)(RecordReference.prototype,'_ref');/**\n  @module @ember-data/store\n*/class CacheCapabilitiesManager{constructor(_store){this._store=_store;this._willNotify=false;this._pendingNotifies=new Map();}get identifierCache(){return this._store.identifierCache;}_scheduleNotification(identifier,key){let pending=this._pendingNotifies.get(identifier);if(!pending){pending=new Set();this._pendingNotifies.set(identifier,pending);}pending.add(key);if(this._willNotify===true){return;}this._willNotify=true;// it's possible a cache adhoc notifies us,\n// in which case we sync flush\nif(this._store._cbs){this._store._schedule('notify',()=>this._flushNotifications());}else{// TODO @runspired determine if relationship mutations should schedule\n// into join/run vs immediate flush\nthis._flushNotifications();}}_flushNotifications(){if(this._willNotify===false){return;}const pending=this._pendingNotifies;this._pendingNotifies=new Map();this._willNotify=false;pending.forEach((set,identifier)=>{set.forEach(key=>{this._store.notifications.notify(identifier,'relationships',key);});});}notifyChange(identifier,namespace,key){(test=>{if(!test){throw new Error(`Expected a stable identifier`);}})(isStableIdentifier(identifier)||isDocumentIdentifier(identifier));// TODO do we still get value from this?\nif(namespace==='relationships'&&key){this._scheduleNotification(identifier,key);return;}// @ts-expect-error\nthis._store.notifications.notify(identifier,namespace,key);}get schema(){return this._store.schema;}setRecordId(identifier,id){(test=>{if(!test){throw new Error(`Expected a stable identifier`);}})(isStableIdentifier(identifier));this._store._instanceCache.setRecordId(identifier,id);}hasRecord(identifier){return Boolean(this._store._instanceCache.peek(identifier));}disconnectRecord(identifier){(test=>{if(!test){throw new Error(`Expected a stable identifier`);}})(isStableIdentifier(identifier));this._store._instanceCache.disconnect(identifier);this._pendingNotifies.delete(identifier);}}{CacheCapabilitiesManager.prototype.getSchemaDefinitionService=function(){// FIXME add deprecation for this\nreturn this._store.schema;};}/*\n * Returns the Cache instance associated with a given\n * Model or Identifier\n */const CacheForIdentifierCache=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.getOrSetGlobal)('CacheForIdentifierCache',new Map());function setCacheFor(identifier,cache){(test=>{if(!test){throw new Error(`Illegal set of identifier`);}})(!CacheForIdentifierCache.has(identifier)||CacheForIdentifierCache.get(identifier)===cache);CacheForIdentifierCache.set(identifier,cache);}function removeRecordDataFor(identifier){CacheForIdentifierCache.delete(identifier);}function peekCache(instance){if(CacheForIdentifierCache.has(instance)){return CacheForIdentifierCache.get(instance);}return null;}function isDestroyable(record){return Boolean(record&&typeof record==='object'&&typeof record.destroy==='function');}/**\n  @module @ember-data/store\n*/const RecordCache=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.getOrSetGlobal)('RecordCache',new Map());function peekRecordIdentifier(record){return RecordCache.get(record);}/**\n  Retrieves the unique referentially-stable [RecordIdentifier](/ember-data/release/classes/StableRecordIdentifier)\n  assigned to the given record instance.\n  ```js\n  import { recordIdentifierFor } from \"@ember-data/store\";\n  // ... gain access to a record, for instance with peekRecord or findRecord\n  const record = store.peekRecord(\"user\", \"1\");\n  // get the identifier for the record (see docs for StableRecordIdentifier)\n  const identifier = recordIdentifierFor(record);\n  // access the identifier's properties.\n  const { id, type, lid } = identifier;\n  ```\n  @method recordIdentifierFor\n  @public\n  @static\n  @for @ember-data/store\n  @param {Object} record a record instance previously obstained from the store.\n  @return {StableRecordIdentifier}\n */function recordIdentifierFor(record){(test=>{if(!test){throw new Error(`${String(record)} is not a record instantiated by @ember-data/store`);}})(RecordCache.has(record));return RecordCache.get(record);}function setRecordIdentifier(record,identifier){{if(RecordCache.has(record)&&RecordCache.get(record)!==identifier){throw new Error(`${String(record)} was already assigned an identifier`);}}/*\n  It would be nice to do a reverse check here that an identifier has not\n  previously been assigned a record; however, unload + rematerialization\n  prevents us from having a great way of doing so when CustomRecordClasses\n  don't necessarily give us access to a `isDestroyed` for dematerialized\n  instance.\n  */RecordCache.set(record,identifier);}const StoreMap=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.getOrSetGlobal)('StoreMap',new Map());function storeFor(record){const store=StoreMap.get(record);(test=>{if(!test){throw new Error(`A record in a disconnected state cannot utilize the store. This typically means the record has been destroyed, most commonly by unloading it.`);}})(store);return store;}class InstanceCache{constructor(store){this.store=store;this.__instances={record:new Map(),reference:new WeakMap(),document:new Map()};this._storeWrapper=new CacheCapabilitiesManager(this.store);store.identifierCache.__configureMerge((identifier,matchedIdentifier,resourceData)=>{let keptIdentifier=identifier;if(identifier.id!==matchedIdentifier.id){// @ts-expect-error TODO this needs to be fixed\nkeptIdentifier='id'in resourceData&&identifier.id===resourceData.id?identifier:matchedIdentifier;}else if(identifier.type!==matchedIdentifier.type){keptIdentifier=// @ts-expect-error TODO this needs to be fixed\n'type'in resourceData&&identifier.type===resourceData.type?identifier:matchedIdentifier;}const staleIdentifier=identifier===keptIdentifier?matchedIdentifier:identifier;// check for duplicate entities\nconst keptHasRecord=this.__instances.record.has(keptIdentifier);const staleHasRecord=this.__instances.record.has(staleIdentifier);// we cannot merge entities when both have records\n// (this may not be strictly true, we could probably swap the cache data the record points at)\nif(keptHasRecord&&staleHasRecord){// TODO we probably don't need to throw these errors anymore\n// we can probably just \"swap\" what data source the abandoned\n// record points at so long as\n// it itself is not retained by the store in any way.\n// @ts-expect-error TODO this needs to be fixed\nif('id'in resourceData){throw new Error(`Failed to update the 'id' for the RecordIdentifier '${identifier.type}:${String(identifier.id)} (${identifier.lid})' to '${String(resourceData.id)}', because that id is already in use by '${matchedIdentifier.type}:${String(matchedIdentifier.id)} (${matchedIdentifier.lid})'`);}(test=>{{throw new Error(`Failed to update the RecordIdentifier '${identifier.type}:${String(identifier.id)} (${identifier.lid})' to merge with the detected duplicate identifier '${matchedIdentifier.type}:${String(matchedIdentifier.id)} (${String(matchedIdentifier.lid)})'`);}})();}this.store.cache.patch({op:'mergeIdentifiers',record:staleIdentifier,value:keptIdentifier});/*\n      TODO @runspired consider adding this to make polymorphism even nicer\n      if (identifier.type !== matchedIdentifier.type) {\n      this.store._graph?.registerPolymorphicType(identifier.type, matchedIdentifier.type);\n      }\n      */this.unloadRecord(staleIdentifier);return keptIdentifier;});}peek(identifier){return this.__instances.record.get(identifier);}getDocument(identifier){let doc=this.__instances.document.get(identifier);if(!doc){doc=new ReactiveDocument(this.store,identifier,null);this.__instances.document.set(identifier,doc);}return doc;}getRecord(identifier,properties){let record=this.__instances.record.get(identifier);if(!record){(test=>{if(!test){throw new Error(`Cannot create a new record instance while the store is being destroyed`);}})(!this.store.isDestroying&&!this.store.isDestroyed);const cache=this.store.cache;setCacheFor(identifier,cache);record=this.store.instantiateRecord(identifier,properties||{});setRecordIdentifier(record,identifier);setCacheFor(record,cache);StoreMap.set(record,this.store);this.__instances.record.set(identifier,record);{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_INSTANCE_CACHE||globalThis.getWarpDriveRuntimeConfig().debug.LOG_INSTANCE_CACHE){logGroup('reactive-ui','',identifier.type,identifier.lid,'created','');// eslint-disable-next-line no-console\nconsole.log({properties});// eslint-disable-next-line no-console\nconsole.groupEnd();}}}return record;}getReference(identifier){const cache=this.__instances.reference;let reference=cache.get(identifier);if(!reference){reference=new RecordReference(this.store,identifier);cache.set(identifier,reference);}return reference;}recordIsLoaded(identifier,filterDeleted=false){const cache=this.cache;if(!cache){return false;}const isNew=cache.isNew(identifier);const isEmpty=cache.isEmpty(identifier);// if we are new we must consider ourselves loaded\nif(isNew){return!cache.isDeleted(identifier);}// even if we have a past request, if we are now empty we are not loaded\n// typically this is true after an unloadRecord call\n// if we are not empty, not new && we have a fulfilled request then we are loaded\n// we should consider allowing for something to be loaded that is simply \"not empty\".\n// which is how RecordState currently handles this case; however, RecordState is buggy\n// in that it does not account for unloading.\nreturn filterDeleted&&cache.isDeletionCommitted(identifier)?false:!isEmpty;}disconnect(identifier){const record=this.__instances.record.get(identifier);(test=>{if(!test){throw new Error('Cannot destroy record while it is still materialized');}})(!isDestroyable(record)||record.isDestroyed||record.isDestroying);this.store._graph?.remove(identifier);this.store.identifierCache.forgetRecordIdentifier(identifier);removeRecordDataFor(identifier);this.store._requestCache._clearEntries(identifier);{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_INSTANCE_CACHE||globalThis.getWarpDriveRuntimeConfig().debug.LOG_INSTANCE_CACHE){log('reactive-ui','',identifier.type,identifier.lid,'disconnected','');}}}unloadRecord(identifier){{const requests=this.store.getRequestStateService().getPendingRequestsForRecord(identifier);if(requests.some(req=>{return req.type==='mutation';})){(test=>{{throw new Error(`You can only unload a record which is not inFlight. '${String(identifier)}'`);}})();}}{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_INSTANCE_CACHE||globalThis.getWarpDriveRuntimeConfig().debug.LOG_INSTANCE_CACHE){// eslint-disable-next-line no-console\nconsole.groupCollapsed(`InstanceCache: unloading record for ${String(identifier)}`);}}// TODO is this join still necessary?\nthis.store._join(()=>{const record=this.__instances.record.get(identifier);const cache=this.cache;if(record){this.store.teardownRecord(record);this.__instances.record.delete(identifier);StoreMap.delete(record);RecordCache.delete(record);removeRecordDataFor(record);{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_INSTANCE_CACHE||globalThis.getWarpDriveRuntimeConfig().debug.LOG_INSTANCE_CACHE){// eslint-disable-next-line no-console\nconsole.log(`InstanceCache: destroyed record for ${String(identifier)}`);}}}if(cache){cache.unloadRecord(identifier);removeRecordDataFor(identifier);{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_INSTANCE_CACHE||globalThis.getWarpDriveRuntimeConfig().debug.LOG_INSTANCE_CACHE){// eslint-disable-next-line no-console\nconsole.log(`InstanceCache: destroyed cache for ${String(identifier)}`);}}}else{this.disconnect(identifier);}this.store._requestCache._clearEntries(identifier);{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_INSTANCE_CACHE||globalThis.getWarpDriveRuntimeConfig().debug.LOG_INSTANCE_CACHE){// eslint-disable-next-line no-console\nconsole.log(`InstanceCache: unloaded RecordData for ${String(identifier)}`);// eslint-disable-next-line no-console\nconsole.groupEnd();}}});}clear(type){const cache=this.store.identifierCache._cache;if(type===undefined){// it would be cool if we could just de-ref cache here\n// but probably would require WeakRef models to do so.\ncache.resources.forEach(identifier=>{this.unloadRecord(identifier);});}else{const typeCache=cache.resourcesByType;const identifiers=typeCache[type]?.lid;if(identifiers){identifiers.forEach(identifier=>{// if (rds.has(identifier)) {\nthis.unloadRecord(identifier);// }\n// TODO we don't remove the identifier, should we?\n});}}}// TODO this should move into something coordinating operations\nsetRecordId(identifier,id){const{type,lid}=identifier;const oldId=identifier.id;// ID absolutely can't be missing if the oldID is empty (missing Id in response for a new record)\n(test=>{if(!test){throw new Error(`'${type}' was saved to the server, but the response does not have an id and your record does not either.`);}})(!(id===null&&oldId===null));// ID absolutely can't be different than oldID if oldID is not null\n// TODO this assertion and restriction may not strictly be needed in the identifiers world\n(test=>{if(!test){throw new Error(`Cannot update the id for '${type}:${lid}' from '${String(oldId)}' to '${id}'.`);}})(!(oldId!==null&&id!==oldId));// ID can be null if oldID is not null (altered ID in response for a record)\n// however, this is more than likely a developer error.\nif(oldId!==null&&id===null){(0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.warn)(`Your ${type} record was saved to the server, but the response does not have an id.`,!(oldId!==null&&id===null));return;}{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_INSTANCE_CACHE||globalThis.getWarpDriveRuntimeConfig().debug.LOG_INSTANCE_CACHE){// eslint-disable-next-line no-console\nconsole.log(`InstanceCache: updating id to '${id}' for record ${String(identifier)}`);}}const existingIdentifier=this.store.identifierCache.peekRecordIdentifier({type,id});(test=>{if(!test){throw new Error(`'${type}' was saved to the server, but the response returned the new id '${id}', which has already been used with another record.'`);}})(!existingIdentifier||existingIdentifier===identifier);if(identifier.id===null){// TODO potentially this needs to handle merged result\nthis.store.identifierCache.updateRecordIdentifier(identifier,{type,id});}// TODO update resource cache if needed ?\n// TODO handle consequences of identifier merge for notifications\nthis.store.notifications.notify(identifier,'identity');}}function _resourceIsFullDeleted(identifier,cache){return cache.isDeletionCommitted(identifier)||cache.isNew(identifier)&&cache.isDeleted(identifier);}function resourceIsFullyDeleted(instanceCache,identifier){const cache=instanceCache.cache;return!cache||_resourceIsFullDeleted(identifier,cache);}/*\n    When a find request is triggered on the store, the user can optionally pass in\n    attributes and relationships to be preloaded. These are meant to behave as if they\n    came back from the server, except the user obtained them out of band and is informing\n    the store of their existence. The most common use case is for supporting client side\n    nested URLs, such as `/posts/1/comments/2` so the user can do\n    `store.findRecord('comment', 2, { preload: { post: 1 } })` without having to fetch the post.\n\n    Preloaded data can be attributes and relationships passed in either as IDs or as actual\n    models.\n  */function preloadData(store,identifier,preload){const jsonPayload={};//TODO(Igor) consider the polymorphic case\nconst schemas=store.schema;const fields=schemas.fields(identifier);Object.keys(preload).forEach(key=>{const preloadValue=preload[key];const field=fields.get(key);if(field&&(field.kind==='hasMany'||field.kind==='belongsTo')){if(!jsonPayload.relationships){jsonPayload.relationships={};}jsonPayload.relationships[key]=preloadRelationship(field,preloadValue);}else{if(!jsonPayload.attributes){jsonPayload.attributes={};}jsonPayload.attributes[key]=preloadValue;}});const cache=store.cache;const hasRecord=Boolean(store._instanceCache.peek(identifier));cache.upsert(identifier,jsonPayload,hasRecord);}function preloadRelationship(schema,preloadValue){const relatedType=schema.type;if(schema.kind==='hasMany'){(test=>{if(!test){throw new Error('You need to pass in an array to set a hasMany property on a record');}})(Array.isArray(preloadValue));return{data:preloadValue.map(value=>_convertPreloadRelationshipToJSON(value,relatedType))};}(test=>{if(!test){throw new Error('You should not pass in an array to set a belongsTo property on a record');}})(!Array.isArray(preloadValue));return{data:preloadValue?_convertPreloadRelationshipToJSON(preloadValue,relatedType):null};}/*\n  findRecord('user', '1', { preload: { friends: ['1'] }});\n  findRecord('user', '1', { preload: { friends: [record] }});\n*/function _convertPreloadRelationshipToJSON(value,type){if(typeof value==='string'||typeof value==='number'){return{type,id:ensureStringId(value)};}// TODO if not a record instance assert it's an identifier\n// and allow identifiers to be used\nreturn recordIdentifierFor(value);}function _clearCaches(){RecordCache.clear();StoreMap.clear();CacheForIdentifierCache.clear();}// if modelFor turns out to be a bottleneck we should replace with a Map\n// and clear it during store teardown.\nconst AvailableShims=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.getOrSetGlobal)('AvailableShims',new WeakMap());function getShimClass(store,modelName){let shims=AvailableShims.get(store);if(!shims){shims=Object.create(null);AvailableShims.set(store,shims);}let shim=shims[modelName];if(shim===undefined){shim=shims[modelName]=new ShimModelClass(store,modelName);}return shim;}// Mimics the static apis of @ember-data/model\nclass ShimModelClass{constructor(store,modelName){this.__store=store;this.modelName=modelName;}get fields(){const fields=new Map();const fieldSchemas=this.__store.schema.fields({type:this.modelName});fieldSchemas.forEach((schema,key)=>{if(schema.kind==='attribute'||schema.kind==='belongsTo'||schema.kind==='hasMany'){fields.set(key,schema.kind);}});return fields;}get attributes(){const attrs=new Map();const fields=this.__store.schema.fields({type:this.modelName});fields.forEach((schema,key)=>{if(schema.kind==='attribute'){attrs.set(key,schema);}});return attrs;}get relationshipsByName(){const rels=new Map();const fields=this.__store.schema.fields({type:this.modelName});fields.forEach((schema,key)=>{if(schema.kind==='belongsTo'||schema.kind==='hasMany'){rels.set(key,schema);}});return rels;}eachAttribute(callback,binding){this.__store.schema.fields({type:this.modelName}).forEach((schema,key)=>{if(schema.kind==='attribute'){callback.call(binding,key,schema);}});}eachRelationship(callback,binding){this.__store.schema.fields({type:this.modelName}).forEach((schema,key)=>{if(schema.kind==='belongsTo'||schema.kind==='hasMany'){callback.call(binding,key,schema);}});}eachTransformedAttribute(callback,binding){this.__store.schema.fields({type:this.modelName}).forEach((schema,key)=>{if(schema.kind==='attribute'){const type=schema.type;if(type)callback.call(binding,key,type);}});}}/**\n * The CacheManager wraps a Cache enforcing that only\n * the public API surface area is exposed.\n *\n * Hence, it is the value of `Store.cache`, wrapping\n * the cache instance returned by `Store.createCache`.\n *\n * It handles translating between cache versions when\n * necessary, for instance when a Store is configured\n * to use both a v1 and a v2 cache depending on some\n * heuristic.\n *\n * Starting with the v2 spec, the cache is designed such\n * that it must be implemented as a singleton.\n *\n * @class CacheManager\n * @public\n */var _cache=/*#__PURE__*/new WeakMap();class CacheManager{constructor(cache){_defineProperty(this,\"version\",'2');_classPrivateFieldInitSpec(this,_cache,void 0);_classPrivateFieldSet(_cache,this,cache);}// Cache Management\n// ================\n/**\n   * Cache the response to a request\n   *\n   * Unlike `store.push` which has UPSERT\n   * semantics, `put` has `replace` semantics similar to\n   * the `http` method `PUT`\n   *\n   * the individually cacheable\n   * e resource data it may contain\n   * should upsert, but the document data surrounding it should\n   * fully replace any existing information\n   *\n   * Note that in order to support inserting arbitrary data\n   * to the cache that did not originate from a request `put`\n   * should expect to sometimes encounter a document with only\n   * a `content` member and therefor must not assume the existence\n   * of `request` and `response` on the document.\n   *\n   * @method put\n   * @param {StructuredDocument} doc\n   * @return {ResourceDocument}\n   * @public\n   */put(doc){return _classPrivateFieldGet(_cache,this).put(doc);}/**\n   * Perform an operation on the cache to update the remote state.\n   *\n   * Note: currently the only valid operation is a MergeOperation\n   * which occurs when a collision of identifiers is detected.\n   *\n   * @method patch\n   * @public\n   * @param op the operation to perform\n   * @return {void}\n   */patch(op){_classPrivateFieldGet(_cache,this).patch(op);}/**\n   * Update resource data with a local mutation. Currently supports operations\n   * on relationships only.\n   *\n   * @method mutate\n   * @public\n   * @param mutation\n   */mutate(mutation){_classPrivateFieldGet(_cache,this).mutate(mutation);}/**\n   * Peek resource data from the Cache.\n   *\n   * In development, if the return value\n   * is JSON the return value\n   * will be deep-cloned and deep-frozen\n   * to prevent mutation thereby enforcing cache\n   * Immutability.\n   *\n   * This form of peek is useful for implementations\n   * that want to feed raw-data from cache to the UI\n   * or which want to interact with a blob of data\n   * directly from the presentation cache.\n   *\n   * An implementation might want to do this because\n   * de-referencing records which read from their own\n   * blob is generally safer because the record does\n   * not require retaining connections to the Store\n   * and Cache to present data on a per-field basis.\n   *\n   * This generally takes the place of `getAttr` as\n   * an API and may even take the place of `getRelationship`\n   * depending on implementation specifics, though this\n   * latter usage is less recommended due to the advantages\n   * of the Graph handling necessary entanglements and\n   * notifications for relational data.\n   *\n   * @method peek\n   * @public\n   * @param {StableRecordIdentifier | StableDocumentIdentifier} identifier\n   * @return {ResourceDocument | ResourceBlob | null} the known resource data\n   */peek(identifier){return _classPrivateFieldGet(_cache,this).peek(identifier);}peekRemoteState(identifier){return _classPrivateFieldGet(_cache,this).peekRemoteState(identifier);}/**\n   * Peek the Cache for the existing request data associated with\n   * a cacheable request\n   *\n   * @method peekRequest\n   * @param {StableDocumentIdentifier}\n   * @return {StableDocumentIdentifier | null}\n   * @public\n   */peekRequest(identifier){return _classPrivateFieldGet(_cache,this).peekRequest(identifier);}/**\n   * Push resource data from a remote source into the cache for this identifier\n   *\n   * @method upsert\n   * @public\n   * @param identifier\n   * @param data\n   * @param hasRecord\n   * @return {void | string[]} if `hasRecord` is true then calculated key changes should be returned\n   */upsert(identifier,data,hasRecord){return _classPrivateFieldGet(_cache,this).upsert(identifier,data,hasRecord);}// Cache Forking Support\n// =====================\n/**\n   * Create a fork of the cache from the current state.\n   *\n   * Applications should typically not call this method themselves,\n   * preferring instead to fork at the Store level, which will\n   * utilize this method to fork the cache.\n   *\n   * @method fork\n   * @public\n   * @return Promise<Cache>\n   */fork(){return _classPrivateFieldGet(_cache,this).fork();}/**\n   * Merge a fork back into a parent Cache.\n   *\n   * Applications should typically not call this method themselves,\n   * preferring instead to merge at the Store level, which will\n   * utilize this method to merge the caches.\n   *\n   * @method merge\n   * @param {Cache} cache\n   * @public\n   * @return Promise<void>\n   */merge(cache){return _classPrivateFieldGet(_cache,this).merge(cache);}/**\n   * Generate the list of changes applied to all\n   * record in the store.\n   *\n   * Each individual resource or document that has\n   * been mutated should be described as an individual\n   * `Change` entry in the returned array.\n   *\n   * A `Change` is described by an object containing up to\n   * three properties: (1) the `identifier` of the entity that\n   * changed; (2) the `op` code of that change being one of\n   * `upsert` or `remove`, and if the op is `upsert` a `patch`\n   * containing the data to merge into the cache for the given\n   * entity.\n   *\n   * This `patch` is opaque to the Store but should be understood\n   * by the Cache and may expect to be utilized by an Adapter\n   * when generating data during a `save` operation.\n   *\n   * It is generally recommended that the `patch` contain only\n   * the updated state, ignoring fields that are unchanged\n   *\n   * ```ts\n   * interface Change {\n   *  identifier: StableRecordIdentifier | StableDocumentIdentifier;\n   *  op: 'upsert' | 'remove';\n   *  patch?: unknown;\n   * }\n   * ```\n   *\n   * @method diff\n   * @public\n   */diff(){return _classPrivateFieldGet(_cache,this).diff();}// SSR Support\n// ===========\n/**\n   * Serialize the entire contents of the Cache into a Stream\n   * which may be fed back into a new instance of the same Cache\n   * via `cache.hydrate`.\n   *\n   * @method dump\n   * @return {Promise<ReadableStream>}\n   * @public\n   */dump(){return _classPrivateFieldGet(_cache,this).dump();}/**\n   * hydrate a Cache from a Stream with content previously serialized\n   * from another instance of the same Cache, resolving when hydration\n   * is complete.\n   *\n   * This method should expect to be called both in the context of restoring\n   * the Cache during application rehydration after SSR **AND** at unknown\n   * times during the lifetime of an already booted application when it is\n   * desired to bulk-load additional information into the cache. This latter\n   * behavior supports optimizing pre/fetching of data for route transitions\n   * via data-only SSR modes.\n   *\n   * @method hydrate\n   * @param {ReadableStream} stream\n   * @return {Promise<void>}\n   * @public\n   */hydrate(stream){return _classPrivateFieldGet(_cache,this).hydrate(stream);}// Cache\n// =====\n// Resource Support\n// ================\n/**\n   * [LIFECYCLE] Signal to the cache that a new record has been instantiated on the client\n   *\n   * It returns properties from options that should be set on the record during the create\n   * process. This return value behavior is deprecated.\n   *\n   * @method clientDidCreate\n   * @public\n   * @param identifier\n   * @param options\n   */clientDidCreate(identifier,options){return _classPrivateFieldGet(_cache,this).clientDidCreate(identifier,options);}/**\n   * [LIFECYCLE] Signals to the cache that a resource\n   * will be part of a save transaction.\n   *\n   * @method willCommit\n   * @public\n   * @param identifier\n   */willCommit(identifier,context){_classPrivateFieldGet(_cache,this).willCommit(identifier,context);}/**\n   * [LIFECYCLE] Signals to the cache that a resource\n   * was successfully updated as part of a save transaction.\n   *\n   * @method didCommit\n   * @public\n   * @param identifier\n   * @param data\n   */didCommit(identifier,result){return _classPrivateFieldGet(_cache,this).didCommit(identifier,result);}/**\n   * [LIFECYCLE] Signals to the cache that a resource\n   * was update via a save transaction failed.\n   *\n   * @method commitWasRejected\n   * @public\n   * @param identifier\n   * @param errors\n   */commitWasRejected(identifier,errors){_classPrivateFieldGet(_cache,this).commitWasRejected(identifier,errors);}/**\n   * [LIFECYCLE] Signals to the cache that all data for a resource\n   * should be cleared.\n   *\n   * @method unloadRecord\n   * @public\n   * @param identifier\n   */unloadRecord(identifier){_classPrivateFieldGet(_cache,this).unloadRecord(identifier);}// Granular Resource Data APIs\n// ===========================\n/**\n   * Retrieve the data for an attribute from the cache\n   *\n   * @method getAttr\n   * @public\n   * @param identifier\n   * @param propertyName\n   * @return {unknown}\n   */getAttr(identifier,propertyName){return _classPrivateFieldGet(_cache,this).getAttr(identifier,propertyName);}/**\n   * Retrieve the remote state for an attribute from the cache\n   *\n   * @method getRemoteAttr\n   * @public\n   * @param identifier\n   * @param propertyName\n   * @return {unknown}\n   */getRemoteAttr(identifier,propertyName){return _classPrivateFieldGet(_cache,this).getRemoteAttr(identifier,propertyName);}/**\n   * Mutate the data for an attribute in the cache\n   *\n   * @method setAttr\n   * @public\n   * @param identifier\n   * @param propertyName\n   * @param value\n   */setAttr(identifier,propertyName,value){_classPrivateFieldGet(_cache,this).setAttr(identifier,propertyName,value);}/**\n   * Query the cache for the changed attributes of a resource.\n   *\n   * @method changedAttrs\n   * @public\n   * @param identifier\n   * @return\n   */changedAttrs(identifier){return _classPrivateFieldGet(_cache,this).changedAttrs(identifier);}/**\n   * Query the cache for whether any mutated attributes exist\n   *\n   * @method hasChangedAttrs\n   * @public\n   * @param identifier\n   * @return {boolean}\n   */hasChangedAttrs(identifier){return _classPrivateFieldGet(_cache,this).hasChangedAttrs(identifier);}/**\n   * Tell the cache to discard any uncommitted mutations to attributes\n   *\n   * @method rollbackAttrs\n   * @public\n   * @param identifier\n   * @return the names of attributes that were restored\n   */rollbackAttrs(identifier){return _classPrivateFieldGet(_cache,this).rollbackAttrs(identifier);}// Relationships\n// =============\n/**\n   * Query the cache for the changes to relationships of a resource.\n   *\n   * Returns a map of relationship names to RelationshipDiff objects.\n   *\n   * ```ts\n   * type RelationshipDiff =\n  | {\n      kind: 'collection';\n      remoteState: StableRecordIdentifier[];\n      additions: Set<StableRecordIdentifier>;\n      removals: Set<StableRecordIdentifier>;\n      localState: StableRecordIdentifier[];\n      reordered: boolean;\n    }\n  | {\n      kind: 'resource';\n      remoteState: StableRecordIdentifier | null;\n      localState: StableRecordIdentifier | null;\n    };\n    ```\n   *\n   * @method changedRelationships\n   * @public\n   * @param {StableRecordIdentifier} identifier\n   * @return {Map<string, RelationshipDiff>}\n   */changedRelationships(identifier){return _classPrivateFieldGet(_cache,this).changedRelationships(identifier);}/**\n   * Query the cache for whether any mutated attributes exist\n   *\n   * @method hasChangedRelationships\n   * @public\n   * @param {StableRecordIdentifier} identifier\n   * @return {boolean}\n   */hasChangedRelationships(identifier){return _classPrivateFieldGet(_cache,this).hasChangedRelationships(identifier);}/**\n   * Tell the cache to discard any uncommitted mutations to relationships.\n   *\n   * This will also discard the change on any appropriate inverses.\n   *\n   * This method is a candidate to become a mutation\n   *\n   * @method rollbackRelationships\n   * @public\n   * @param {StableRecordIdentifier} identifier\n   * @return {string[]} the names of relationships that were restored\n   */rollbackRelationships(identifier){return _classPrivateFieldGet(_cache,this).rollbackRelationships(identifier);}/**\n   * Query the cache for the current state of a relationship property\n   *\n   * @method getRelationship\n   * @public\n   * @param identifier\n   * @param propertyName\n   * @return resource relationship object\n   */getRelationship(identifier,propertyName){return _classPrivateFieldGet(_cache,this).getRelationship(identifier,propertyName);}/**\n   * Query the cache for the remote state of a relationship property\n   *\n   * @method getRelationship\n   * @public\n   * @param identifier\n   * @param propertyName\n   * @return resource relationship object\n   */getRemoteRelationship(identifier,propertyName){return _classPrivateFieldGet(_cache,this).getRemoteRelationship(identifier,propertyName);}// Resource State\n// ===============\n/**\n   * Update the cache state for the given resource to be marked as locally deleted,\n   * or remove such a mark.\n   *\n   * @method setIsDeleted\n   * @public\n   * @param identifier\n   * @param isDeleted\n   */setIsDeleted(identifier,isDeleted){_classPrivateFieldGet(_cache,this).setIsDeleted(identifier,isDeleted);}/**\n   * Query the cache for any validation errors applicable to the given resource.\n   *\n   * @method getErrors\n   * @public\n   * @param identifier\n   * @return\n   */getErrors(identifier){return _classPrivateFieldGet(_cache,this).getErrors(identifier);}/**\n   * Query the cache for whether a given resource has any available data\n   *\n   * @method isEmpty\n   * @public\n   * @param identifier\n   * @return {boolean}\n   */isEmpty(identifier){return _classPrivateFieldGet(_cache,this).isEmpty(identifier);}/**\n   * Query the cache for whether a given resource was created locally and not\n   * yet persisted.\n   *\n   * @method isNew\n   * @public\n   * @param identifier\n   * @return {boolean}\n   */isNew(identifier){return _classPrivateFieldGet(_cache,this).isNew(identifier);}/**\n   * Query the cache for whether a given resource is marked as deleted (but not\n   * necessarily persisted yet).\n   *\n   * @method isDeleted\n   * @public\n   * @param identifier\n   * @return {boolean}\n   */isDeleted(identifier){return _classPrivateFieldGet(_cache,this).isDeleted(identifier);}/**\n   * Query the cache for whether a given resource has been deleted and that deletion\n   * has also been persisted.\n   *\n   * @method isDeletionCommitted\n   * @public\n   * @param identifier\n   * @return {boolean}\n   */isDeletionCommitted(identifier){return _classPrivateFieldGet(_cache,this).isDeletionCommitted(identifier);}}/**\n * @module @ember-data/store\n */function isCacheOperationValue(value){return value==='added'||value==='state'||value==='updated'||value==='removed'||value==='invalidated';}function runLoopIsFlushing(){//@ts-expect-error\nreturn!!_ember_runloop__WEBPACK_IMPORTED_MODULE_4__._backburner.currentInstance&&_ember_runloop__WEBPACK_IMPORTED_MODULE_4__._backburner._autorun!==true;}function count(label){// @ts-expect-error\n// eslint-disable-next-line\nglobalThis.__WarpDriveMetricCountData[label]=(globalThis.__WarpDriveMetricCountData[label]||0)+1;}function asInternalToken(token){(test=>{if(!test){throw new Error(`Expected a token with a 'for' property`);}})(token&&typeof token==='function'&&'for'in token);}function _unsubscribe(token,cache){asInternalToken(token);const identifier=token.for;{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_NOTIFICATIONS||globalThis.getWarpDriveRuntimeConfig().debug.LOG_NOTIFICATIONS){if(!identifier){// eslint-disable-next-line no-console\nconsole.log('Passed unknown unsubscribe token to unsubscribe',identifier);}}}if(identifier){const callbacks=cache.get(identifier);if(!callbacks){return;}const index=callbacks.indexOf(token);if(index===-1){(test=>{if(!test){throw new Error(`Cannot unsubscribe a token that is not subscribed`);}})(index!==-1);return;}callbacks.splice(index,1);}}/**\n * The NotificationManager provides the ability to subscribe to\n * changes to Cache state.\n *\n * This Feature is what allows EmberData to create subscriptions that\n * work with any framework or change-notification system.\n *\n * @class NotificationManager\n * @public\n */class NotificationManager{constructor(store){this.store=store;this.isDestroyed=false;this._buffered=new Map();this._hasFlush=false;this._cache=new Map();}/**\n   * Subscribe to changes for a given resource identifier, resource addition/removal, or document addition/removal.\n   *\n   * ```ts\n   * export type CacheOperation = 'added' | 'removed' | 'updated' | 'state';\n   *\n   * export interface NotificationCallback {\n   *   (identifier: StableRecordIdentifier, notificationType: 'attributes' | 'relationships', key?: string): void;\n   *   (identifier: StableRecordIdentifier, notificationType: 'errors' | 'meta' | 'identity' | 'state'): void;\n   *   (identifier: StableRecordIdentifier, notificationType: NotificationType, key?: string): void;\n   * }\n   * export interface ResourceOperationCallback {\n   *   // resource updates\n   *   (identifier: StableRecordIdentifier, notificationType: CacheOperation): void;\n   * }\n   * export interface DocumentOperationCallback {\n   *   // document updates\n   *   (identifier: StableDocumentIdentifier, notificationType: CacheOperation): void;\n   * }\n   * ```\n   *\n   * @method subscribe\n   * @public\n   * @param {StableDocumentIdentifier | StableRecordIdentifier | 'resource' | 'document'} identifier\n   * @param {NotificationCallback | ResourceOperationCallback | DocumentOperationCallback} callback\n   * @return {UnsubscribeToken} an opaque token to be used with unsubscribe\n   */subscribe(identifier,callback){(test=>{if(!test){throw new Error(`Expected to receive a stable Identifier to subscribe to`);}})(identifier==='resource'||identifier==='document'||isStableIdentifier(identifier)||isDocumentIdentifier(identifier));let callbacks=this._cache.get(identifier);(test=>{if(!test){throw new Error(`expected to receive a valid callback`);}})(typeof callback==='function');(test=>{if(!test){throw new Error(`cannot subscribe with the same callback twice`);}})(!callbacks||!callbacks.includes(callback));// we use the callback as the cancellation token\n//@ts-expect-error\ncallback.for=identifier;if(!callbacks){callbacks=[];this._cache.set(identifier,callbacks);}callbacks.push(callback);return callback;}/**\n   * remove a previous subscription\n   *\n   * @method unsubscribe\n   * @public\n   * @param {UnsubscribeToken} token\n   */unsubscribe(token){if(!this.isDestroyed){_unsubscribe(token,this._cache);}}/**\n   * Custom Caches and Application Code should not call this method directly.\n   *\n   * @method notify\n   * @param identifier\n   * @param value\n   * @param key\n   * @return {Boolean} whether a notification was delivered to any subscribers\n   * @private\n   */notify(identifier,value,key){(test=>{if(!test){throw new Error(`Notify does not accept a key argument for the namespace '${value}'. Received key '${key||''}'.`);}})(!key||value==='attributes'||value==='relationships');if(!isStableIdentifier(identifier)&&!isDocumentIdentifier(identifier)){{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_NOTIFICATIONS||globalThis.getWarpDriveRuntimeConfig().debug.LOG_NOTIFICATIONS){// eslint-disable-next-line no-console\nconsole.log(`Notifying: Expected to receive a stable Identifier to notify '${value}' '${key||''}' with, but ${String(identifier)} is not in the cache`,identifier);}}return false;}const hasSubscribers=Boolean(this._cache.get(identifier)?.length);if(isCacheOperationValue(value)||hasSubscribers){let buffer=this._buffered.get(identifier);if(!buffer){buffer=[];this._buffered.set(identifier,buffer);}buffer.push([value,key]);{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_METRIC_COUNTS||globalThis.getWarpDriveRuntimeConfig().debug.LOG_METRIC_COUNTS){count(`notify ${'type'in identifier?identifier.type:'<document>'} ${value} ${key}`);}}if(!this._scheduleNotify()){{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_NOTIFICATIONS||globalThis.getWarpDriveRuntimeConfig().debug.LOG_NOTIFICATIONS){log('notify','buffered',`${'type'in identifier?identifier.type:'document'}`,identifier.lid,`${value}`,key||'');}}}}else{{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_NOTIFICATIONS||globalThis.getWarpDriveRuntimeConfig().debug.LOG_NOTIFICATIONS){log('notify','discarded',`${'type'in identifier?identifier.type:'document'}`,identifier.lid,`${value}`,key||'');}}{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_METRIC_COUNTS||globalThis.getWarpDriveRuntimeConfig().debug.LOG_METRIC_COUNTS){count(`DISCARDED notify ${'type'in identifier?identifier.type:'<document>'} ${value} ${key}`);}}}return hasSubscribers;}_onNextFlush(cb){this._onFlushCB=cb;}_scheduleNotify(){const asyncFlush=this.store._enableAsyncFlush;if(this._hasFlush){if(asyncFlush!==false&&!runLoopIsFlushing()){return false;}}if(asyncFlush&&!runLoopIsFlushing()){this._hasFlush=true;return false;}this._flush();return true;}_flush(){const buffered=this._buffered;if(buffered.size){this._buffered=new Map();buffered.forEach((states,identifier)=>{states.forEach(args=>{// @ts-expect-error\nthis._flushNotification(identifier,args[0],args[1]);});});}this._hasFlush=false;this._onFlushCB?.();this._onFlushCB=undefined;}_flushNotification(identifier,value,key){{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_NOTIFICATIONS||globalThis.getWarpDriveRuntimeConfig().debug.LOG_NOTIFICATIONS){log('notify','',`${'type'in identifier?identifier.type:'document'}`,identifier.lid,`${value}`,key||'');}}// TODO for documents this will need to switch based on Identifier kind\nif(isCacheOperationValue(value)){const callbackMap=this._cache.get(isDocumentIdentifier(identifier)?'document':'resource');if(callbackMap){callbackMap.forEach(cb=>{cb(identifier,value);});}}const callbacks=this._cache.get(identifier);if(!callbacks||!callbacks.length){return false;}callbacks.forEach(cb=>{// @ts-expect-error overload doesn't narrow within body\ncb(identifier,value,key);});return true;}destroy(){this.isDestroyed=true;this._cache.clear();}}/* eslint-disable @typescript-eslint/no-explicit-any *//*\n  We redefine Proxy because the native Proxy type treats the `target` and\n  `receiver` as the same type incorrectly.\n\n  We ported this from Typescript's own Proxy types on 3/10/2024.\n*/const NativeProxy=Proxy;function decorateMethodV2(prototype,prop,decorators){const origDesc=Object.getOwnPropertyDescriptor(prototype,prop);let desc={...origDesc};for(let decorator of decorators){desc=decorator(prototype,prop,desc)||desc;}if(desc.initializer!==void 0){desc.value=desc.initializer?desc.initializer.call(prototype):void 0;desc.initializer=void 0;}Object.defineProperty(prototype,prop,desc);}/**\n  @module @ember-data/store\n*/const ARRAY_GETTER_METHODS=new Set([Symbol.iterator,'concat','entries','every','fill','filter','find','findIndex','flat','flatMap','forEach','includes','indexOf','join','keys','lastIndexOf','map','reduce','reduceRight','slice','some','values']);const ARRAY_SETTER_METHODS=new Set(['push','pop','unshift','shift','splice','sort']);const SYNC_PROPS=new Set(['[]','length','links','meta']);function isArrayGetter(prop){return ARRAY_GETTER_METHODS.has(prop);}function isArraySetter(prop){return ARRAY_SETTER_METHODS.has(prop);}function isSelfProp(self,prop){return prop in self;}const ARRAY_SIGNAL=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.getOrSetGlobal)('#signal',Symbol('#signal'));const SOURCE=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.getOrSetGlobal)('#source',Symbol('#source'));const MUTATE=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.getOrSetGlobal)('#update',Symbol('#update'));const NOTIFY=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.getOrSetGlobal)('#notify',Symbol('#notify'));const IS_COLLECTION=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.getOrSetGlobal)('IS_COLLECTION',Symbol.for('Collection'));function notifyArray(arr){(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.addToTransaction)(arr[ARRAY_SIGNAL]);}function convertToInt(prop){if(typeof prop==='symbol')return null;const num=Number(prop);if(isNaN(num))return null;return num%1===0?num:null;}function safeForEach(instance,arr,store,callback,target){if(target===undefined){target=null;}// clone to prevent mutation\narr=arr.slice();(test=>{if(!test){throw new Error('`forEach` expects a function as first argument.');}})(typeof callback==='function');// because we retrieveLatest above we need not worry if array is mutated during iteration\n// by unloadRecord/rollbackAttributes\n// push/add/removeObject may still be problematic\n// but this is a more traditionally expected forEach bug.\nconst length=arr.length;// we need to access length to ensure we are consumed\nfor(let index=0;index<length;index++){callback.call(target,store._instanceCache.getRecord(arr[index]),index,instance);}return instance;}/**\n  A record array is an array that contains records of a certain type (or modelName).\n  The record array materializes records as needed when they are retrieved for the first\n  time. You should not create record arrays yourself. Instead, an instance of\n  `RecordArray` or its subclasses will be returned by your application's store\n  in response to queries.\n\n  This class should not be imported and instantiated by consuming applications.\n\n  @class RecordArray\n  @public\n*/class IdentifierArray{[NOTIFY](){notifyArray(this);}/**\n    The store that created this record array.\n     @property store\n    @private\n    @type Store\n    */destroy(clear){this.isDestroying=!clear;// changing the reference breaks the Proxy\n// this[SOURCE] = [];\nthis[SOURCE].length=0;this[NOTIFY]();this.isDestroyed=!clear;}// length must be on self for proxied methods to work properly\nget length(){return this[SOURCE].length;}set length(value){this[SOURCE].length=value;}constructor(options){/**\n    The flag to signal a `RecordArray` is currently loading data.\n    Example\n    ```javascript\n    let people = store.peekAll('person');\n    people.isUpdating; // false\n    people.update();\n    people.isUpdating; // true\n    ```\n    @property isUpdating\n    @public\n    @type Boolean\n  */_defineProperty(this,\"isLoaded\",true);_defineProperty(this,\"isDestroying\",false);_defineProperty(this,\"isDestroyed\",false);_defineProperty(this,\"_updatingPromise\",null);_defineProperty(this,\"identifier\",void 0);_defineProperty(this,IS_COLLECTION,true);_defineProperty(this,SOURCE,void 0);// eslint-disable-next-line @typescript-eslint/no-this-alias\nconst self=this;this.modelName=options.type;this.store=options.store;this._manager=options.manager;this.identifier=options.identifier||null;this[SOURCE]=options.identifiers;this[ARRAY_SIGNAL]=(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.createSignal)(this,'length');const store=options.store;const boundFns=new Map();const _SIGNAL=this[ARRAY_SIGNAL];const PrivateState={links:options.links||null,meta:options.meta||null};let transaction=false;// when a mutation occurs\n// we track all mutations within the call\n// and forward them as one\nconst proxy=new NativeProxy(this[SOURCE],{get(target,prop,receiver){const index=convertToInt(prop);if(_SIGNAL.shouldReset&&(index!==null||SYNC_PROPS.has(prop)||isArrayGetter(prop))){options.manager._syncArray(receiver);_SIGNAL.t=false;_SIGNAL.shouldReset=false;}if(index!==null){const identifier=target[index];if(!transaction){(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.subscribe)(_SIGNAL);}return identifier&&store._instanceCache.getRecord(identifier);}if(prop==='meta')return (0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.subscribe)(_SIGNAL),PrivateState.meta;if(prop==='links')return (0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.subscribe)(_SIGNAL),PrivateState.links;if(prop==='[]')return (0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.subscribe)(_SIGNAL),receiver;if(isArrayGetter(prop)){let fn=boundFns.get(prop);if(fn===undefined){if(prop==='forEach'){fn=function(){(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.subscribe)(_SIGNAL);transaction=true;const result=safeForEach(receiver,target,store,arguments[0],arguments[1]);transaction=false;return result;};}else{fn=function(){(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.subscribe)(_SIGNAL);// array functions must run through Reflect to work properly\n// binding via other means will not work.\ntransaction=true;const result=Reflect.apply(target[prop],receiver,arguments);transaction=false;return result;};}boundFns.set(prop,fn);}return fn;}if(isArraySetter(prop)){let fn=boundFns.get(prop);if(fn===undefined){fn=function(){// array functions must run through Reflect to work properly\n// binding via other means will not work.\nif(!options.allowMutation){(test=>{if(!test){throw new Error(`Mutating this array of records via ${String(prop)} is not allowed.`);}})(options.allowMutation);return;}const args=Array.prototype.slice.call(arguments);(test=>{if(!test){throw new Error(`Cannot start a new array transaction while a previous transaction is underway`);}})(!transaction);transaction=true;const result=self[MUTATE](target,receiver,prop,args,_SIGNAL);transaction=false;return result;};boundFns.set(prop,fn);}return fn;}if(isSelfProp(self,prop)){if(prop===NOTIFY||prop===ARRAY_SIGNAL||prop===SOURCE){return self[prop];}let fn=boundFns.get(prop);if(fn)return fn;const outcome=self[prop];if(typeof outcome==='function'){fn=function(){(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.subscribe)(_SIGNAL);// array functions must run through Reflect to work properly\n// binding via other means will not work.\nreturn Reflect.apply(outcome,receiver,arguments);};boundFns.set(prop,fn);return fn;}return (0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.subscribe)(_SIGNAL),outcome;}return target[prop];},// FIXME: Should this get a generic like get above?\nset(target,prop,value,receiver){if(prop==='length'){if(!transaction&&value===0){transaction=true;self[MUTATE](target,receiver,'length 0',[],_SIGNAL);transaction=false;return true;}else if(transaction){return Reflect.set(target,prop,value);}else{(test=>{{throw new Error(`unexpected length set`);}})();}}if(prop==='links'){PrivateState.links=value||null;return true;}if(prop==='meta'){PrivateState.meta=value||null;return true;}const index=convertToInt(prop);// we do not allow \"holey\" arrays and so if the index is\n// greater than length then we will disallow setting it.\n// however, there is a special case for \"unshift\" with more than\n// one item being inserted since current items will be moved to the\n// new indices first.\n// we \"loosely\" detect this by just checking whether we are in\n// a transaction.\nif(index===null||index>target.length){if(index!==null&&transaction){const identifier=recordIdentifierFor(value);(test=>{if(!test){throw new Error(`Cannot set index ${index} past the end of the array.`);}})(isStableIdentifier(identifier));target[index]=identifier;return true;}else if(isSelfProp(self,prop)){// @ts-expect-error not all properties are indeces and we can't safely cast\nself[prop]=value;return true;}return false;}if(!options.allowMutation){(test=>{if(!test){throw new Error(`Mutating ${String(prop)} on this Array is not allowed.`);}})(options.allowMutation);return false;}const original=target[index];const newIdentifier=extractIdentifierFromRecord$2(value);(test=>{if(!test){throw new Error(`Expected a record`);}})(isStableIdentifier(newIdentifier));// We generate \"transactions\" whenever a setter method on the array\n// is called and might bulk update multiple array cells. Fundamentally,\n// all array operations decompose into individual cell replacements.\n// e.g. a push is really a \"replace cell at next index with new value\"\n// or a splice is \"shift all values left/right by X and set out of new\n// bounds cells to undefined\"\n//\n// so, if we are in a transaction, then this is not a user generated change\n// but one generated by a setter method. In this case we want to only apply\n// the change to the target array and not call the MUTATE method.\n// If there is no transaction though, then this means the user themselves has\n// directly changed the value of a specific index and we need to thus generate\n// a mutation for that change.\n// e.g. \"arr.push(newVal)\" is handled by a \"addToRelatedRecords\" mutation within\n// a transaction.\n// while \"arr[arr.length] = newVal;\" is handled by this replace cell code path.\nif(!transaction){self[MUTATE](target,receiver,'replace cell',[index,original,newIdentifier],_SIGNAL);}else{target[index]=newIdentifier;}return true;},deleteProperty(target,prop){(test=>{if(!test){throw new Error(`Deleting keys on managed arrays is disallowed`);}})(transaction);if(!transaction){return false;}return Reflect.deleteProperty(target,prop);},getPrototypeOf(){return Array.prototype;}});{Object.defineProperty(this,'__SHOW_ME_THE_DATA_(debug mode only)__',{enumerable:false,configurable:true,get(){return proxy.slice();}});}(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.createArrayTags)(proxy,_SIGNAL);this[NOTIFY]=this[NOTIFY].bind(proxy);return proxy;}/**\n    Used to get the latest version of all of the records in this array\n    from the adapter.\n     Example\n     ```javascript\n    let people = store.peekAll('person');\n    people.isUpdating; // false\n     people.update().then(function() {\n      people.isUpdating; // false\n    });\n     people.isUpdating; // true\n    ```\n     @method update\n    @public\n  */update(){if(this.isUpdating){return this._updatingPromise;}this.isUpdating=true;const updatingPromise=this._update();void updatingPromise.finally(()=>{this._updatingPromise=null;if(this.isDestroying||this.isDestroyed){return;}this.isUpdating=false;});this._updatingPromise=updatingPromise;return updatingPromise;}/*\n    Update this Array and return a promise which resolves once the update\n    is finished.\n   */_update(){(test=>{if(!test){throw new Error(`_update cannot be used with this array`);}})(this.modelName);// @ts-expect-error typescript is unable to handle the complexity of\n//   T = unknown, modelName = string\n//   T extends TypedRecordInstance, modelName = TypeFromInstance<T>\n// both being valid options to pass through here.\nreturn this.store.findAll(this.modelName,{reload:true});}// TODO deprecate\n/**\n    Saves all of the records in the `RecordArray`.\n     Example\n     ```javascript\n    let messages = store.peekAll('message');\n    messages.forEach(function(message) {\n      message.hasBeenSeen = true;\n    });\n    messages.save();\n    ```\n     @method save\n    @public\n    @return {Promise<IdentifierArray>} promise\n  */save(){const promise=Promise.all(this.map(record=>this.store.saveRecord(record))).then(()=>this);return promise;}}// this will error if someone tries to call\n// A(identifierArray) since it is not configurable\n// which is preferable to the `meta` override we used\n// before which required importing all of Ember\n_IdentifierArray=IdentifierArray;decorateMethodV2(_IdentifierArray.prototype,\"length\",[_ember_data_tracking__WEBPACK_IMPORTED_MODULE_8__.compat]);const desc={enumerable:true,configurable:false,get:function(){// here to support computed chains\n// and {{#each}}\n{return this;}}};(0,_ember_data_tracking__WEBPACK_IMPORTED_MODULE_8__.compat)(desc);Object.defineProperty(IdentifierArray.prototype,'[]',desc);(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.defineSignal)(IdentifierArray.prototype,'isUpdating',false);class Collection extends IdentifierArray{constructor(options){super(options);_defineProperty(this,\"query\",null);this.query=options.query||null;this.isLoaded=options.isLoaded||false;}_update(){const{store,query}=this;// TODO save options from initial request?\n(test=>{if(!test){throw new Error(`update cannot be used with this array`);}})(this.modelName);(test=>{if(!test){throw new Error(`update cannot be used with no query`);}})(query);// @ts-expect-error typescript is unable to handle the complexity of\n//   T = unknown, modelName = string\n//   T extends TypedRecordInstance, modelName = TypeFromInstance<T>\n// both being valid options to pass through here.\nconst promise=store.query(this.modelName,query,{_recordArray:this});return promise;}destroy(clear){super.destroy(clear);this._manager._managed.delete(this);this._manager._pending.delete(this);}}// trick the proxy \"in\" check\nCollection.prototype.query=null;// Ensure instanceof works correctly\n// Object.setPrototypeOf(IdentifierArray.prototype, Array.prototype);\nfunction assertRecordPassedToHasMany$1(record){(test=>{if(!test){throw new Error(`All elements of a hasMany relationship must be instances of Model, you passed $${typeof record}`);}})(function(){try{recordIdentifierFor(record);return true;}catch{return false;}}());}function extractIdentifierFromRecord$2(record){if(!record){return null;}assertRecordPassedToHasMany$1(record);return recordIdentifierFor(record);}/**\n  @module @ember-data/store\n*/const FAKE_ARR=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.getOrSetGlobal)('FAKE_ARR',{});const SLICE_BATCH_SIZE=1200;/**\n * This is a clever optimization.\n *\n * clever optimizations rarely stand the test of time, so if you're\n * ever curious or think something better is possible please benchmark\n * and discuss. The benchmark for this at the time of writing is in\n * `scripts/benchmark-push.js`\n *\n * This approach turns out to be 150x faster in Chrome and node than\n * simply using push or concat. It's highly susceptible to the specifics\n * of the batch size, and may require tuning.\n *\n * Clever optimizations should always come with a `why`. This optimization\n * exists for two reasons.\n *\n * 1) array.push(...objects) and Array.prototype.push.apply(arr, objects)\n *   are susceptible to stack overflows. The size of objects at which this\n *   occurs varies by environment, browser, and current stack depth and memory\n *   pressure; however, it occurs in all browsers in fairly pristine conditions\n *   somewhere around 125k to 200k elements. Since EmberData regularly encounters\n *   arrays larger than this in size, we cannot use push.\n *\n * 2) `array.concat` or simply setting the array to a new reference is often an\n *   easier approach; however, native Proxy to an array cannot swap it's target array\n *   and attempts at juggling multiple array sources have proven to be victim to a number\n *   of browser implementation bugs. Should these bugs be addressed then we could\n *   simplify to using `concat`, however, do note this is currently 150x faster\n *   than concat, and due to the overloaded signature of concat will likely always\n *   be faster.\n *\n * Sincerely,\n *   - runspired (Chris Thoburn) 08/21/2022\n *\n * @function fastPush\n * @internal\n * @param target the array to push into\n * @param source the items to push into target\n */function fastPush(target,source){let startLength=0;const newLength=source.length;while(newLength-startLength>SLICE_BATCH_SIZE){// eslint-disable-next-line prefer-spread\ntarget.push.apply(target,source.slice(startLength,startLength+SLICE_BATCH_SIZE));startLength+=SLICE_BATCH_SIZE;}// eslint-disable-next-line prefer-spread\ntarget.push.apply(target,source.slice(startLength));}/**\n  @class RecordArrayManager\n  @internal\n*/class RecordArrayManager{constructor(options){this.store=options.store;this.isDestroying=false;this.isDestroyed=false;this._live=new Map();this._managed=new Set();this._pending=new Map();this._staged=new Map();this._keyedArrays=new Map();this._identifiers=new Map();this._set=new Map();this._visibilitySet=new Map();this._subscription=this.store.notifications.subscribe('document',(identifier,type)=>{if(type==='updated'&&this._keyedArrays.has(identifier.lid)){const array=this._keyedArrays.get(identifier.lid);this.dirtyArray(array,0,true);}});this._subscription=this.store.notifications.subscribe('resource',(identifier,type)=>{if(type==='added'){this._visibilitySet.set(identifier,true);this.identifierAdded(identifier);}else if(type==='removed'){this._visibilitySet.set(identifier,false);this.identifierRemoved(identifier);}else if(type==='state'){this.identifierChanged(identifier);}});}_syncArray(array){const pending=this._pending.get(array);const isRequestArray=isCollection(array);if(!isRequestArray&&!pending||this.isDestroying||this.isDestroyed){return;}// first flush any staged changes\nif(pending){sync(array,pending,this._set.get(array));this._pending.delete(array);}// then pull new state if required\nif(isRequestArray){const tag=array[ARRAY_SIGNAL];if(tag.reason==='cache-sync'){tag.reason=null;const doc=this.store.cache.peek(array.identifier);(test=>{if(!test){throw new Error(`Expected to find a document for ${array.identifier.lid} but found none`);}})(doc);const data=!('data'in doc)||!Array.isArray(doc.data)?[]:doc.data;// TODO technically we should destroy here if\n// !('data' in doc) || !Array.isArray(doc.data)\n// is true.\nthis.populateManagedArray(array,data,null);}}}mutate(mutation){this.store.cache.mutate(mutation);}/**\n    Get the `RecordArray` for a modelName, which contains all loaded records of\n    given modelName.\n     @method liveArrayFor\n    @internal\n    @param {String} modelName\n    @return {RecordArray}\n  */liveArrayFor(type){let array=this._live.get(type);const identifiers=[];const staged=this._staged.get(type);if(staged){staged.forEach((value,key)=>{if(value==='add'){identifiers.push(key);}});this._staged.delete(type);}if(!array){array=new IdentifierArray({type,identifiers,store:this.store,allowMutation:false,manager:this});this._live.set(type,array);this._set.set(array,new Set(identifiers));}return array;}getCollection(config){if(config.identifier&&this._keyedArrays.has(config.identifier.lid)){return this._keyedArrays.get(config.identifier.lid);}const options={type:config.type,identifier:config.identifier||null,links:config.doc?.links||null,meta:config.doc?.meta||null,query:config.query||null,identifiers:config.identifiers||[],isLoaded:!!config.identifiers?.length,allowMutation:false,store:this.store,manager:this};const array=new Collection(options);this._managed.add(array);this._set.set(array,new Set(options.identifiers||[]));if(config.identifier){this._keyedArrays.set(config.identifier.lid,array);}if(config.identifiers){associate(this._identifiers,array,config.identifiers);}return array;}dirtyArray(array,delta,shouldSyncFromCache){if(array===FAKE_ARR){return;}const tag=array[ARRAY_SIGNAL];if(shouldSyncFromCache){tag.reason='cache-sync';}if(!tag.shouldReset){tag.shouldReset=true;(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.addTransactionCB)(array[NOTIFY]);}else if(delta>0&&!tag.t){(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.addTransactionCB)(array[NOTIFY]);}}_getPendingFor(identifier,includeManaged,isRemove){if(this.isDestroying||this.isDestroyed){return;}const liveArray=this._live.get(identifier.type);const allPending=this._pending;const pending=new Map();if(includeManaged){const managed=this._identifiers.get(identifier);if(managed){managed.forEach(arr=>{let changes=allPending.get(arr);if(!changes){changes=new Map();allPending.set(arr,changes);}pending.set(arr,changes);});}}// during unloadAll we can ignore removes since we've already\n// cleared the array.\nif(liveArray&&liveArray[SOURCE].length===0&&isRemove){const pendingLive=allPending.get(liveArray);if(!pendingLive||pendingLive.size===0){return pending;}}if(!liveArray){// start building a changeset for when we eventually\n// do have a live array\nlet changes=this._staged.get(identifier.type);if(!changes){changes=new Map();this._staged.set(identifier.type,changes);}pending.set(FAKE_ARR,changes);}else{let changes=allPending.get(liveArray);if(!changes){changes=new Map();allPending.set(liveArray,changes);}pending.set(liveArray,changes);}return pending;}populateManagedArray(array,identifiers,payload){this._pending.delete(array);const source=array[SOURCE];(test=>{if(!test){throw new Error(`The new state of the collection should not be using the same array reference as the original state.`);}})(source!==identifiers);const old=source.slice();source.length=0;fastPush(source,identifiers);this._set.set(array,new Set(identifiers));notifyArray(array);array.meta=payload?.meta||null;array.links=payload?.links||null;array.isLoaded=true;disassociate(this._identifiers,array,old);associate(this._identifiers,array,identifiers);}identifierAdded(identifier){const changeSets=this._getPendingFor(identifier,false);if(changeSets){changeSets.forEach((changes,array)=>{const existing=changes.get(identifier);if(existing==='del'){changes.delete(identifier);}else{changes.set(identifier,'add');this.dirtyArray(array,changes.size,false);}});}}identifierRemoved(identifier){const changeSets=this._getPendingFor(identifier,true,true);if(changeSets){changeSets.forEach((changes,array)=>{const existing=changes.get(identifier);if(existing==='add'){changes.delete(identifier);}else{changes.set(identifier,'del');this.dirtyArray(array,changes.size,false);}});}}identifierChanged(identifier){const newState=this.store._instanceCache.recordIsLoaded(identifier,true);// if the change matches the most recent direct added/removed\n// state, then we can ignore it\nif(this._visibilitySet.get(identifier)===newState){return;}if(newState){this.identifierAdded(identifier);}else{this.identifierRemoved(identifier);}}clear(isClear=true){this._live.forEach(array=>array.destroy(isClear));this._managed.forEach(array=>array.destroy(isClear));this._managed.clear();this._identifiers.clear();this._pending.clear();this._set.forEach(set=>set.clear());this._visibilitySet.clear();}destroy(){this.isDestroying=true;this.clear(false);this._live.clear();this.isDestroyed=true;this.store.notifications.unsubscribe(this._subscription);}}function associate(ArraysCache,array,identifiers){for(let i=0;i<identifiers.length;i++){const identifier=identifiers[i];let cache=ArraysCache.get(identifier);if(!cache){cache=new Set();ArraysCache.set(identifier,cache);}cache.add(array);}}function disassociate(ArraysCache,array,identifiers){for(let i=0;i<identifiers.length;i++){disassociateIdentifier(ArraysCache,array,identifiers[i]);}}function disassociateIdentifier(ArraysCache,array,identifier){const cache=ArraysCache.get(identifier);if(cache){cache.delete(array);}}function sync(array,changes,arraySet){const state=array[SOURCE];const adds=[];const removes=[];changes.forEach((value,key)=>{if(value==='add'){// likely we want to keep a Set along-side\nif(arraySet.has(key)){return;}adds.push(key);arraySet.add(key);}else{if(arraySet.has(key)){removes.push(key);arraySet.delete(key);}}});if(removes.length){if(removes.length===state.length){state.length=0;// changing the reference breaks the Proxy\n// state = array[SOURCE] = [];\n}else{removes.forEach(i=>{const index=state.indexOf(i);if(index!==-1){state.splice(index,1);arraySet.delete(i);}});}}if(adds.length){fastPush(state,adds);// changing the reference breaks the Proxy\n// else we could do this\n/*\n    if (state.length === 0) {\n      array[SOURCE] = adds;\n    } else {\n      array[SOURCE] = state.concat(adds);\n    }\n    */}}function isCollection(array){return array.identifier!==null;}/**\n * @module @ember-data/store\n */const Touching=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.getOrSetGlobal)('Touching',Symbol('touching'));const RequestPromise=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.getOrSetGlobal)('RequestPromise',Symbol('promise'));const EMPTY_ARR=Object.freeze([]);function hasRecordIdentifier(op){return'recordIdentifier'in op;}/**\n * The RequestStateService is used to track the state of requests\n * for fetching or updating known resource identifies that are inflight.\n *\n * @class RequestStateService\n * @public\n */class RequestStateService{constructor(store){_defineProperty(this,\"_pending\",new Map());_defineProperty(this,\"_done\",new Map());_defineProperty(this,\"_subscriptions\",new Map());_defineProperty(this,\"_toFlush\",[]);_defineProperty(this,\"_store\",void 0);this._store=store;}_clearEntries(identifier){this._done.delete(identifier);}_enqueue(promise,queryRequest){const query=queryRequest.data[0];if(hasRecordIdentifier(query)){const identifier=query.recordIdentifier;const type=query.op==='saveRecord'?'mutation':'query';if(!this._pending.has(identifier)){this._pending.set(identifier,[]);}const request={state:'pending',request:queryRequest,type};request[Touching]=[query.recordIdentifier];request[RequestPromise]=promise;this._pending.get(identifier).push(request);this._triggerSubscriptions(request);return promise.then(result=>{this._dequeue(identifier,request);const finalizedRequest={state:'fulfilled',request:queryRequest,type,response:{data:result}};finalizedRequest[Touching]=request[Touching];this._addDone(finalizedRequest);this._triggerSubscriptions(finalizedRequest);return result;},error=>{this._dequeue(identifier,request);const finalizedRequest={state:'rejected',request:queryRequest,type,response:{data:error}};finalizedRequest[Touching]=request[Touching];this._addDone(finalizedRequest);this._triggerSubscriptions(finalizedRequest);throw error;});}(test=>{{throw new Error(`Expected a well formed  query`);}})();}_triggerSubscriptions(req){if(req.state==='pending'){this._flushRequest(req);return;}this._toFlush.push(req);if(this._toFlush.length===1){this._store.notifications._onNextFlush(()=>{this._flush();});}}_flush(){this._toFlush.forEach(req=>{this._flushRequest(req);});this._toFlush=[];}_flushRequest(req){req[Touching].forEach(identifier=>{const subscriptions=this._subscriptions.get(identifier);if(subscriptions){subscriptions.forEach(callback=>callback(req));}});}_dequeue(identifier,request){const pending=this._pending.get(identifier);this._pending.set(identifier,pending.filter(req=>req!==request));}_addDone(request){request[Touching].forEach(identifier=>{// TODO add support for multiple\nconst requestDataOp=request.request.data[0].op;let requests=this._done.get(identifier);if(requests){requests=requests.filter(req=>{// TODO add support for multiple\nlet data;if(Array.isArray(req.request.data)){data=req.request.data[0];}else{data=req.request.data;}return data.op!==requestDataOp;});}requests=requests||[];requests.push(request);this._done.set(identifier,requests);});}/**\n   * Subscribe to requests for a given resource identity.\n   *\n   * The callback will receive the current state of the request.\n   *\n   * ```ts\n   * interface RequestState {\n   *   state: 'pending' | 'fulfilled' | 'rejected';\n   *   type: 'query' | 'mutation';\n   *   request: Request;\n   *   response?: { data: unknown };\n   * }\n   * ```\n   *\n   * Note: It should be considered dangerous to use this API for more than simple\n   * state derivation or debugging. The `request` and `response` properties are poorly\n   * spec'd and may change unexpectedly when shifting what Handlers are in use or how\n   * requests are issued from the Store.\n   *\n   * We expect to revisit this API in the near future as we continue to refine the\n   * RequestManager ergonomics, as a simpler but more powerful direct integration\n   * with the RequestManager for these purposes is likely to be a better long-term\n   * design.\n   *\n   * @method subscribeForRecord\n   * @public\n   * @param {StableRecordIdentifier} identifier\n   * @param {(state: RequestState) => void} callback\n   */subscribeForRecord(identifier,callback){let subscriptions=this._subscriptions.get(identifier);if(!subscriptions){subscriptions=[];this._subscriptions.set(identifier,subscriptions);}subscriptions.push(callback);}/**\n   * Retrieve all active requests for a given resource identity.\n   *\n   * @method getPendingRequestsForRecord\n   * @public\n   * @param {StableRecordIdentifier} identifier\n   * @return {RequestState[]} an array of request states for any pending requests for the given identifier\n   */getPendingRequestsForRecord(identifier){return this._pending.get(identifier)||EMPTY_ARR;}/**\n   * Retrieve the last completed request for a given resource identity.\n   *\n   * @method getLastRequestForRecord\n   * @public\n   * @param {StableRecordIdentifier} identifier\n   * @return {RequestState | null} the state of the most recent request for the given identifier\n   */getLastRequestForRecord(identifier){const requests=this._done.get(identifier);if(requests){return requests[requests.length-1];}return null;}}function isNonEmptyString(str){return Boolean(str&&typeof str==='string');}function constructResource(type,id,lid){if(typeof type==='object'&&type!==null){const resource=type;if(isStableIdentifier(resource)){return resource;}if('id'in resource){resource.id=coerceId(resource.id);}(test=>{if(!test){throw new Error('Expected either id or lid to be a valid string');}})('id'in resource&&isNonEmptyString(resource.id)||isNonEmptyString(resource.lid));(test=>{if(!test){throw new Error('if id is present, the type must be a string');}})(!('id'in resource)||typeof resource.type==='string');return resource;}else{const trueId=coerceId(id);if(!isNonEmptyString(trueId)){if(isNonEmptyString(lid)){return{lid};}throw new Error('Expected either id or lid to be a valid string');}(test=>{if(!test){throw new Error('type must be a string');}})(typeof type==='string');if(isNonEmptyString(lid)){return{type,id:trueId,lid};}return{type,id:trueId};}}/**\n  @module @ember-data/store\n */// this import location is deprecated but breaks in 4.8 and older\n// @ts-expect-error adding to globalThis\nglobalThis.setWarpDriveLogging=_warp_drive_core_types_runtime__WEBPACK_IMPORTED_MODULE_2__.setLogging;// @ts-expect-error adding to globalThis\nglobalThis.getWarpDriveRuntimeConfig=_warp_drive_core_types_runtime__WEBPACK_IMPORTED_MODULE_2__.getRuntimeConfig;{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_METRIC_COUNTS||globalThis.getWarpDriveRuntimeConfig().debug.LOG_METRIC_COUNTS){// @ts-expect-error adding to globalThis\n// eslint-disable-next-line\nglobalThis.__WarpDriveMetricCountData=globalThis.__WarpDriveMetricCountData||{};// @ts-expect-error adding to globalThis\nglobalThis.getWarpDriveMetricCounts=()=>{// @ts-expect-error\n// eslint-disable-next-line\nreturn structuredClone(globalThis.__WarpDriveMetricCountData);};// @ts-expect-error adding to globalThis\nglobalThis.resetWarpDriveMetricCounts=()=>{// @ts-expect-error\nglobalThis.__WarpDriveMetricCountData={};};{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.__INTERNAL_LOG_NATIVE_MAP_SET_COUNTS||globalThis.getWarpDriveRuntimeConfig().debug.__INTERNAL_LOG_NATIVE_MAP_SET_COUNTS){// @ts-expect-error adding to globalThis\nglobalThis.__primitiveInstanceId=0;function interceptAndLog(klassName,methodName){const klass=globalThis[klassName];if(methodName==='constructor'){const instantiationLabel=`new ${klassName}()`;// @ts-expect-error\nglobalThis[klassName]=class extends klass{// @ts-expect-error\nconstructor(...args){// eslint-disable-next-line\nsuper(...args);// @ts-expect-error\nconst instanceId=globalThis.__primitiveInstanceId++;// @ts-expect-error\n// eslint-disable-next-line\nglobalThis.__WarpDriveMetricCountData[instantiationLabel]=// @ts-expect-error\n// eslint-disable-next-line\n(globalThis.__WarpDriveMetricCountData[instantiationLabel]||0)+1;// @ts-expect-error\nthis.instanceName=`${klassName}:${instanceId} - ${new Error().stack?.split('\\n')[2]}`;}};}else{// @ts-expect-error\n// eslint-disable-next-line\nconst original=klass.prototype[methodName];const logName=`${klassName}.${methodName}`;// @ts-expect-error\nklass.prototype[methodName]=function(...args){// @ts-expect-error\n// eslint-disable-next-line\nglobalThis.__WarpDriveMetricCountData[logName]=(globalThis.__WarpDriveMetricCountData[logName]||0)+1;// @ts-expect-error\nconst{instanceName}=this;if(!instanceName){// @ts-expect-error\nconst instanceId=globalThis.__primitiveInstanceId++;// @ts-expect-error\nthis.instanceName=`${klassName}.${methodName}:${instanceId} - ${new Error().stack?.split('\\n')[2]}`;}const instanceLogName=`${logName} (${instanceName})`;// @ts-expect-error\n// eslint-disable-next-line\nglobalThis.__WarpDriveMetricCountData[instanceLogName]=// @ts-expect-error\n// eslint-disable-next-line\n(globalThis.__WarpDriveMetricCountData[instanceLogName]||0)+1;// eslint-disable-next-line\nreturn original.apply(this,args);};}}interceptAndLog('Set','constructor');interceptAndLog('Set','add');interceptAndLog('Set','delete');interceptAndLog('Set','has');interceptAndLog('Set','set');interceptAndLog('Set','get');interceptAndLog('Map','constructor');interceptAndLog('Map','set');interceptAndLog('Map','delete');interceptAndLog('Map','has');interceptAndLog('Map','add');interceptAndLog('Map','get');interceptAndLog('WeakSet','constructor');interceptAndLog('WeakSet','add');interceptAndLog('WeakSet','delete');interceptAndLog('WeakSet','has');interceptAndLog('WeakSet','set');interceptAndLog('WeakSet','get');interceptAndLog('WeakMap','constructor');interceptAndLog('WeakMap','set');interceptAndLog('WeakMap','delete');interceptAndLog('WeakMap','has');interceptAndLog('WeakMap','add');interceptAndLog('WeakMap','get');}}}}// `AwaitedKeys` is needed here to resolve any promise types like `PromiseBelongsTo`.\n/**\n * Currently only records that extend object can be created via\n * store.createRecord. This is a limitation of the current API,\n * but can be worked around by creating a new identifier, running\n * the cache.clientDidCreate method, and then peeking the record\n * for the identifier.\n *\n * To assign primary key to a record during creation, only `id` will\n * work correctly for `store.createRecord`, other primary key may be\n * handled by updating the record after creation or using the flow\n * described above.\n *\n * TODO: These are limitations we want to (and can) address. If you\n * have need of lifting these limitations, please open an issue.\n *\n * @typedoc\n *//**\n * A Store coordinates interaction between your application, a [Cache](https://api.emberjs.com/ember-data/release/classes/%3CInterface%3E%20Cache),\n * and sources of data (such as your API or a local persistence layer)\n * accessed via a [RequestManager](https://github.com/emberjs/data/tree/main/packages/request).\n *\n * ```app/services/store.js\n * import Store from '@ember-data/store';\n *\n * export default class extends Store {}\n * ```\n *\n * Most Applications will only have a single `Store` configured as a Service\n * in this manner. However, setting up multiple stores is possible, including using\n * each as a unique service or within a specific context.\n *\n\n  @class Store\n  @public\n*/// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nconst EmptyClass=class{// eslint-disable-next-line @typescript-eslint/no-useless-constructor\nconstructor(args){}};const _BaseClass=EmptyClass;const BaseClass=_BaseClass.default?_BaseClass.default:_BaseClass;if(BaseClass!==EmptyClass){(0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(`The Store class extending from EmberObject is deprecated.\nPlease remove usage of EmberObject APIs and mark your class as not requiring it.\n\nTo mark the class as no longer extending from EmberObject, in ember-cli-build.js\nset the following config:\n\n\\`\\`\\`js\nconst app = new EmberApp(defaults, {\n  emberData: {\n    deprecations: {\n      DEPRECATE_STORE_EXTENDS_EMBER_OBJECT: false\n    }\n  }\n});\n\\`\\`\\`\n`,false,{id:'ember-data:deprecate-store-extends-ember-object',until:'6.0',for:'ember-data',url:'https://deprecations.emberjs.com/id/ember-data-deprecate-store-extends-ember-object',since:{available:'4.13',enabled:'5.4'}});}class Store extends BaseClass{/**\n   * Provides access to the NotificationManager associated\n   * with this Store instance.\n   *\n   * The NotificationManager can be used to subscribe to\n   * changes to the cache.\n   *\n   * @property {NotificationManager} notifications\n   * @public\n   *//**\n   * Provides access to the SchemaService instance\n   * for this Store instance.\n   *\n   * The SchemaService can be used to query for\n   * information about the schema of a resource.\n   *\n   * @property {SchemaService} schema\n   * @public\n   */get schema(){if(!this._schema){this._schema=this.createSchemaService();}return this._schema;}/**\n   * Provides access to the IdentifierCache instance\n   * for this store.\n   *\n   * The IdentifierCache can be used to generate or\n   * retrieve a stable unique identifier for any resource.\n   *\n   * @property {IdentifierCache} identifierCache\n   * @public\n   *//**\n   * Provides access to the requestManager instance associated\n   * with this Store instance.\n   *\n   * When using `ember-data` this property is automatically\n   * set to an instance of `RequestManager`. When not using `ember-data`\n   * you must configure this property yourself, either by declaring\n   * it as a service or by initializing it.\n   *\n   * ```ts\n   * import Store, { CacheHandler } from '@ember-data/store';\n   * import RequestManager from '@ember-data/request';\n   * import Fetch from '@ember-data/request/fetch';\n   *\n   * class extends Store {\n   *   requestManager = new RequestManager()\n   *    .use([Fetch])\n   *    .useCache(CacheHandler);\n   * }\n   * ```\n   *\n   * @public\n   * @property {RequestManager} requestManager\n   *//**\n   * A Property which an App may set to provide a CachePolicy\n   * to control when a cached request becomes stale.\n   *\n   * Note, when defined, these methods will only be invoked if a\n   * cache key exists for the request, either because the request\n   * contains `cacheOptions.key` or because the [IdentifierCache](/ember-data/release/classes/IdentifierCache)\n   * was able to generate a key for the request using the configured\n   * [generation method](/ember-data/release/functions/@ember-data%2Fstore/setIdentifierGenerationMethod).\n   *\n   * `isSoftExpired` will only be invoked if `isHardExpired` returns `false`.\n   *\n   * ```ts\n   * store.lifetimes = {\n   *   // make the request and ignore the current cache state\n   *   isHardExpired(identifier: StableDocumentIdentifier): boolean {\n   *     return false;\n   *   }\n   *\n   *   // make the request in the background if true, return cache state\n   *   isSoftExpired(identifier: StableDocumentIdentifier): boolean {\n   *     return false;\n   *   }\n   * }\n   * ```\n   *\n   * @public\n   * @property {CachePolicy|undefined} lifetimes\n   */// Private\n/**\n   * Async flush buffers notifications until flushed\n   * by finalization of a future configured by store.request\n   *\n   * This is useful for ensuring that notifications are delivered\n   * prior to the promise resolving but without risk of promise\n   * interleaving.\n   *\n   * @internal\n   */// DEBUG-only properties\nget isDestroying(){return this._isDestroying;}set isDestroying(value){this._isDestroying=value;}get isDestroyed(){return this._isDestroyed;}set isDestroyed(value){this._isDestroyed=value;}/**\n    @method init\n    @private\n  */constructor(createArgs){super(createArgs);Object.assign(this,createArgs);this.identifierCache=new IdentifierCache();this.notifications=new NotificationManager(this);// private but maybe useful to be here, somewhat intimate\nthis.recordArrayManager=new RecordArrayManager({store:this});// private\nthis._requestCache=new RequestStateService(this);this._instanceCache=new InstanceCache(this);this.isDestroying=false;this.isDestroyed=false;}_run(cb){(test=>{if(!test){throw new Error(`EmberData should never encounter a nested run`);}})(!this._cbs);const _cbs=this._cbs={};{try{cb();if(_cbs.coalesce){_cbs.coalesce();}if(_cbs.sync){_cbs.sync();}if(_cbs.notify){_cbs.notify();}}finally{this._cbs=null;}}}/**\n   * Executes the callback, ensurng that any work that calls\n   * store._schedule is executed after in the right order.\n   *\n   * When queues already exist, scheduled callbacks will\n   * join the existing queue.\n   *\n   * @internal\n   */_join(cb){if(this._cbs){cb();}else{this._run(cb);}}_schedule(name,cb){(test=>{if(!test){throw new Error(`EmberData expects to schedule only when there is an active run`);}})(!!this._cbs);(test=>{if(!test){throw new Error(`EmberData expects only one flush per queue name, cannot schedule ${name}`);}})(!this._cbs[name]);this._cbs[name]=cb;}/**\n   * Retrieve the RequestStateService instance\n   * associated with this Store.\n   *\n   * This can be used to query the status of requests\n   * that have been initiated for a given identifier.\n   *\n   * @method getRequestStateService\n   * @return {RequestStateService}\n   * @public\n   */getRequestStateService(){return this._requestCache;}_getAllPending(){{const all=[];const pending=this._requestCache._pending;pending.forEach(requests=>{all.push(...requests.map(v=>v[RequestPromise]));});this.requestManager._pending.forEach(v=>all.push(v));const promise=Promise.allSettled(all);promise.length=all.length;return promise;}}/**\n   * Issue a request via the configured RequestManager,\n   * inserting the response into the cache and handing\n   * back a Future which resolves to a ResponseDocument\n   *\n   * ## Cache Keys\n   *\n   * Only GET requests with a url or requests with an explicit\n   * cache key (`cacheOptions.key`) will have the request result\n   * and document cached.\n   *\n   * The cache key used is `requestConfig.cacheOptions.key`\n   * if present, falling back to `requestConfig.url`.\n   *\n   * Params are not serialized as part of the cache-key, so\n   * either ensure they are already in the url or utilize\n   * `requestConfig.cacheOptions.key`. For queries issued\n   * via the `POST` method `requestConfig.cacheOptions.key`\n   * MUST be supplied for the document to be cached.\n   *\n   * ## Requesting Without a Cache Key\n   *\n   * Resource data within the request is always updated in the cache,\n   * regardless of whether a cache key is present for the request.\n   *\n   * ## Fulfilling From Cache\n   *\n   * When a cache-key is determined, the request may fulfill\n   * from cache provided the cache is not stale.\n   *\n   * Cache staleness is determined by the configured CachePolicy\n   * with priority given to the `cacheOptions.reload` and\n   * `cacheOptions.backgroundReload` on the request if present.\n   *\n   * If the cache data has soft expired or the request asks for a background\n   * reload, the request will fulfill from cache if possible and\n   * make a non-blocking request in the background to update the cache.\n   *\n   * If the cache data has hard expired or the request asks for a reload,\n   * the request will not fulfill from cache and will make a blocking\n   * request to update the cache.\n   *\n   * ## The Response\n   *\n   * The primary difference between `requestManager.request` and `store.request`\n   * is that `store.request` will attempt to hydrate the response content into\n   * a response Document containing RecordInstances.\n   *\n   * @method request\n   * @param {StoreRequestInput} requestConfig\n   * @return {Future}\n   * @public\n   */request(requestConfig){// we lazily set the cache handler when we issue the first request\n// because constructor doesn't allow for this to run after\n// the user has had the chance to set the prop.\nconst opts={store:this,[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_1__.EnableHydration]:requestConfig[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_1__.EnableHydration]??true};if(requestConfig.records){const identifierCache=this.identifierCache;opts.records=requestConfig.records.map(r=>identifierCache.getOrCreateRecordIdentifier(r));}{if(this.DISABLE_WAITER){opts.disableTestWaiter=typeof requestConfig.disableTestWaiter==='boolean'?requestConfig.disableTestWaiter:true;}}{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_REQUESTS||globalThis.getWarpDriveRuntimeConfig().debug.LOG_REQUESTS){let options;try{options=JSON.parse(JSON.stringify(requestConfig));}catch{options=requestConfig;}// eslint-disable-next-line no-console\nconsole.log(`request: [[START]] ${requestConfig.op&&!requestConfig.url?'(LEGACY) ':''}${requestConfig.op||'<unknown operation>'} ${requestConfig.url||'<empty url>'}  ${requestConfig.method||'<empty method>'}`,options);}}const request=Object.assign({},requestConfig,opts);const future=this.requestManager.request(request);future.onFinalize(()=>{{if((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_9__.getGlobalConfig)().WarpDrive.debug.LOG_REQUESTS||globalThis.getWarpDriveRuntimeConfig().debug.LOG_REQUESTS){// eslint-disable-next-line no-console\nconsole.log(`request: [[FINALIZE]] ${requestConfig.op&&!requestConfig.url?'(LEGACY) ':''}${requestConfig.op||'<unknown operation>'} ${requestConfig.url||'<empty url>'}  ${requestConfig.method||'<empty method>'}`);}}// skip flush for legacy belongsTo\nif(requestConfig.op==='findBelongsTo'&&!requestConfig.url){return;}this.notifications._flush();});return future;}/**\n   * A hook which an app or addon may implement. Called when\n   * the Store is attempting to create a Record Instance for\n   * a resource.\n   *\n   * This hook can be used to select or instantiate any desired\n   * mechanism of presenting cache data to the ui for access\n   * mutation, and interaction.\n   *\n   * @method instantiateRecord (hook)\n   * @param identifier\n   * @param createRecordArgs\n   * @param recordDataFor deprecated use this.cache\n   * @param notificationManager deprecated use this.notifications\n   * @return A record instance\n   * @public\n   *//**\n   * A hook which an app or addon may implement. Called when\n   * the Store is destroying a Record Instance. This hook should\n   * be used to teardown any custom record instances instantiated\n   * with `instantiateRecord`.\n   *\n   * @method teardownRecord (hook)\n   * @public\n   * @param record\n   *//**\n    Returns the schema for a particular resource type (modelName).\n     When used with Model from @ember-data/model the return is the model class,\n    but this is not guaranteed.\n     If looking to query attribute or relationship information it is\n    recommended to use `getSchemaDefinitionService` instead. This method\n    should be considered legacy and exists primarily to continue to support\n    Adapter/Serializer APIs which expect it's return value in their method\n    signatures.\n     The class of a model might be useful if you want to get a list of all the\n    relationship names of the model, see\n    [`relationshipNames`](/ember-data/release/classes/Model?anchor=relationshipNames)\n    for example.\n     @method modelFor\n    @public\n    @deprecated\n    @param {string} type\n    @return {ModelSchema}\n    */modelFor(type){// FIXME add deprecation and deprecation stripping\n// FIXME/TODO update RFC to remove this method\n{assertDestroyedStoreOnly(this,'modelFor');}(test=>{if(!test){throw new Error(`You need to pass <type> to the store's modelFor method`);}})(typeof type==='string'&&type.length);(test=>{if(!test){throw new Error(`No model was found for '${type}' and no schema handles the type`);}})(this.schema.hasResource({type}));return getShimClass(this,type);}/**\n    Create a new record in the current store. The properties passed\n    to this method are set on the newly created record.\n     To create a new instance of a `Post`:\n     ```js\n    store.createRecord('post', {\n      title: 'Ember is awesome!'\n    });\n    ```\n     To create a new instance of a `Post` that has a relationship with a `User` record:\n     ```js\n    let user = this.store.peekRecord('user', '1');\n    store.createRecord('post', {\n      title: 'Ember is awesome!',\n      user: user\n    });\n    ```\n     @method createRecord\n    @public\n    @param {String} type the name of the resource\n    @param {Object} inputProperties a hash of properties to set on the\n      newly created record.\n    @return {Model} record\n  */createRecord(type,inputProperties){{assertDestroyingStore(this,'createRecord');}(test=>{if(!test){throw new Error(`You need to pass a model name to the store's createRecord method`);}})(type);(test=>{if(!test){throw new Error(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${type}`);}})(typeof type==='string');// This is wrapped in a `run.join` so that in test environments users do not need to manually wrap\n//   calls to `createRecord`. The run loop usage here is because we batch the joining and updating\n//   of record-arrays via ember's run loop, not our own.\n//\n//   to remove this, we would need to move to a new `async` API.\nlet record;this._join(()=>{const normalizedModelName=normalizeModelName(type);const properties={...inputProperties};// If the passed properties do not include a primary key,\n// give the adapter an opportunity to generate one. Typically,\n// client-side ID generators will use something like uuid.js\n// to avoid conflicts.\nlet id=null;if(properties.id===null||properties.id===undefined){const adapter=this.adapterFor?.(normalizedModelName,true);if(adapter&&adapter.generateIdForRecord){id=properties.id=coerceId(adapter.generateIdForRecord(this,normalizedModelName,properties));}else{id=properties.id=null;}}else{id=properties.id=coerceId(properties.id);}const resource={type:normalizedModelName,id};if(resource.id){const identifier=this.identifierCache.peekRecordIdentifier(resource);(test=>{if(!test){throw new Error(`The id ${String(properties.id)} has already been used with another '${normalizedModelName}' record.`);}})(!identifier);}const identifier=this.identifierCache.createIdentifierForNewRecord(resource);const cache=this.cache;const createOptions=normalizeProperties(this,identifier,properties);const resultProps=cache.clientDidCreate(identifier,createOptions);record=this._instanceCache.getRecord(identifier,resultProps);});return record;}/**\n    For symmetry, a record can be deleted via the store.\n     Example\n     ```javascript\n    let post = store.createRecord('post', {\n      title: 'Ember is awesome!'\n    });\n     store.deleteRecord(post);\n    ```\n     @method deleteRecord\n    @public\n    @param {unknown} record\n  */deleteRecord(record){{assertDestroyingStore(this,'deleteRecord');}const identifier=peekRecordIdentifier(record);const cache=this.cache;(test=>{if(!test){throw new Error(`expected the record to be connected to a cache`);}})(identifier);this._join(()=>{cache.setIsDeleted(identifier,true);if(cache.isNew(identifier)){this._instanceCache.unloadRecord(identifier);}});}/**\n    For symmetry, a record can be unloaded via the store.\n    This will cause the record to be destroyed and freed up for garbage collection.\n     Example\n     ```javascript\n    const { content: { data: post } } = await store.request(findRecord({ type: 'post', id: '1' }));\n    store.unloadRecord(post);\n    ```\n     @method unloadRecord\n    @public\n    @param {Model} record\n  */unloadRecord(record){{assertDestroyingStore(this,'unloadRecord');}const identifier=peekRecordIdentifier(record);if(identifier){this._instanceCache.unloadRecord(identifier);}}/**\n    This method returns a record for a given identifier or type and id combination.\n     The `findRecord` method will always resolve its promise with the same\n    object for a given identifier or type and `id`.\n     The `findRecord` method will always return a **promise** that will be\n    resolved with the record.\n     **Example 1**\n     ```app/routes/post.js\n    export default class PostRoute extends Route {\n      model({ post_id }) {\n        return this.store.findRecord('post', post_id);\n      }\n    }\n    ```\n     **Example 2**\n     `findRecord` can be called with a single identifier argument instead of the combination\n    of `type` (modelName) and `id` as separate arguments. You may recognize this combo as\n    the typical pairing from [JSON:API](https://jsonapi.org/format/#document-resource-object-identification)\n     ```app/routes/post.js\n    export default class PostRoute extends Route {\n      model({ post_id: id }) {\n        return this.store.findRecord({ type: 'post', id });\n      }\n    }\n    ```\n     **Example 3**\n     If you have previously received an lid via an Identifier for this record, and the record\n    has already been assigned an id, you can find the record again using just the lid.\n     ```app/routes/post.js\n    store.findRecord({ lid });\n    ```\n     If the record is not yet available, the store will ask the adapter's `findRecord`\n    method to retrieve and supply the necessary data. If the record is already present\n    in the store, it depends on the reload behavior _when_ the returned promise\n    resolves.\n     ### Preloading\n     You can optionally `preload` specific attributes and relationships that you know of\n    by passing them via the passed `options`.\n     For example, if your Ember route looks like `/posts/1/comments/2` and your API route\n    for the comment also looks like `/posts/1/comments/2` if you want to fetch the comment\n    without also fetching the post you can pass in the post to the `findRecord` call:\n     ```app/routes/post-comments.js\n    export default class PostRoute extends Route {\n      model({ post_id, comment_id: id }) {\n        return this.store.findRecord({ type: 'comment', id, { preload: { post: post_id }} });\n      }\n    }\n    ```\n     In your adapter you can then access this id without triggering a network request via the\n    snapshot:\n     ```app/adapters/application.js\n    export default class Adapter {\n       findRecord(store, schema, id, snapshot) {\n        let type = schema.modelName;\n         if (type === 'comment')\n          let postId = snapshot.belongsTo('post', { id: true });\n           return fetch(`./posts/${postId}/comments/${id}`)\n            .then(response => response.json())\n        }\n      }\n       static create() {\n        return new this();\n      }\n    }\n    ```\n     This could also be achieved by supplying the post id to the adapter via the adapterOptions\n    property on the options hash.\n     ```app/routes/post-comments.js\n    export default class PostRoute extends Route {\n      model({ post_id, comment_id: id }) {\n        return this.store.findRecord({ type: 'comment', id, { adapterOptions: { post: post_id }} });\n      }\n    }\n    ```\n     ```app/adapters/application.js\n    export default class Adapter {\n      findRecord(store, schema, id, snapshot) {\n        let type = schema.modelName;\n         if (type === 'comment')\n          let postId = snapshot.adapterOptions.post;\n           return fetch(`./posts/${postId}/comments/${id}`)\n            .then(response => response.json())\n        }\n      }\n       static create() {\n        return new this();\n      }\n    }\n    ```\n     If you have access to the post model you can also pass the model itself to preload:\n     ```javascript\n    let post = await store.findRecord('post', '1');\n    let comment = await store.findRecord('comment', '2', { post: myPostModel });\n    ```\n     ### Reloading\n     The reload behavior is configured either via the passed `options` hash or\n    the result of the adapter's `shouldReloadRecord`.\n     If `{ reload: true }` is passed or `adapter.shouldReloadRecord` evaluates\n    to `true`, then the returned promise resolves once the adapter returns\n    data, regardless if the requested record is already in the store:\n     ```js\n    store.push({\n      data: {\n        id: 1,\n        type: 'post',\n        revision: 1\n      }\n    });\n     // adapter#findRecord resolves with\n    // [\n    //   {\n    //     id: 1,\n    //     type: 'post',\n    //     revision: 2\n    //   }\n    // ]\n    store.findRecord('post', '1', { reload: true }).then(function(post) {\n      post.revision; // 2\n    });\n    ```\n     If no reload is indicated via the above mentioned ways, then the promise\n    immediately resolves with the cached version in the store.\n     ### Background Reloading\n     Optionally, if `adapter.shouldBackgroundReloadRecord` evaluates to `true`,\n    then a background reload is started, which updates the records' data, once\n    it is available:\n     ```js\n    // app/adapters/post.js\n    import ApplicationAdapter from \"./application\";\n     export default class PostAdapter extends ApplicationAdapter {\n      shouldReloadRecord(store, snapshot) {\n        return false;\n      },\n       shouldBackgroundReloadRecord(store, snapshot) {\n        return true;\n      }\n    });\n     // ...\n     store.push({\n      data: {\n        id: 1,\n        type: 'post',\n        revision: 1\n      }\n    });\n     let blogPost = store.findRecord('post', '1').then(function(post) {\n      post.revision; // 1\n    });\n     // later, once adapter#findRecord resolved with\n    // [\n    //   {\n    //     id: 1,\n    //     type: 'post',\n    //     revision: 2\n    //   }\n    // ]\n     blogPost.revision; // 2\n    ```\n     If you would like to force or prevent background reloading, you can set a\n    boolean value for `backgroundReload` in the options object for\n    `findRecord`.\n     ```app/routes/post/edit.js\n    export default class PostEditRoute extends Route {\n      model(params) {\n        return this.store.findRecord('post', params.post_id, { backgroundReload: false });\n      }\n    }\n    ```\n     If you pass an object on the `adapterOptions` property of the options\n    argument it will be passed to your adapter via the snapshot\n     ```app/routes/post/edit.js\n    export default class PostEditRoute extends Route {\n      model(params) {\n        return this.store.findRecord('post', params.post_id, {\n          adapterOptions: { subscribe: false }\n        });\n      }\n    }\n    ```\n     ```app/adapters/post.js\n    import MyCustomAdapter from './custom-adapter';\n     export default class PostAdapter extends MyCustomAdapter {\n      findRecord(store, type, id, snapshot) {\n        if (snapshot.adapterOptions.subscribe) {\n          // ...\n        }\n        // ...\n      }\n    }\n    ```\n     See [peekRecord](../methods/peekRecord?anchor=peekRecord) to get the cached version of a record.\n     ### Retrieving Related Model Records\n     If you use an adapter such as Ember's default\n    [`JSONAPIAdapter`](/ember-data/release/classes/JSONAPIAdapter)\n    that supports the [JSON API specification](http://jsonapi.org/) and if your server\n    endpoint supports the use of an\n    ['include' query parameter](http://jsonapi.org/format/#fetching-includes),\n    you can use `findRecord()` or `findAll()` to automatically retrieve additional records related to\n    the one you request by supplying an `include` parameter in the `options` object.\n     For example, given a `post` model that has a `hasMany` relationship with a `comment`\n    model, when we retrieve a specific post we can have the server also return that post's\n    comments in the same request:\n     ```app/routes/post.js\n    export default class PostRoute extends Route {\n      model(params) {\n        return this.store.findRecord('post', params.post_id, { include: ['comments'] });\n      }\n    }\n    ```\n     ```app/adapters/application.js\n    export default class Adapter {\n      findRecord(store, schema, id, snapshot) {\n        let type = schema.modelName;\n         if (type === 'post')\n          let includes = snapshot.adapterOptions.include;\n           return fetch(`./posts/${postId}?include=${includes}`)\n            .then(response => response.json())\n        }\n      }\n       static create() {\n        return new this();\n      }\n    }\n    ```\n     In this case, the post's comments would then be available in your template as\n    `model.comments`.\n     Multiple relationships can be requested using an `include` parameter consisting of a\n    list of relationship names, while nested relationships can be specified\n    using a dot-separated sequence of relationship names. So to request both the post's\n    comments and the authors of those comments the request would look like this:\n     ```app/routes/post.js\n    export default class PostRoute extends Route {\n      model(params) {\n        return this.store.findRecord('post', params.post_id, { include: ['comments','comments.author'] });\n      }\n    }\n    ```\n     ### Retrieving Specific Fields by Type\n     If your server endpoint supports the use of a ['fields' query parameter](https://jsonapi.org/format/#fetching-sparse-fieldsets),\n    you can use pass those fields through to your server.  At this point in time, this requires a few manual steps on your part.\n     1. Implement `buildQuery` in your adapter.\n     ```app/adapters/application.js\n    buildQuery(snapshot) {\n      let query = super.buildQuery(...arguments);\n       let { fields } = snapshot.adapterOptions;\n       if (fields) {\n        query.fields = fields;\n      }\n       return query;\n    }\n    ```\n     2. Then pass through the applicable fields to your `findRecord` request.\n     Given a `post` model with attributes body, title, publishDate and meta, you can retrieve a filtered list of attributes.\n     ```app/routes/post.js\n    export default class extends Route {\n      model(params) {\n        return this.store.findRecord('post', params.post_id, { adapterOptions: { fields: { post: 'body,title' } });\n      }\n    }\n    ```\n     Moreover, you can filter attributes on related models as well. If a `post` has a `belongsTo` relationship to a user,\n    just include the relationship key and attributes.\n     ```app/routes/post.js\n    export default class extends Route {\n      model(params) {\n        return this.store.findRecord('post', params.post_id, { adapterOptions: { fields: { post: 'body,title', user: 'name,email' } });\n      }\n    }\n    ```\n     @since 1.13.0\n    @method findRecord\n    @public\n    @param {String|object} type - either a string representing the name of the resource or a ResourceIdentifier object containing both the type (a string) and the id (a string) for the record or an lid (a string) of an existing record\n    @param {(String|Integer|Object)} id - optional object with options for the request only if the first param is a ResourceIdentifier, else the string id of the record to be retrieved\n    @param {Object} [options] - if the first param is a string this will be the optional options for the request. See examples for available options.\n    @return {Promise} promise\n  */findRecord(resource,id,options){{assertDestroyingStore(this,'findRecord');}(test=>{if(!test){throw new Error(`You need to pass a modelName or resource identifier as the first argument to the store's findRecord method`);}})(resource);if(isMaybeIdentifier(resource)){options=id;}else{(test=>{if(!test){throw new Error(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${resource}`);}})(typeof resource==='string');const type=normalizeModelName(resource);const normalizedId=ensureStringId(id);resource=constructResource(type,normalizedId);}const identifier=this.identifierCache.getOrCreateRecordIdentifier(resource);options=options||{};if(options.preload){// force reload if we preload to ensure we don't resolve the promise\n// until we are complete, else we will end up background-reloading\n// even for initial load.\nif(!this._instanceCache.recordIsLoaded(identifier)){options.reload=true;}this._join(()=>{preloadData(this,identifier,options.preload);});}const promise=this.request({op:'findRecord',data:{record:identifier,options},cacheOptions:{[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_1__.SkipCache]:true}});return promise.then(document=>{return document.content;});}/**\n    Get the reference for the specified record.\n     Example\n     ```javascript\n    let userRef = store.getReference('user', '1');\n     // check if the user is loaded\n    let isLoaded = userRef.value() !== null;\n     // get the record of the reference (null if not yet available)\n    let user = userRef.value();\n     // get the identifier of the reference\n    if (userRef.remoteType() === 'id') {\n    let id = userRef.id();\n    }\n     // load user (via store.find)\n    userRef.load().then(...)\n     // or trigger a reload\n    userRef.reload().then(...)\n     // provide data for reference\n    userRef.push({ id: 1, username: '@user' }).then(function(user) {\n      userRef.value() === user;\n    });\n    ```\n     @method getReference\n    @public\n    @param {String|object} resource - modelName (string) or Identifier (object)\n    @param {String|Integer} id\n    @since 2.5.0\n    @return {RecordReference}\n  */// TODO @deprecate getReference (and references generally)\ngetReference(resource,id){{assertDestroyingStore(this,'getReference');}let resourceIdentifier;if(arguments.length===1&&isMaybeIdentifier(resource)){resourceIdentifier=resource;}else{const type=normalizeModelName(resource);const normalizedId=ensureStringId(id);resourceIdentifier=constructResource(type,normalizedId);}(test=>{if(!test){throw new Error('getReference expected to receive either a resource identifier or type and id as arguments');}})(isMaybeIdentifier(resourceIdentifier));const identifier=this.identifierCache.getOrCreateRecordIdentifier(resourceIdentifier);return this._instanceCache.getReference(identifier);}/**\n    Get a record by a given type and ID without triggering a fetch.\n     This method will synchronously return the record if it is available in the store,\n    otherwise it will return `null`. A record is available if it has been fetched earlier, or\n    pushed manually into the store.\n     See [findRecord](../methods/findRecord?anchor=findRecord) if you would like to request this record from the backend.\n     _Note: This is a synchronous method and does not return a promise._\n     **Example 1**\n     ```js\n    let post = store.peekRecord('post', '1');\n     post.id; // '1'\n    ```\n     `peekRecord` can be called with a single identifier argument instead of the combination\n    of `type` (modelName) and `id` as separate arguments. You may recognize this combo as\n    the typical pairing from [JSON:API](https://jsonapi.org/format/#document-resource-object-identification)\n     **Example 2**\n     ```js\n    let post = store.peekRecord({ type: 'post', id });\n    post.id; // '1'\n    ```\n     If you have previously received an lid from an Identifier for this record, you can lookup the record again using\n    just the lid.\n     **Example 3**\n     ```js\n    let post = store.peekRecord({ lid });\n    post.id; // '1'\n    ```\n      @since 1.13.0\n    @method peekRecord\n    @public\n    @param {String|object} modelName - either a string representing the modelName or a ResourceIdentifier object containing both the type (a string) and the id (a string) for the record or an lid (a string) of an existing record\n    @param {String|Integer} id - optional only if the first param is a ResourceIdentifier, else the string id of the record to be retrieved.\n    @return {Model|null} record\n  */peekRecord(identifier,id){if(arguments.length===1&&isMaybeIdentifier(identifier)){const stableIdentifier=this.identifierCache.peekRecordIdentifier(identifier);const isLoaded=stableIdentifier&&this._instanceCache.recordIsLoaded(stableIdentifier);// TODO come up with a better mechanism for determining if we have data and could peek.\n// this is basically an \"are we not empty\" query.\nreturn isLoaded?this._instanceCache.getRecord(stableIdentifier):null;}{assertDestroyingStore(this,'peekRecord');}(test=>{if(!test){throw new Error(`You need to pass a model name to the store's peekRecord method`);}})(identifier);(test=>{if(!test){throw new Error(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${String(identifier)}`);}})(typeof identifier==='string');const type=normalizeModelName(identifier);const normalizedId=ensureStringId(id);const resource={type,id:normalizedId};const stableIdentifier=this.identifierCache.peekRecordIdentifier(resource);const isLoaded=stableIdentifier&&this._instanceCache.recordIsLoaded(stableIdentifier);return isLoaded?this._instanceCache.getRecord(stableIdentifier):null;}/**\n    This method delegates a query to the adapter. This is the one place where\n    adapter-level semantics are exposed to the application.\n     Each time this method is called a new request is made through the adapter.\n     Exposing queries this way seems preferable to creating an abstract query\n    language for all server-side queries, and then require all adapters to\n    implement them.\n     ---\n     If you do something like this:\n     ```javascript\n    store.query('person', { page: 1 });\n    ```\n     The request made to the server will look something like this:\n     ```\n    GET \"/api/v1/person?page=1\"\n    ```\n     ---\n     If you do something like this:\n     ```javascript\n    store.query('person', { ids: ['1', '2', '3'] });\n    ```\n     The request made to the server will look something like this:\n     ```\n    GET \"/api/v1/person?ids%5B%5D=1&ids%5B%5D=2&ids%5B%5D=3\"\n    decoded: \"/api/v1/person?ids[]=1&ids[]=2&ids[]=3\"\n    ```\n     This method returns a promise, which is resolved with a\n    [`Collection`](/ember-data/release/classes/Collection)\n    once the server returns.\n     @since 1.13.0\n    @method query\n    @public\n    @param {String} type the name of the resource\n    @param {object} query a query to be used by the adapter\n    @param {Object} options optional, may include `adapterOptions` hash which will be passed to adapter.query\n    @return {Promise} promise\n  */query(type,query,options={}){{assertDestroyingStore(this,'query');}(test=>{if(!test){throw new Error(`You need to pass a model name to the store's query method`);}})(type);(test=>{if(!test){throw new Error(`You need to pass a query hash to the store's query method`);}})(query);(test=>{if(!test){throw new Error(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${type}`);}})(typeof type==='string');const promise=this.request({op:'query',data:{type:normalizeModelName(type),query,options:options},cacheOptions:{[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_1__.SkipCache]:true}});return promise.then(document=>document.content);}/**\n    This method makes a request for one record, where the `id` is not known\n    beforehand (if the `id` is known, use [`findRecord`](../methods/findRecord?anchor=findRecord)\n    instead).\n     This method can be used when it is certain that the server will return a\n    single object for the primary data.\n     Each time this method is called a new request is made through the adapter.\n     Let's assume our API provides an endpoint for the currently logged in user\n    via:\n     ```\n    // GET /api/current_user\n    {\n      user: {\n        id: 1234,\n        username: 'admin'\n      }\n    }\n    ```\n     Since the specific `id` of the `user` is not known beforehand, we can use\n    `queryRecord` to get the user:\n     ```javascript\n    store.queryRecord('user', {}).then(function(user) {\n      let username = user.username;\n      // do thing\n    });\n    ```\n     The request is made through the adapters' `queryRecord`:\n     ```app/adapters/user.js\n    import Adapter from '@ember-data/adapter';\n    import $ from 'jquery';\n     export default class UserAdapter extends Adapter {\n      queryRecord(modelName, query) {\n        return $.getJSON('/api/current_user');\n      }\n    }\n    ```\n     Note: the primary use case for `store.queryRecord` is when a single record\n    is queried and the `id` is not known beforehand. In all other cases\n    `store.query` and using the first item of the array is likely the preferred\n    way:\n     ```\n    // GET /users?username=unique\n    {\n      data: [{\n        id: 1234,\n        type: 'user',\n        attributes: {\n          username: \"unique\"\n        }\n      }]\n    }\n    ```\n     ```javascript\n    store.query('user', { username: 'unique' }).then(function(users) {\n      return users.firstObject;\n    }).then(function(user) {\n      let id = user.id;\n    });\n    ```\n     This method returns a promise, which resolves with the found record.\n     If the adapter returns no data for the primary data of the payload, then\n    `queryRecord` resolves with `null`:\n     ```\n    // GET /users?username=unique\n    {\n      data: null\n    }\n    ```\n     ```javascript\n    store.queryRecord('user', { username: 'unique' }).then(function(user) {\n       // user is null\n    });\n    ```\n     @since 1.13.0\n    @method queryRecord\n    @public\n    @param {string} type\n    @param {object} query an opaque query to be used by the adapter\n    @param {object} options optional, may include `adapterOptions` hash which will be passed to adapter.queryRecord\n    @return {Promise} promise which resolves with the found record or `null`\n  */queryRecord(type,query,options){{assertDestroyingStore(this,'queryRecord');}(test=>{if(!test){throw new Error(`You need to pass a model name to the store's queryRecord method`);}})(type);(test=>{if(!test){throw new Error(`You need to pass a query hash to the store's queryRecord method`);}})(query);(test=>{if(!test){throw new Error(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${type}`);}})(typeof type==='string');const promise=this.request({op:'queryRecord',data:{type:normalizeModelName(type),query,options:options||{}},cacheOptions:{[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_1__.SkipCache]:true}});return promise.then(document=>document.content);}/**\n    `findAll` asks the adapter's `findAll` method to find the records for the\n    given type, and returns a promise which will resolve with all records of\n    this type present in the store, even if the adapter only returns a subset\n    of them.\n     ```app/routes/authors.js\n    export default class AuthorsRoute extends Route {\n      model(params) {\n        return this.store.findAll('author');\n      }\n    }\n    ```\n     _When_ the returned promise resolves depends on the reload behavior,\n    configured via the passed `options` hash and the result of the adapter's\n    `shouldReloadAll` method.\n     ### Reloading\n     If `{ reload: true }` is passed or `adapter.shouldReloadAll` evaluates to\n    `true`, then the returned promise resolves once the adapter returns data,\n    regardless if there are already records in the store:\n     ```js\n    store.push({\n      data: {\n        id: 'first',\n        type: 'author'\n      }\n    });\n     // adapter#findAll resolves with\n    // [\n    //   {\n    //     id: 'second',\n    //     type: 'author'\n    //   }\n    // ]\n    store.findAll('author', { reload: true }).then(function(authors) {\n      authors.getEach('id'); // ['first', 'second']\n    });\n    ```\n     If no reload is indicated via the above mentioned ways, then the promise\n    immediately resolves with all the records currently loaded in the store.\n     ### Background Reloading\n     Optionally, if `adapter.shouldBackgroundReloadAll` evaluates to `true`,\n    then a background reload is started. Once this resolves, the array with\n    which the promise resolves, is updated automatically so it contains all the\n    records in the store:\n     ```app/adapters/application.js\n    import Adapter from '@ember-data/adapter';\n     export default class ApplicationAdapter extends Adapter {\n      shouldReloadAll(store, snapshotsArray) {\n        return false;\n      },\n       shouldBackgroundReloadAll(store, snapshotsArray) {\n        return true;\n      }\n    });\n     // ...\n     store.push({\n      data: {\n        id: 'first',\n        type: 'author'\n      }\n    });\n     let allAuthors;\n    store.findAll('author').then(function(authors) {\n      authors.getEach('id'); // ['first']\n       allAuthors = authors;\n    });\n     // later, once adapter#findAll resolved with\n    // [\n    //   {\n    //     id: 'second',\n    //     type: 'author'\n    //   }\n    // ]\n     allAuthors.getEach('id'); // ['first', 'second']\n    ```\n     If you would like to force or prevent background reloading, you can set a\n    boolean value for `backgroundReload` in the options object for\n    `findAll`.\n     ```app/routes/post/edit.js\n    export default class PostEditRoute extends Route {\n      model() {\n        return this.store.findAll('post', { backgroundReload: false });\n      }\n    }\n    ```\n     If you pass an object on the `adapterOptions` property of the options\n    argument it will be passed to you adapter via the `snapshotRecordArray`\n     ```app/routes/posts.js\n    export default class PostsRoute extends Route {\n      model(params) {\n        return this.store.findAll('post', {\n          adapterOptions: { subscribe: false }\n        });\n      }\n    }\n    ```\n     ```app/adapters/post.js\n    import MyCustomAdapter from './custom-adapter';\n     export default class UserAdapter extends MyCustomAdapter {\n      findAll(store, type, sinceToken, snapshotRecordArray) {\n        if (snapshotRecordArray.adapterOptions.subscribe) {\n          // ...\n        }\n        // ...\n      }\n    }\n    ```\n     See [peekAll](../methods/peekAll?anchor=peekAll) to get an array of current records in the\n    store, without waiting until a reload is finished.\n     ### Retrieving Related Model Records\n     If you use an adapter such as Ember's default\n    [`JSONAPIAdapter`](/ember-data/release/classes/JSONAPIAdapter)\n    that supports the [JSON API specification](http://jsonapi.org/) and if your server\n    endpoint supports the use of an\n    ['include' query parameter](http://jsonapi.org/format/#fetching-includes),\n    you can use `findAll()` to automatically retrieve additional records related to\n    those requested by supplying an `include` parameter in the `options` object.\n     For example, given a `post` model that has a `hasMany` relationship with a `comment`\n    model, when we retrieve all of the post records we can have the server also return\n    all of the posts' comments in the same request:\n     ```app/routes/posts.js\n    export default class PostsRoute extends Route {\n      model() {\n        return this.store.findAll('post', { include: ['comments'] });\n      }\n    }\n    ```\n    Multiple relationships can be requested using an `include` parameter consisting of a\n    list or relationship names, while nested relationships can be specified\n    using a dot-separated sequence of relationship names. So to request both the posts'\n    comments and the authors of those comments the request would look like this:\n     ```app/routes/posts.js\n    export default class PostsRoute extends Route {\n      model() {\n        return this.store.findAll('post', { include: ['comments','comments.author'] });\n      }\n    }\n    ```\n     See [query](../methods/query?anchor=query) to only get a subset of records from the server.\n     @since 1.13.0\n    @method findAll\n    @public\n    @param {string} type the name of the resource\n    @param {object} options\n    @return {Promise} promise\n  */findAll(type,options={}){{assertDestroyingStore(this,'findAll');}(test=>{if(!test){throw new Error(`You need to pass a model name to the store's findAll method`);}})(type);(test=>{if(!test){throw new Error(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${type}`);}})(typeof type==='string');const promise=this.request({op:'findAll',data:{type:normalizeModelName(type),options:options||{}},cacheOptions:{[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_1__.SkipCache]:true}});return promise.then(document=>document.content);}/**\n    This method returns a filtered array that contains all of the\n    known records for a given type in the store.\n     Note that because it's just a filter, the result will contain any\n    locally created records of the type, however, it will not make a\n    request to the backend to retrieve additional records. If you\n    would like to request all the records from the backend please use\n    [store.findAll](../methods/findAll?anchor=findAll).\n     Also note that multiple calls to `peekAll` for a given type will always\n    return the same `RecordArray`.\n     Example\n     ```javascript\n    let localPosts = store.peekAll('post');\n    ```\n     @since 1.13.0\n    @method peekAll\n    @public\n    @param {string} type the name of the resource\n    @return {RecordArray}\n  */peekAll(type){{assertDestroyingStore(this,'peekAll');}(test=>{if(!test){throw new Error(`You need to pass a model name to the store's peekAll method`);}})(type);(test=>{if(!test){throw new Error(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${type}`);}})(typeof type==='string');return this.recordArrayManager.liveArrayFor(normalizeModelName(type));}/**\n    This method unloads all records in the store.\n    It schedules unloading to happen during the next run loop.\n     Optionally you can pass a type which unload all records for a given type.\n     ```javascript\n    store.unloadAll();\n    store.unloadAll('post');\n    ```\n     @method unloadAll\n    @param {string} type the name of the resource\n    @public\n  */unloadAll(type){{assertDestroyedStoreOnly(this,'unloadAll');}(test=>{if(!test){throw new Error(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${String(type)}`);}})(!type||typeof type==='string');this._join(()=>{if(type===undefined){// destroy the graph before unloadAll\n// since then we avoid churning relationships\n// during unload\nthis._graph?.identifiers.clear();this.recordArrayManager.clear();this._instanceCache.clear();}else{this._instanceCache.clear(normalizeModelName(type));}});}/**\n    Push some data for a given type into the store.\n     This method expects normalized [JSON API](http://jsonapi.org/) document. This means you have to follow [JSON API specification](http://jsonapi.org/format/) with few minor adjustments:\n    - record's `type` should always be in singular, dasherized form\n    - members (properties) should be camelCased\n     [Your primary data should be wrapped inside `data` property](http://jsonapi.org/format/#document-top-level):\n     ```js\n    store.push({\n      data: {\n        // primary data for single record of type `Person`\n        id: '1',\n        type: 'person',\n        attributes: {\n          firstName: 'Daniel',\n          lastName: 'Kmak'\n        }\n      }\n    });\n    ```\n     [Demo.](http://ember-twiddle.com/fb99f18cd3b4d3e2a4c7)\n     `data` property can also hold an array (of records):\n     ```js\n    store.push({\n      data: [\n        // an array of records\n        {\n          id: '1',\n          type: 'person',\n          attributes: {\n            firstName: 'Daniel',\n            lastName: 'Kmak'\n          }\n        },\n        {\n          id: '2',\n          type: 'person',\n          attributes: {\n            firstName: 'Tom',\n            lastName: 'Dale'\n          }\n        }\n      ]\n    });\n    ```\n     [Demo.](http://ember-twiddle.com/69cdbeaa3702159dc355)\n     There are some typical properties for `JSONAPI` payload:\n    * `id` - mandatory, unique record's key\n    * `type` - mandatory string which matches `model`'s dasherized name in singular form\n    * `attributes` - object which holds data for record attributes - `attr`'s declared in model\n    * `relationships` - object which must contain any of the following properties under each relationships' respective key (example path is `relationships.achievements.data`):\n      - [`links`](http://jsonapi.org/format/#document-links)\n      - [`data`](http://jsonapi.org/format/#document-resource-object-linkage) - place for primary data\n      - [`meta`](http://jsonapi.org/format/#document-meta) - object which contains meta-information about relationship\n     For this model:\n     ```app/models/person.js\n    import Model, { attr, hasMany } from '@ember-data/model';\n     export default class PersonRoute extends Route {\n      @attr('string') firstName;\n      @attr('string') lastName;\n       @hasMany('person') children;\n    }\n    ```\n     To represent the children as IDs:\n     ```js\n    {\n      data: {\n        id: '1',\n        type: 'person',\n        attributes: {\n          firstName: 'Tom',\n          lastName: 'Dale'\n        },\n        relationships: {\n          children: {\n            data: [\n              {\n                id: '2',\n                type: 'person'\n              },\n              {\n                id: '3',\n                type: 'person'\n              },\n              {\n                id: '4',\n                type: 'person'\n              }\n            ]\n          }\n        }\n      }\n    }\n    ```\n     [Demo.](http://ember-twiddle.com/343e1735e034091f5bde)\n     To represent the children relationship as a URL:\n     ```js\n    {\n      data: {\n        id: '1',\n        type: 'person',\n        attributes: {\n          firstName: 'Tom',\n          lastName: 'Dale'\n        },\n        relationships: {\n          children: {\n            links: {\n              related: '/people/1/children'\n            }\n          }\n        }\n      }\n    }\n    ```\n     If you're streaming data or implementing an adapter, make sure\n    that you have converted the incoming data into this form. The\n    store's [normalize](../methods/normalize?anchor=normalize) method is a convenience\n    helper for converting a json payload into the form Ember Data\n    expects.\n     ```js\n    store.push(store.normalize('person', data));\n    ```\n     This method can be used both to push in brand new\n    records, as well as to update existing records.\n     @method push\n    @public\n    @param {Object} data\n    @return the record(s) that was created or\n      updated.\n  */push(data){{assertDestroyingStore(this,'push');}const pushed=this._push(data,false);if(Array.isArray(pushed)){return pushed.map(identifier=>this._instanceCache.getRecord(identifier));}if(pushed===null){return null;}return this._instanceCache.getRecord(pushed);}/**\n    Push some data in the form of a json-api document into the store,\n    without creating materialized records.\n     @method _push\n    @private\n    @param {Object} jsonApiDoc\n    @return {StableRecordIdentifier|Array<StableRecordIdentifier>|null} identifiers for the primary records that had data loaded\n  */_push(jsonApiDoc,asyncFlush){{assertDestroyingStore(this,'_push');}if(asyncFlush){this._enableAsyncFlush=true;}let ret;this._join(()=>{ret=this.cache.put({content:jsonApiDoc});});this._enableAsyncFlush=null;return'data'in ret?ret.data:null;}/**\n   * Trigger a save for a Record.\n   *\n   * Returns a promise resolving with the same record when the save is complete.\n   *\n   * @method saveRecord\n   * @public\n   * @param {unknown} record\n   * @param options\n   * @return {Promise<record>}\n   */saveRecord(record,options={}){{assertDestroyingStore(this,'saveRecord');}(test=>{if(!test){throw new Error(`Unable to initiate save for a record in a disconnected state`);}})(storeFor(record));const identifier=recordIdentifierFor(record);const cache=this.cache;if(!identifier){// this commonly means we're disconnected\n// but just in case we reject here to prevent bad things.\nreturn Promise.reject(new Error(`Record Is Disconnected`));}(test=>{if(!test){throw new Error(`Cannot initiate a save request for an unloaded record: ${identifier.lid}`);}})(this._instanceCache.recordIsLoaded(identifier));if(resourceIsFullyDeleted(this._instanceCache,identifier)){return Promise.resolve(record);}if(!options){options={};}let operation='updateRecord';if(cache.isNew(identifier)){operation='createRecord';}else if(cache.isDeleted(identifier)){operation='deleteRecord';}const request={op:operation,data:{options,record:identifier},records:[identifier],cacheOptions:{[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_1__.SkipCache]:true}};return this.request(request).then(document=>document.content);}/**\n   * Instantiation hook allowing applications or addons to configure the store\n   * to utilize a custom Cache implementation.\n   *\n   * This hook should not be called directly by consuming applications or libraries.\n   * Use `Store.cache` to access the Cache instance.\n   *\n   * @method createCache (hook)\n   * @public\n   * @param storeWrapper\n   * @return {Cache}\n   *//**\n   * Returns the cache instance associated to this Store, instantiates the Cache\n   * if necessary via `Store.createCache`\n   *\n   * @property {Cache} cache\n   * @public\n   */get cache(){let{cache}=this._instanceCache;if(!cache){cache=this._instanceCache.cache=this.createCache(this._instanceCache._storeWrapper);{cache=new CacheManager(cache);}}return cache;}destroy(){if(this.isDestroyed){// @ember/test-helpers will call destroy multiple times\nreturn;}this.isDestroying=true;this._graph?.destroy();this._graph=undefined;this.notifications.destroy();this.recordArrayManager.destroy();this.identifierCache.destroy();this.unloadAll();this.isDestroyed=true;}static create(args){return new this(args);}}{Store.prototype.getSchemaDefinitionService=function(){(test=>{if(!test){throw new Error(`You must registerSchemaDefinitionService with the store to use custom model classes`);}})(this._schema);(0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(`Use \\`store.schema\\` instead of \\`store.getSchemaDefinitionService()\\``,false,{id:'ember-data:schema-service-updates',until:'6.0',for:'ember-data',since:{available:'4.13',enabled:'5.4'}});return this._schema;};Store.prototype.registerSchemaDefinitionService=function(schema){(0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(`Use \\`store.createSchemaService\\` instead of \\`store.registerSchemaDefinitionService()\\``,false,{id:'ember-data:schema-service-updates',until:'6.0',for:'ember-data',since:{available:'4.13',enabled:'5.4'}});this._schema=schema;};Store.prototype.registerSchema=function(schema){(0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(`Use \\`store.createSchemaService\\` instead of \\`store.registerSchema()\\``,false,{id:'ember-data:schema-service-updates',until:'6.0',for:'ember-data',since:{available:'4.13',enabled:'5.4'}});this._schema=schema;};}let assertDestroyingStore;let assertDestroyedStoreOnly;{// eslint-disable-next-line @typescript-eslint/no-shadow\nassertDestroyingStore=function assertDestroyingStore(store,method){(test=>{if(!test){throw new Error(`Attempted to call store.${method}(), but the store instance has already been destroyed.`);}})(!(store.isDestroying||store.isDestroyed));};// eslint-disable-next-line @typescript-eslint/no-shadow\nassertDestroyedStoreOnly=function assertDestroyedStoreOnly(store,method){(test=>{if(!test){throw new Error(`Attempted to call store.${method}(), but the store instance has already been destroyed.`);}})(!store.isDestroyed);};}function isMaybeIdentifier(maybeIdentifier){return Boolean(maybeIdentifier!==null&&typeof maybeIdentifier==='object'&&('id'in maybeIdentifier&&'type'in maybeIdentifier&&maybeIdentifier.id&&maybeIdentifier.type||maybeIdentifier.lid));}function normalizeProperties(store,identifier,properties){// assert here\nif(properties!==undefined){if('id'in properties){(test=>{if(!test){throw new Error(`expected id to be a string or null`);}})(properties.id!==undefined);}(test=>{if(!test){throw new Error(`You passed '${typeof properties}' as properties for record creation instead of an object.`);}})(typeof properties==='object'&&properties!==null);const{type}=identifier;// convert relationship Records to RecordDatas before passing to RecordData\nconst defs=store.schema.fields({type});if(defs.size){const keys=Object.keys(properties);for(let i=0;i<keys.length;i++){const prop=keys[i];const field=defs.get(prop);if(!field)continue;if(field.kind==='hasMany'){{assertRecordsPassedToHasMany(properties[prop]);}properties[prop]=extractIdentifiersFromRecords$1(properties[prop]);}else if(field.kind==='belongsTo'){properties[prop]=extractIdentifierFromRecord$1(properties[prop]);}}}}return properties;}function assertRecordsPassedToHasMany(records){(test=>{if(!test){throw new Error(`You must pass an array of records to set a hasMany relationship`);}})(Array.isArray(records));(test=>{if(!test){throw new Error(`All elements of a hasMany relationship must be instances of Model, you passed ${records.map(r=>`${typeof r}`).join(', ')}`);}})(function(){return records.every(record=>{try{recordIdentifierFor(record);return true;}catch{return false;}});}());}function extractIdentifiersFromRecords$1(records){return records.map(record=>extractIdentifierFromRecord$1(record));}function extractIdentifierFromRecord$1(recordOrPromiseRecord){if(!recordOrPromiseRecord){return null;}const extract=recordIdentifierFor;return extract(recordOrPromiseRecord);}const MUTATION_OPS=new Set(['createRecord','updateRecord','deleteRecord']);function calcShouldFetch(store,request,hasCachedValue,identifier){const{cacheOptions}=request;return request.op&&MUTATION_OPS.has(request.op)||cacheOptions?.reload||!hasCachedValue||(store.lifetimes&&identifier?store.lifetimes.isHardExpired(identifier,store):false);}function calcShouldBackgroundFetch(store,request,willFetch,identifier){const{cacheOptions}=request;return cacheOptions?.backgroundReload||(store.lifetimes&&identifier?store.lifetimes.isSoftExpired(identifier,store):false);}function isMutation(request){return Boolean(request.op&&MUTATION_OPS.has(request.op));}function isCacheAffecting(document){if(!isMutation(document.request)){return true;}// a mutation combined with a 204 has no cache impact when no known records were involved\n// a createRecord with a 201 with an empty response and no known records should similarly\n// have no cache impact\nif(document.request.op==='createRecord'&&document.response?.status===201){return document.content?Object.keys(document.content).length>0:false;}return document.response?.status!==204;}function isAggregateError(error){return error instanceof AggregateError||error.name==='AggregateError'&&Array.isArray(error.errors);}// TODO @runspired, consider if we should deep freeze errors (potentially only in debug) vs cloning them\nfunction cloneError(error){const isAggregate=isAggregateError(error);const cloned=isAggregate?new AggregateError(structuredClone(error.errors),error.message):new Error(error.message);cloned.stack=error.stack;cloned.error=error.error;// copy over enumerable properties\nObject.assign(cloned,error);return cloned;}function getPriority(identifier,deduped,priority){if(identifier){const existing=deduped.get(identifier);if(existing){return existing.priority;}}return priority;}/**\n * @module @ember-data/store\n *//**\n * A CacheHandler that adds support for using an EmberData Cache with a RequestManager.\n *\n * This handler will only run when a request has supplied a `store` instance. Requests\n * issued by the store via `store.request()` will automatically have the `store` instance\n * attached to the request.\n *\n * ```ts\n * requestManager.request({\n *   store: store,\n *   url: '/api/posts',\n *   method: 'GET'\n * });\n * ```\n *\n * When this handler elects to handle a request, it will return the raw `StructuredDocument`\n * unless the request has `[EnableHydration]` set to `true`. In this case, the handler will\n * return a `Document` instance that will automatically update the UI when the cache is updated\n * in the future and will hydrate any identifiers in the StructuredDocument into Record instances.\n *\n * When issuing a request via the store, [EnableHydration] is automatically set to `true`. This\n * means that if desired you can issue requests that utilize the cache without needing to also\n * utilize Record instances if desired.\n *\n * Said differently, you could elect to issue all requests via a RequestManager, without ever using\n * the store directly, by setting [EnableHydration] to `true` and providing a store instance. Not\n * necessarily the most useful thing, but the decoupled nature of the RequestManager and incremental-feature\n * approach of EmberData allows for this flexibility.\n *\n * ```ts\n * import { EnableHydration } from '@warp-drive/core-types/request';\n *\n * requestManager.request({\n *   store: store,\n *   url: '/api/posts',\n *   method: 'GET',\n *   [EnableHydration]: true\n * });\n *\n * @typedoc\n */const CacheHandler={request(context,next){// if we have no cache or no cache-key skip cache handling\nif(!context.request.store||context.request.cacheOptions?.[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_1__.SkipCache]){return next(context.request);}const{store}=context.request;const identifier=store.identifierCache.getOrCreateDocumentIdentifier(context.request);if(identifier){context.setIdentifier(identifier);}// used to dedupe existing requests that match\nconst DEDUPE=store.requestManager._deduped;const activeRequest=identifier&&DEDUPE.get(identifier);const peeked=identifier?store.cache.peekRequest(identifier):null;// determine if we should skip cache\nif(calcShouldFetch(store,context.request,!!peeked,identifier)){if(activeRequest){activeRequest.priority={blocking:true};return activeRequest.promise;}let promise=fetchContentAndHydrate(next,context,identifier,{blocking:true});if(identifier){promise=promise.finally(()=>{DEDUPE.delete(identifier);store.notifications.notify(identifier,'state');});DEDUPE.set(identifier,{priority:{blocking:true},promise});store.notifications.notify(identifier,'state');}return promise;}// if we have not skipped cache, determine if we should update behind the scenes\nif(calcShouldBackgroundFetch(store,context.request,false,identifier)){let promise=activeRequest?.promise||fetchContentAndHydrate(next,context,identifier,{blocking:false});if(identifier&&!activeRequest){promise=promise.finally(()=>{DEDUPE.delete(identifier);store.notifications.notify(identifier,'state');});DEDUPE.set(identifier,{priority:{blocking:false},promise});store.notifications.notify(identifier,'state');}store.requestManager._pending.set(context.id,promise);}(test=>{if(!test){throw new Error(`Expected a peeked request to be present`);}})(peeked);const shouldHydrate=context.request[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_1__.EnableHydration]||false;context.setResponse(peeked.response);if('error'in peeked){const content=shouldHydrate?maybeUpdateUiObjects(store,context.request,{shouldHydrate,identifier},peeked.content):peeked.content;const newError=cloneError(peeked);newError.content=content;throw newError;}const result=shouldHydrate?maybeUpdateUiObjects(store,context.request,{shouldHydrate,identifier},peeked.content):peeked.content;return result;}};function maybeUpdateUiObjects(store,request,options,document){const{identifier}=options;if(!document||!options.shouldHydrate){(test=>{if(!test){throw new Error(`The CacheHandler expected response content but none was found`);}})(!options.shouldHydrate);return document;}if(identifier){return store._instanceCache.getDocument(identifier);}// if we don't have an identifier, we give the document\n// its own local cache\nreturn new ReactiveDocument(store,null,{request,document});}function updateCacheForSuccess(store,request,options,document){let response=null;if(isMutation(request)){const record=request.data?.record||request.records?.[0];if(record){response=store.cache.didCommit(record,document);// a mutation combined with a 204 has no cache impact when no known records were involved\n// a createRecord with a 201 with an empty response and no known records should similarly\n// have no cache impact\n}else if(isCacheAffecting(document)){response=store.cache.put(document);}}else{response=store.cache.put(document);}return maybeUpdateUiObjects(store,request,options,response);}function handleFetchSuccess(store,context,options,document){const{request}=context;store.requestManager._pending.delete(context.id);store._enableAsyncFlush=true;let response;store._join(()=>{response=updateCacheForSuccess(store,request,options,document);});store._enableAsyncFlush=null;if(store.lifetimes?.didRequest){store.lifetimes.didRequest(context.request,document.response,options.identifier,store);}const finalPriority=getPriority(options.identifier,store.requestManager._deduped,options.priority);if(finalPriority.blocking){return response;}else{store.notifications._flush();}}function updateCacheForError(store,context,options,error){let response;if(isMutation(context.request)){// TODO similar to didCommit we should spec this to be similar to cache.put for handling full response\n// currently we let the response remain undefiend.\nconst errors=error&&error.content&&typeof error.content==='object'&&'errors'in error.content&&Array.isArray(error.content.errors)?error.content.errors:undefined;const record=context.request.data?.record||context.request.records?.[0];store.cache.commitWasRejected(record,errors);}else{response=store.cache.put(error);return maybeUpdateUiObjects(store,context.request,options,response);}}function handleFetchError(store,context,options,error){store.requestManager._pending.delete(context.id);if(context.request.signal?.aborted){throw error;}store._enableAsyncFlush=true;let response;store._join(()=>{response=updateCacheForError(store,context,options,error);});store._enableAsyncFlush=null;if(options.identifier&&store.lifetimes?.didRequest){store.lifetimes.didRequest(context.request,error.response,options.identifier,store);}if(isMutation(context.request)){throw error;}const finalPriority=getPriority(options.identifier,store.requestManager._deduped,options.priority);if(finalPriority.blocking){const newError=cloneError(error);newError.content=response;throw newError;}else{store.notifications._flush();}}function fetchContentAndHydrate(next,context,identifier,priority){const{store}=context.request;const shouldHydrate=context.request[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_1__.EnableHydration]||false;const options={shouldHydrate,identifier,priority};let isMut=false;if(isMutation(context.request)){isMut=true;// TODO should we handle multiple records in request.records by iteratively calling willCommit for each\nconst record=context.request.data?.record||context.request.records?.[0];(test=>{if(!test){throw new Error(`Expected to receive a list of records included in the ${context.request.op} request`);}})(record||!shouldHydrate);if(record){store.cache.willCommit(record,context);}}if(store.lifetimes?.willRequest){store.lifetimes.willRequest(context.request,identifier,store);}const promise=next(context.request).then(document=>{return handleFetchSuccess(store,context,options,document);},error=>{return handleFetchError(store,context,options,error);});if(!isMut){return promise;}(test=>{if(!test){throw new Error(`Expected a mutation`);}})(isMutation(context.request));// for mutations we need to enqueue the promise with the requestStateService\n// TODO should we enque a request per record in records?\nconst record=context.request.data?.record||context.request.records?.[0];return store._requestCache._enqueue(promise,{data:[{op:'saveRecord',recordIdentifier:record,options:undefined}]});}/**\n  @module @ember-data/store\n*//**\n  A `ManyArray` is a `MutableArray` that represents the contents of a has-many\n  relationship.\n\n  The `ManyArray` is instantiated lazily the first time the relationship is\n  requested.\n\n  This class is not intended to be directly instantiated by consuming applications.\n\n  ### Inverses\n\n  Often, the relationships in Ember Data applications will have\n  an inverse. For example, imagine the following models are\n  defined:\n\n  ```app/models/post.js\n  import Model, { hasMany } from '@ember-data/model';\n\n  export default class PostModel extends Model {\n    @hasMany('comment') comments;\n  }\n  ```\n\n  ```app/models/comment.js\n  import Model, { belongsTo } from '@ember-data/model';\n\n  export default class CommentModel extends Model {\n    @belongsTo('post') post;\n  }\n  ```\n\n  If you created a new instance of `Post` and added\n  a `Comment` record to its `comments` has-many\n  relationship, you would expect the comment's `post`\n  property to be set to the post that contained\n  the has-many.\n\n  We call the record to which a relationship belongs-to the\n  relationship's _owner_.\n\n  @class ManyArray\n  @public\n*/class RelatedCollection extends IdentifierArray{/**\n    The loading state of this array\n     @property {Boolean} isLoaded\n    @public\n    *//**\n    `true` if the relationship is polymorphic, `false` otherwise.\n     @property {Boolean} isPolymorphic\n    @private\n    *//**\n    Metadata associated with the request for async hasMany relationships.\n     Example\n     Given that the server returns the following JSON payload when fetching a\n    hasMany relationship:\n     ```js\n    {\n      \"comments\": [{\n        \"id\": 1,\n        \"comment\": \"This is the first comment\",\n      }, {\n    // ...\n      }],\n       \"meta\": {\n        \"page\": 1,\n        \"total\": 5\n      }\n    }\n    ```\n     You can then access the meta data via the `meta` property:\n     ```js\n    let comments = await post.comments;\n    let meta = comments.meta;\n     // meta.page => 1\n    // meta.total => 5\n    ```\n     @property {Object | null} meta\n    @public\n    *//**\n     * Retrieve the links for this relationship\n     *\n     @property {Object | null} links\n     @public\n     */constructor(options){super(options);this.isLoaded=options.isLoaded||false;this.isAsync=options.isAsync||false;this.isPolymorphic=options.isPolymorphic||false;this.identifier=options.identifier;this.key=options.key;}[MUTATE](target,receiver,prop,args,_SIGNAL){switch(prop){case'length 0':{Reflect.set(target,'length',0);mutateReplaceRelatedRecords(this,[],_SIGNAL);return true;}case'replace cell':{const[index,prior,value]=args;target[index]=value;mutateReplaceRelatedRecord(this,{value,prior,index},_SIGNAL);return true;}case'push':{const newValues=extractIdentifiersFromRecords(args);assertNoDuplicates(this,target,currentState=>currentState.push(...newValues),`Cannot push duplicates to a hasMany's state.`);{// dedupe\nconst seen=new Set(target);const unique=new Set();args.forEach(item=>{const identifier=recordIdentifierFor(item);if(!seen.has(identifier)){seen.add(identifier);unique.add(item);}});const newArgs=Array.from(unique);const result=Reflect.apply(target[prop],receiver,newArgs);if(newArgs.length){mutateAddToRelatedRecords(this,{value:extractIdentifiersFromRecords(newArgs)},_SIGNAL);}return result;}// else, no dedupe, error on duplicates\n// removed by dead control flow\n{}// removed by dead control flow\n{}// removed by dead control flow\n{}}case'pop':{const result=Reflect.apply(target[prop],receiver,args);if(result){mutateRemoveFromRelatedRecords(this,{value:recordIdentifierFor(result)},_SIGNAL);}return result;}case'unshift':{const newValues=extractIdentifiersFromRecords(args);assertNoDuplicates(this,target,currentState=>currentState.unshift(...newValues),`Cannot unshift duplicates to a hasMany's state.`);{// dedupe\nconst seen=new Set(target);const unique=new Set();args.forEach(item=>{const identifier=recordIdentifierFor(item);if(!seen.has(identifier)){seen.add(identifier);unique.add(item);}});const newArgs=Array.from(unique);const result=Reflect.apply(target[prop],receiver,newArgs);if(newArgs.length){mutateAddToRelatedRecords(this,{value:extractIdentifiersFromRecords(newArgs),index:0},_SIGNAL);}return result;}// else, no dedupe, error on duplicates\n// removed by dead control flow\n{}// removed by dead control flow\n{}// removed by dead control flow\n{}}case'shift':{const result=Reflect.apply(target[prop],receiver,args);if(result){mutateRemoveFromRelatedRecords(this,{value:recordIdentifierFor(result),index:0},_SIGNAL);}return result;}case'sort':{const result=Reflect.apply(target[prop],receiver,args);mutateSortRelatedRecords(this,result.map(recordIdentifierFor),_SIGNAL);return result;}case'splice':{const[start,deleteCount,...adds]=args;// detect a full replace\nif(start===0&&deleteCount===this[SOURCE].length){const newValues=extractIdentifiersFromRecords(adds);assertNoDuplicates(this,target,currentState=>currentState.splice(start,deleteCount,...newValues),`Cannot replace a hasMany's state with a new state that contains duplicates.`);{// dedupe\nconst current=new Set(adds);const unique=Array.from(current);const newArgs=[start,deleteCount].concat(unique);const result=Reflect.apply(target[prop],receiver,newArgs);mutateReplaceRelatedRecords(this,extractIdentifiersFromRecords(unique),_SIGNAL);return result;}// else, no dedupe, error on duplicates\n// removed by dead control flow\n{}// removed by dead control flow\n{}// removed by dead control flow\n{}}const newValues=extractIdentifiersFromRecords(adds);assertNoDuplicates(this,target,currentState=>currentState.splice(start,deleteCount,...newValues),`Cannot splice a hasMany's state with a new state that contains duplicates.`);{// dedupe\nconst currentState=target.slice();currentState.splice(start,deleteCount);const seen=new Set(currentState);const unique=[];adds.forEach(item=>{const identifier=recordIdentifierFor(item);if(!seen.has(identifier)){seen.add(identifier);unique.push(item);}});const newArgs=[start,deleteCount,...unique];const result=Reflect.apply(target[prop],receiver,newArgs);if(deleteCount>0){mutateRemoveFromRelatedRecords(this,{value:result.map(recordIdentifierFor),index:start},_SIGNAL);}if(unique.length>0){mutateAddToRelatedRecords(this,{value:extractIdentifiersFromRecords(unique),index:start},_SIGNAL);}return result;}// else, no dedupe, error on duplicates\n// removed by dead control flow\n{}// removed by dead control flow\n{}// removed by dead control flow\n{}// removed by dead control flow\n{}}default:(test=>{{throw new Error(`unable to convert ${prop} into a transaction that updates the cache state for this record array`);}})();}}notify(){const signal=this[ARRAY_SIGNAL];signal.shouldReset=true;notifyArray(this);}/**\n    Reloads all of the records in the manyArray. If the manyArray\n    holds a relationship that was originally fetched using a links url\n    EmberData will revisit the original links url to repopulate the\n    relationship.\n     If the ManyArray holds the result of a `store.query()` reload will\n    re-run the original query.\n     Example\n     ```javascript\n    let user = store.peekRecord('user', '1')\n    await login(user);\n     let permissions = await user.permissions;\n    await permissions.reload();\n    ```\n     @method reload\n    @public\n  */reload(options){(test=>{if(!test){throw new Error(`Expected the manager for ManyArray to implement reloadHasMany`);}})(typeof this._manager.reloadHasMany==='function');// TODO this is odd, we don't ask the store for anything else like this?\nreturn this._manager.reloadHasMany(this.key,options);}/**\n    Saves all of the records in the `ManyArray`.\n     Note: this API can only be used in legacy mode with a configured Adapter.\n     Example\n     ```javascript\n    const { content: { data: inbox } } = await store.request(findRecord({ type: 'inbox', id: '1' }));\n     let messages = await inbox.messages;\n    messages.forEach((message) => {\n      message.isRead = true;\n    });\n    messages.save();\n    ```\n     @method save\n    @public\n    @return {PromiseArray} promise\n  *//**\n    Create a child record within the owner\n     @method createRecord\n    @public\n    @param {Object} hash\n    @return {Model} record\n  */createRecord(hash){const{store}=this;(test=>{if(!test){throw new Error(`Expected modelName to be set`);}})(this.modelName);const record=store.createRecord(this.modelName,hash);this.push(record);return record;}destroy(){super.destroy(false);}}RelatedCollection.prototype.isAsync=false;RelatedCollection.prototype.isPolymorphic=false;RelatedCollection.prototype.identifier=null;RelatedCollection.prototype.cache=null;RelatedCollection.prototype._inverseIsAsync=false;RelatedCollection.prototype.key='';RelatedCollection.prototype.DEPRECATED_CLASS_NAME='ManyArray';function assertRecordPassedToHasMany(record){(test=>{if(!test){throw new Error(`All elements of a hasMany relationship must be instances of Model, you passed ${typeof record}`);}})(function(){try{recordIdentifierFor(record);return true;}catch{return false;}}());}function extractIdentifiersFromRecords(records){return records.map(extractIdentifierFromRecord);}function extractIdentifierFromRecord(recordOrPromiseRecord){assertRecordPassedToHasMany(recordOrPromiseRecord);return recordIdentifierFor(recordOrPromiseRecord);}function assertNoDuplicates(collection,target,callback,reason){const state=target.slice();callback(state);if(state.length!==new Set(state).size){const duplicates=state.filter((currentValue,currentIndex)=>state.indexOf(currentValue)!==currentIndex);{(0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(`${reason} This behavior is deprecated. Found duplicates for the following records within the new state provided to \\`<${collection.identifier.type}:${collection.identifier.id||collection.identifier.lid}>.${collection.key}\\`\\n\\t- ${Array.from(new Set(duplicates)).map(r=>isStableIdentifier(r)?r.lid:recordIdentifierFor(r).lid).sort((a,b)=>a.localeCompare(b)).join('\\n\\t- ')}`,false,{id:'ember-data:deprecate-many-array-duplicates',for:'ember-data',until:'6.0',since:{enabled:'5.3',available:'4.13'}});}}}function mutateAddToRelatedRecords(collection,operationInfo,_SIGNAL){mutate(collection,{op:'add',record:collection.identifier,field:collection.key,...operationInfo},_SIGNAL);}function mutateRemoveFromRelatedRecords(collection,operationInfo,_SIGNAL){mutate(collection,{op:'remove',record:collection.identifier,field:collection.key,...operationInfo},_SIGNAL);}function mutateReplaceRelatedRecord(collection,operationInfo,_SIGNAL){mutate(collection,{op:'replaceRelatedRecord',record:collection.identifier,field:collection.key,...operationInfo},_SIGNAL);}function mutateReplaceRelatedRecords(collection,value,_SIGNAL){mutate(collection,{op:'replaceRelatedRecords',record:collection.identifier,field:collection.key,value},_SIGNAL);}function mutateSortRelatedRecords(collection,value,_SIGNAL){mutate(collection,{op:'sortRelatedRecords',record:collection.identifier,field:collection.key,value},_SIGNAL);}function mutate(collection,mutation,_SIGNAL){(test=>{if(!test){throw new Error(`Expected the manager for ManyArray to implement mutate`);}})(typeof collection._manager.mutate==='function');collection._manager.mutate(mutation);(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.addToTransaction)(_SIGNAL);}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@ember-data/store/dist/many-array-BwVo-2vv.js?");

/***/ }),

/***/ "./node_modules/@ember-data/tracking/dist/-private.js":
/*!************************************************************!*\
  !*** ./node_modules/@ember-data/tracking/dist/-private.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Signals: () => (/* binding */ Signals),\n/* harmony export */   addToTransaction: () => (/* binding */ addToTransaction),\n/* harmony export */   addTransactionCB: () => (/* binding */ addTransactionCB),\n/* harmony export */   compat: () => (/* reexport safe */ _ember_object_compat__WEBPACK_IMPORTED_MODULE_1__.dependentKeyCompat),\n/* harmony export */   createArrayTags: () => (/* binding */ createArrayTags),\n/* harmony export */   createSignal: () => (/* binding */ createSignal),\n/* harmony export */   defineSignal: () => (/* binding */ defineSignal),\n/* harmony export */   defineSubscription: () => (/* binding */ defineSubscription),\n/* harmony export */   entangleSignal: () => (/* binding */ entangleSignal),\n/* harmony export */   getSignal: () => (/* binding */ getSignal),\n/* harmony export */   memoTransact: () => (/* binding */ memoTransact),\n/* harmony export */   notifySignal: () => (/* binding */ notifySignal),\n/* harmony export */   peekSignal: () => (/* binding */ peekSignal),\n/* harmony export */   subscribe: () => (/* binding */ subscribe),\n/* harmony export */   subscribed: () => (/* binding */ subscribed),\n/* harmony export */   transact: () => (/* binding */ transact),\n/* harmony export */   untracked: () => (/* binding */ untracked)\n/* harmony export */ });\n/* harmony import */ var _ember_internals_metal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/-internals/metal */ \"@ember/-internals/metal\");\n/* harmony import */ var _ember_internals_metal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_internals_metal__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_object_compat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/object/compat */ \"@ember/object/compat\");\n/* harmony import */ var _ember_object_compat__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_object_compat__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _glimmer_validator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @glimmer/validator */ \"@glimmer/validator\");\n/* harmony import */ var _glimmer_validator__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_glimmer_validator__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @warp-drive/core-types/-private */ \"./node_modules/@warp-drive/core-types/dist/-private.js\");\nfunction createTransaction(){const transaction={cbs:new Set(),props:new Set(),sub:new Set(),parent:null};const TRANSACTION=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.peekTransient)('TRANSACTION');if(TRANSACTION){transaction.parent=TRANSACTION;}(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.setTransient)('TRANSACTION',transaction);}function maybeConsume(tag){if(tag){(0,_glimmer_validator__WEBPACK_IMPORTED_MODULE_2__.consumeTag)(tag);}}function maybeDirty(tag){if(tag){// @ts-expect-error - we are using Ember's Tag not Glimmer's\n(0,_glimmer_validator__WEBPACK_IMPORTED_MODULE_2__.dirtyTag)(tag);}}/**\n * If there is a current transaction, ensures that the relevant tag (and any\n * array computed chains symbols, if applicable) will be consumed during the\n * transaction.\n *\n * If there is no current transaction, will consume the tag(s) immediately.\n *\n * @internal\n * @param obj\n */function subscribe(obj){const TRANSACTION=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.peekTransient)('TRANSACTION');if(TRANSACTION){TRANSACTION.sub.add(obj);}else if('tag'in obj){{maybeConsume(obj['[]']);maybeConsume(obj['@length']);}(0,_glimmer_validator__WEBPACK_IMPORTED_MODULE_2__.consumeTag)(obj.tag);}else{// eslint-disable-next-line @typescript-eslint/no-unused-expressions\nobj.ref;}}function updateRef(obj){{try{if('tag'in obj){{maybeDirty(obj['[]']);maybeDirty(obj['@length']);}// @ts-expect-error - we are using Ember's Tag not Glimmer's\n(0,_glimmer_validator__WEBPACK_IMPORTED_MODULE_2__.dirtyTag)(obj.tag);}else{obj.ref=null;}}catch(e){if(e instanceof Error){if(e.message.includes('You attempted to update `undefined`')){// @ts-expect-error\nconst key=`<${obj._debug_base}>.${obj.key}`;e.message=e.message.replace('You attempted to update `undefined`',`You attempted to update ${key}`);e.stack=e.stack?.replace('You attempted to update `undefined`',`You attempted to update ${key}`);const lines=e.stack?.split(`\\n`);const finalLines=[];let lastFile=null;lines?.forEach(line=>{if(line.trim().startsWith('at ')){// get the last string in the line which contains the code source location\nconst location=line.split(' ').at(-1);// remove the line and char offset info\nif(location.includes(':')){const parts=location.split(':');parts.pop();parts.pop();const file=parts.join(':');if(file!==lastFile){lastFile=file;finalLines.push('');}}finalLines.push(line);}});const splitstr='`undefined` was first used:';const parts=e.message.split(splitstr);parts.splice(1,0,`Original Stack\\n=============\\n${finalLines.join(`\\n`)}\\n\\n\\`${key}\\` was first used:`);e.message=parts.join('');}}throw e;}}}function flushTransaction(){const transaction=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.peekTransient)('TRANSACTION');(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.setTransient)('TRANSACTION',transaction.parent);transaction.cbs.forEach(cb=>{cb();});transaction.props.forEach(obj=>{// mark this mutation as part of a transaction\nobj.t=true;updateRef(obj);});transaction.sub.forEach(obj=>{if('tag'in obj){{maybeConsume(obj['[]']);maybeConsume(obj['@length']);}(0,_glimmer_validator__WEBPACK_IMPORTED_MODULE_2__.consumeTag)(obj.tag);}else{// eslint-disable-next-line @typescript-eslint/no-unused-expressions\nobj.ref;}});}async function untrack(){const transaction=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.peekTransient)('TRANSACTION');(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.setTransient)('TRANSACTION',transaction.parent);// defer writes\nawait Promise.resolve();transaction.cbs.forEach(cb=>{cb();});transaction.props.forEach(obj=>{// mark this mutation as part of a transaction\nobj.t=true;updateRef(obj);});}function addToTransaction(obj){const transaction=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.peekTransient)('TRANSACTION');if(transaction){transaction.props.add(obj);}else{updateRef(obj);}}function addTransactionCB(method){const transaction=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.peekTransient)('TRANSACTION');if(transaction){transaction.cbs.add(method);}else{method();}}/**\n * Run `method` without subscribing to any tracked properties\n * controlled by EmberData.\n *\n * This should rarely be used except by libraries that really\n * know what they are doing. It is most useful for wrapping\n * certain kinds of fetch/query logic from within a `Resource`\n * `hook` or other similar pattern.\n *\n * @function untracked\n * @public\n * @static\n * @for @ember-data/tracking\n * @param method\n * @return result of invoking method\n */function untracked(method){createTransaction();const ret=method();void untrack();return ret;}/**\n * Run the method, subscribing to any tracked properties\n * managed by EmberData that were accessed or written during\n * the method's execution as per-normal but while allowing\n * interleaving of reads and writes.\n *\n * This is useful when for instance you want to perform\n * a mutation based on existing state that must be read first.\n *\n * @function transact\n * @public\n * @static\n * @for @ember-data/tracking\n * @param method\n * @return result of invoking method\n */function transact(method){createTransaction();const ret=method();flushTransaction();return ret;}/**\n * A helpful utility for creating a new function that\n * always runs in a transaction. E.G. this \"memoizes\"\n * calling `transact(fn)`, currying args as necessary.\n *\n * @method memoTransact\n * @public\n * @static\n * @for @ember-data/tracking\n * @param method\n * @return a function that will invoke method in a transaction with any provided args and return its result\n */function memoTransact(method){return function(...args){createTransaction();const ret=method(...args);flushTransaction();return ret;};}const Signals=(0,_warp_drive_core_types_private__WEBPACK_IMPORTED_MODULE_3__.getOrSetGlobal)('Signals',Symbol('Signals'));/**\n *  use to add a signal property to the prototype of something.\n *\n *  First arg is the thing to define on\n *  Second arg is the property name\n *  Third agg is the initial value of the property if any.\n *\n *  for instance\n *\n *  ```ts\n *  class Model {}\n *  defineSignal(Model.prototype, 'isLoading', false);\n *  ```\n *\n *  This is sort of like using a stage-3 decorator but works today\n *  while we are still on legacy decorators.\n *\n *  e.g. it is equivalent to\n *\n *  ```ts\n *  class Model {\n *    @signal accessor isLoading = false;\n *  }\n *  ```\n *\n *  @internal\n */function defineSignal(obj,key,v){Object.defineProperty(obj,key,{enumerable:true,configurable:false,get(){const signals=this[Signals]=this[Signals]||new Map();const existing=signals.has(key);const _signal=entangleSignal(signals,this,key);if(!existing&&v!==undefined){_signal.lastValue=v;}return _signal.lastValue;},set(value){const signals=this[Signals]=this[Signals]||new Map();let _signal=signals.get(key);if(!_signal){_signal=createSignal(this,key);signals.set(key,_signal);}if(_signal.lastValue!==value){_signal.lastValue=value;addToTransaction(_signal);}}});}function defineSubscription(obj,key,desc){const options=Object.assign({enumerable:true,configurable:false},subscribed(obj,key,desc));Object.defineProperty(obj,key,options);}function createArrayTags(obj,signal){{signal['[]']=(0,_ember_internals_metal__WEBPACK_IMPORTED_MODULE_0__.tagForProperty)(obj,'[]');signal['@length']=(0,_ember_internals_metal__WEBPACK_IMPORTED_MODULE_0__.tagForProperty)(obj,'length');}}/**\n * Create a signal for the key/object pairing.\n *\n * @internal\n * @param obj Object we're creating the signal on\n * @param key Key to create the signal for\n * @return the signal\n */function createSignal(obj,key){const _signal={key,tag:(0,_ember_internals_metal__WEBPACK_IMPORTED_MODULE_0__.tagForProperty)(obj,key),reason:null,t:false,shouldReset:false,'[]':null,'@length':null,lastValue:undefined};{function tryGet(prop){try{return obj[prop];}catch{return;}}const modelName=tryGet('$type')??tryGet('modelName')??tryGet('constructor')?.modelName??'';const className=obj.constructor?.name??obj.toString?.()??'unknown';_signal._debug_base=`${className}${modelName&&!className.startsWith('SchemaRecord')?`:${modelName}`:''}`;}return _signal;}/**\n * Create a signal for the key/object pairing and subscribes to the signal.\n *\n * Use when you need to ensure a signal exists and is subscribed to.\n *\n * @internal\n * @param signals Map of signals\n * @param obj Object we're creating the signal on\n * @param key Key to create the signal for\n * @return the signal\n */function entangleSignal(signals,obj,key){let _signal=signals.get(key);if(!_signal){_signal=createSignal(obj,key);signals.set(key,_signal);}subscribe(_signal);return _signal;}function getSignal(obj,key,initialState){let signals=obj[Signals];if(!signals){signals=new Map();obj[Signals]=signals;}let _signal=signals.get(key);if(!_signal){_signal=createSignal(obj,key);_signal.shouldReset=initialState;signals.set(key,_signal);}return _signal;}function peekSignal(obj,key){const signals=obj[Signals];if(signals){return signals.get(key);}}function subscribed(_target,key,desc){// eslint-disable-next-line @typescript-eslint/unbound-method\nconst getter=desc.get;// eslint-disable-next-line @typescript-eslint/unbound-method\nconst setter=desc.set;desc.get=function(){const signal=getSignal(this,key,true);subscribe(signal);if(signal.shouldReset){signal.shouldReset=false;signal.lastValue=getter.call(this);}return signal.lastValue;};desc.set=function(v){getSignal(this,key,true);// ensure signal is setup in case we want to use it.\n// probably notify here but not yet.\nsetter.call(this,v);};(0,_ember_object_compat__WEBPACK_IMPORTED_MODULE_1__.dependentKeyCompat)(desc);return desc;}function notifySignal(obj,key){const signal=peekSignal(obj,key);if(signal){signal.shouldReset=true;addToTransaction(signal);}}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@ember-data/tracking/dist/-private.js?");

/***/ }),

/***/ "./node_modules/@ember-data/tracking/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ember-data/tracking/dist/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cached: () => (/* binding */ cached),\n/* harmony export */   compat: () => (/* reexport safe */ _ember_object_compat__WEBPACK_IMPORTED_MODULE_2__.dependentKeyCompat),\n/* harmony export */   createCache: () => (/* reexport safe */ _glimmer_tracking_primitives_cache__WEBPACK_IMPORTED_MODULE_0__.createCache),\n/* harmony export */   getValue: () => (/* reexport safe */ _glimmer_tracking_primitives_cache__WEBPACK_IMPORTED_MODULE_0__.getValue),\n/* harmony export */   memoTransact: () => (/* reexport safe */ _private_js__WEBPACK_IMPORTED_MODULE_1__.memoTransact),\n/* harmony export */   notifySignal: () => (/* reexport safe */ _private_js__WEBPACK_IMPORTED_MODULE_1__.notifySignal),\n/* harmony export */   transact: () => (/* reexport safe */ _private_js__WEBPACK_IMPORTED_MODULE_1__.transact),\n/* harmony export */   untracked: () => (/* reexport safe */ _private_js__WEBPACK_IMPORTED_MODULE_1__.untracked)\n/* harmony export */ });\n/* harmony import */ var _glimmer_tracking_primitives_cache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/tracking/primitives/cache */ \"@glimmer/tracking/primitives/cache\");\n/* harmony import */ var _glimmer_tracking_primitives_cache__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_glimmer_tracking_primitives_cache__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _private_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./-private.js */ \"./node_modules/@ember-data/tracking/dist/-private.js\");\n/* harmony import */ var _ember_object_compat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember/object/compat */ \"@ember/object/compat\");\n/* harmony import */ var _ember_object_compat__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ember_object_compat__WEBPACK_IMPORTED_MODULE_2__);\nfunction cached(target,key,descriptor){// Error on `@cached()`, `@cached(...args)`, and `@cached propName = value;`\n(test=>{if(!test){throw new Error('You attempted to use @cached(), which is not necessary nor supported. Remove the parentheses and you will be good to go!');}})(target!==undefined);(test=>{if(!test){throw new Error(`You attempted to use @cached on with ${arguments.length>1?'arguments':'an argument'} ( @cached(${Array.from(arguments).map(d=>`'${d}'`).join(', ')}), which is not supported. Dependencies are automatically tracked, so you can just use ${'`@cached`'}`);}})(typeof target==='object'&&typeof key==='string'&&typeof descriptor==='object'&&arguments.length===3);(test=>{if(!test){throw new Error(`The @cached decorator must be applied to getters. '${key}' is not a getter.`);}})(typeof descriptor.get==='function');const caches=new WeakMap();// eslint-disable-next-line @typescript-eslint/unbound-method\nconst getter=descriptor.get;descriptor.get=function(){if(!caches.has(this))caches.set(this,(0,_glimmer_tracking_primitives_cache__WEBPACK_IMPORTED_MODULE_0__.createCache)(getter.bind(this)));return (0,_glimmer_tracking_primitives_cache__WEBPACK_IMPORTED_MODULE_0__.getValue)(caches.get(this));};}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@ember-data/tracking/dist/index.js?");

/***/ }),

/***/ "./node_modules/@ember/test-waiters/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@ember/test-waiters/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _reset: () => (/* binding */ _reset),\n/* harmony export */   _resetWaiterNames: () => (/* binding */ _resetWaiterNames),\n/* harmony export */   buildWaiter: () => (/* binding */ buildWaiter),\n/* harmony export */   getPendingWaiterState: () => (/* binding */ getPendingWaiterState),\n/* harmony export */   getWaiters: () => (/* binding */ getWaiters),\n/* harmony export */   hasPendingWaiters: () => (/* binding */ hasPendingWaiters),\n/* harmony export */   register: () => (/* binding */ register),\n/* harmony export */   unregister: () => (/* binding */ unregister),\n/* harmony export */   waitFor: () => (/* binding */ waitFor),\n/* harmony export */   waitForFetch: () => (/* binding */ waitForFetch),\n/* harmony export */   waitForPromise: () => (/* binding */ waitForPromise)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"@ember/debug\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _token_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./token.js */ \"./node_modules/@ember/test-waiters/dist/token.js\");\nfunction _defineProperty(e,r,t){return(r=_toPropertyKey(r))in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e;}function _toPropertyKey(t){var i=_toPrimitive(t,\"string\");return\"symbol\"==typeof i?i:i+\"\";}function _toPrimitive(t,r){if(\"object\"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||\"default\");if(\"object\"!=typeof i)return i;throw new TypeError(\"@@toPrimitive must return a primitive value.\");}return(\"string\"===r?String:Number)(t);}// this ensures that if @ember/test-waiters exists in multiple places in the\n// build output we will still use a single map of waiters (there really should\n// only be one of them, or else `settled` will not work at all)\nconst WAITERS=function(){const HAS_SYMBOL=typeof Symbol!=='undefined';const symbolName='TEST_WAITERS';const symbol=HAS_SYMBOL?Symbol.for(symbolName):symbolName;const global=getGlobal();let waiters=global[symbol];if(waiters===undefined){waiters=global[symbol]=new Map();}return waiters;}();function indexable(input){return input;}function getGlobal(){if(typeof globalThis!=='undefined')return indexable(globalThis);if(typeof self!=='undefined')return indexable(self);if(typeof window!=='undefined')return indexable(window);throw new Error('unable to locate global object');}/**\n * Registers a waiter.\n *\n * @public\n * @param waiter {Waiter} A test waiter instance\n */function register(waiter){WAITERS.set(waiter.name,waiter);}/**\n * Un-registers a waiter.\n *\n * @public\n * @param waiter {Waiter} A test waiter instance\n */function unregister(waiter){WAITERS.delete(waiter.name);}/**\n * Gets an array of all waiters current registered.\n *\n * @public\n * @returns {Waiter[]}\n */function getWaiters(){const result=[];WAITERS.forEach(value=>{result.push(value);});return result;}/**\n * Clears all waiters.\n *\n * @private\n */function _reset(){for(const waiter of getWaiters()){waiter.isRegistered=false;}WAITERS.clear();}/**\n * Gets the current state of all waiters. Any waiters whose\n * `waitUntil` method returns false will be considered `pending`.\n *\n * @returns {PendingWaiterState} An object containing a count of all waiters\n * pending and a `waiters` object containing the name of all pending waiters\n * and their debug info.\n */function getPendingWaiterState(){const result={pending:0,waiters:{}};WAITERS.forEach(waiter=>{if(!waiter.waitUntil()){result.pending++;const debugInfo=waiter.debugInfo();result.waiters[waiter.name]=debugInfo||true;}});return result;}/**\n * Determines if there are any pending waiters.\n *\n * @returns {boolean} `true` if there are pending waiters, otherwise `false`.\n */function hasPendingWaiters(){const state=getPendingWaiterState();return state.pending>0;}const WAITER_NAME_PATTERN=/^[^:]*:?.*/;let WAITER_NAMES=new Set();function _resetWaiterNames(){WAITER_NAMES=new Set();}function getNextToken(){return new _token_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();}class TestWaiterImpl{constructor(name,nextToken){_defineProperty(this,\"name\",void 0);_defineProperty(this,\"nextToken\",void 0);_defineProperty(this,\"isRegistered\",false);_defineProperty(this,\"items\",new Map());_defineProperty(this,\"completedOperationsForTokens\",new WeakMap());_defineProperty(this,\"completedOperationsForPrimitives\",new Map());this.name=name;// @ts-ignore\nthis.nextToken=nextToken||getNextToken;}beginAsync(token=this.nextToken(),label){this._register();if(this.items.has(token)){// SAFETY: force stringification of a potential symbol\nthrow new Error(`beginAsync called for ${token} but it is already pending.`);}const error=new Error();this.items.set(token,{get stack(){return error.stack;},label});return token;}endAsync(token){if(!this.items.has(token)&&!this._getCompletedOperations(token).has(token)){throw new Error(`testWaiter.endAsync called with no preceding testWaiter.beginAsync call.\n        Test waiter calls should always be paired. This can occur when a test waiter's paired calls are invoked in a non-deterministic order.\n\n        See https://github.com/emberjs/ember-test-waiters#keep-beginasyncendasync-in-same-block-scope for more information.`);}this.items.delete(token);// Mark when a waiter operation has completed so we can distinguish\n// whether endAsync is being called before a prior beginAsync call above.\nthis._getCompletedOperations(token).set(token,true);}waitUntil(){return this.items.size===0;}debugInfo(){const result=[];this.items.forEach(value=>{result.push(value);});return result;}reset(){this.items.clear();}_register(){if(!this.isRegistered){register(this);this.isRegistered=true;}}_getCompletedOperations(token){const type=typeof token;const isFunction=type==='function';const isObject=token!==null&&type==='object';const isPrimitive=!isFunction&&!isObject;return isPrimitive?this.completedOperationsForPrimitives:this.completedOperationsForTokens;}}class NoopTestWaiter{constructor(name){_defineProperty(this,\"name\",void 0);this.name=name;}beginAsync(){return this;}endAsync(){}waitUntil(){return true;}debugInfo(){return[];}reset(){}}/**\n * Builds and returns a test waiter. The type of the\n * returned waiter is dependent on whether the app or\n * addon is in `isDevelopingApp()` mode or not.\n *\n * @public\n *\n * @param name {string} The name of the test waiter\n * @returns {TestWaiter}\n *\n * @example\n *\n * import Component from '@ember/component';\n * import { buildWaiter } from '@ember/test-waiters';\n *\n * if (macroCondition(isDevelopingApp())) {\n *   let waiter = buildWaiter('friend-waiter');\n * }\n *\n * export default class Friendz extends Component {\n *   didInsertElement() {\n *     let token = waiter.beginAsync(this);\n *\n *     someAsyncWork().then(() => {\n *       waiter.endAsync(token);\n *     });\n *   }\n * }\n */function buildWaiter(name){{(0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.warn)(`The waiter name '${name}' is already in use`,!WAITER_NAMES.has(name),{id:'@ember/test-waiters.duplicate-waiter-name'});WAITER_NAMES.add(name);}{(0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.warn)(`You must provide a name that contains a descriptive prefix separated by a colon.\n\n        Example: ember-fictitious-addon:some-file\n\n        You passed: ${name}`,WAITER_NAME_PATTERN.test(name),{id:'@ember/test-waiters.invalid-waiter-name'});return new TestWaiterImpl(name);}}const PROMISE_WAITER=buildWaiter('@ember/test-waiters:promise-waiter');/**\n * A convenient utility function to simplify waiting for a promise.\n *\n * @public\n * @param promise {Promise<T> | RSVP.Promise<T>} The promise to track async operations for\n * @param label {string} An optional string to identify the promise\n *\n * @example\n *\n * import Component from '@ember/component';\n * import { waitForPromise } from '@ember/test-waiters';\n *\n * export default class Friendz extends Component {\n *   didInsertElement() {\n *     waitForPromise(new Promise(resolve => {\n *       doSomeWork();\n *       resolve();\n *     }));\n *   }\n * }\n */function waitForPromise(promise,label){let result=promise;{PROMISE_WAITER.beginAsync(promise,label);result=promise.then(value=>{PROMISE_WAITER.endAsync(promise);return value;},error=>{PROMISE_WAITER.endAsync(promise);throw error;});}return result;}/**\n * A convenient utility function to simplify waiting for async. Can be used\n * in both decorator and function form. When applied to an async function, it\n * will cause tests to wait until the returned promise has resolves. When\n * applied to a generator function, it will cause tests to wait until the\n * returned iterator has run to completion, which is useful for wrapping\n * ember-concurrency task functions.\n *\n *\n * @public\n * @param promise {Function} An async function or a generator function\n * @param label {string} An optional string to identify the promise\n *\n * @example\n *\n * import Component from '@ember/component';\n * import { waitFor } from '@ember/test-waiters';\n *\n * export default Component.extend({\n *   doAsyncStuff: waitFor(async function doAsyncStuff() {\n *     await somethingAsync();\n *   }\n * });\n *\n * @example\n *\n * import Component from '@ember/component';\n * import { waitFor } from '@ember/test-waiters';\n *\n * export default class Friendz extends Component {\n *   @waitFor\n *   async doAsyncStuff() {\n *     await somethingAsync();\n *   }\n * }\n *\n */function waitFor(...args){const isFunction=args.length<3;if(isFunction){const[fn,label]=args;return wrapFunction(fn,label);}else{const[,,descriptor,label]=args;const fn=descriptor.value;descriptor.value=wrapFunction(fn,label);return descriptor;}}function wrapFunction(fn,label){return function(...args){const result=fn.call(this,...args);if(isThenable(result)){return waitForPromise(result,label);}else if(isGenerator(result)){return waitForGenerator(result,label);}else{return result;}};}function isThenable(maybePromise){const type=typeof maybePromise;return(maybePromise!==null&&type==='object'||type==='function')&&typeof maybePromise.then==='function';}function isGenerator(maybeGenerator){// Because we don't have Symbol.iterator in IE11\nreturn typeof maybeGenerator.next==='function'&&typeof maybeGenerator.return==='function'&&typeof maybeGenerator.throw==='function';}const GENERATOR_WAITER=buildWaiter('@ember/test-waiters:generator-waiter');function waitForGenerator(generator,label){GENERATOR_WAITER.beginAsync(generator,label);let isWaiting=true;function stopWaiting(){if(isWaiting){GENERATOR_WAITER.endAsync(generator);isWaiting=false;}}return{next(...args){let hasErrored=true;try{const val=generator.next(...args);hasErrored=false;if(val.done){stopWaiting();}return val;}finally{// If generator.next() throws, we need to stop waiting. But if we catch\n// and re-throw exceptions, it could move the location from which the\n// uncaught exception is thrown, interfering with the developer\n// debugging experience if they have break-on-exceptions enabled. So we\n// use a boolean flag and a finally block to emulate a catch block.\nif(hasErrored){stopWaiting();}}},return(...args){stopWaiting();return generator.return(...args);},throw(...args){stopWaiting();return generator.throw(...args);}};}async function waitForFetch(fetchPromise){const response=await waitForPromise(fetchPromise);return new Proxy(response,{get(target,prop,receiver){const original=Reflect.get(target,prop,receiver);if(typeof prop==='string'&&['json','text','arrayBuffer','blob','formData','bytes'].includes(prop)){return(...args)=>{return waitForPromise(original.call(target,...args));};}return original;}});}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@ember/test-waiters/dist/index.js?");

/***/ }),

/***/ "./node_modules/@ember/test-waiters/dist/token.js":
/*!********************************************************!*\
  !*** ./node_modules/@ember/test-waiters/dist/token.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Token)\n/* harmony export */ });\n/**\n * A class representing a test waiter token.\n *\n * @public\n * @class\n */class Token{}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@ember/test-waiters/dist/token.js?");

/***/ }),

/***/ "./node_modules/@embroider/macros/src/addon/es-compat2.js":
/*!****************************************************************!*\
  !*** ./node_modules/@embroider/macros/src/addon/es-compat2.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ esCompat)\n/* harmony export */ });\nfunction esCompat(m){return m?.__esModule?m:{default:m,...m};}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@embroider/macros/src/addon/es-compat2.js?");

/***/ }),

/***/ "./node_modules/@embroider/macros/src/addon/runtime.js":
/*!*************************************************************!*\
  !*** ./node_modules/@embroider/macros/src/addon/runtime.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   each: () => (/* binding */ each),\n/* harmony export */   getGlobalConfig: () => (/* binding */ getGlobalConfig),\n/* harmony export */   isTesting: () => (/* binding */ isTesting),\n/* harmony export */   macroCondition: () => (/* binding */ macroCondition)\n/* harmony export */ });\n/*\n  These are the runtime implementations for the javascript macros that have\n  runtime implementations.\n\n  Not every macro has a runtime implementation, some only make sense in the\n  build and always run there.\n\n  Even when we have runtime implementations, we are still careful to emit static\n  errors during the build wherever possible, and runtime errors when necessary,\n  so that you're not surprised when you switch from runtime-mode to compile-time\n  mode.\n*//*\n  CAUTION: in classic builds, this file gets shared by all present copies of\n  @embroider/macros. If you want to change its public API, you need to rename it\n  and update `pathToRuntime` in ../babel/state.ts to point at it, so that your\n  babel plugin and runtime will match.\n*/function each(array){if(!Array.isArray(array)){throw new Error(`the argument to the each() macro must be an array`);}return array;}function macroCondition(predicate){return predicate;}// This is here as a compile target for `getConfig` and `getOwnConfig` when\n// we're in runtime mode. This is not public API to call from your own code.\nfunction config(packageRoot){return runtimeConfig.packages[packageRoot];}function getGlobalConfig(){return runtimeConfig.global;}function isTesting(){let g=runtimeConfig.global;let e=g&&g['@embroider/macros'];return Boolean(e&&e.isTesting);}const runtimeConfig=initializeRuntimeMacrosConfig();// this exists to be targeted by our babel plugin\nfunction initializeRuntimeMacrosConfig(){return{\"packages\":{},\"global\":{\"@embroider/macros\":{\"isTesting\":false},\"WarpDrive\":{\"debug\":{\"DEBUG_RELATIONSHIP_NOTIFICATIONS\":false,\"LOG_CACHE\":false,\"LOG_GRAPH\":false,\"LOG_IDENTIFIERS\":false,\"LOG_INSTANCE_CACHE\":false,\"LOG_METRIC_COUNTS\":false,\"LOG_NOTIFICATIONS\":false,\"LOG_REQUESTS\":false,\"LOG_REQUEST_STATUS\":false,\"__INTERNAL_LOG_NATIVE_MAP_SET_COUNTS\":false},\"polyfillUUID\":false,\"includeDataAdapter\":true,\"compatWith\":null,\"deprecations\":{\"DEPRECATE_CATCH_ALL\":true,\"DEPRECATE_COMPUTED_CHAINS\":true,\"DEPRECATE_EMBER_INFLECTOR\":true,\"DEPRECATE_LEGACY_IMPORTS\":true,\"DEPRECATE_MANY_ARRAY_DUPLICATES\":true,\"DEPRECATE_NON_STRICT_ID\":true,\"DEPRECATE_NON_STRICT_TYPES\":true,\"DEPRECATE_NON_UNIQUE_PAYLOADS\":true,\"DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE\":true,\"DEPRECATE_STORE_EXTENDS_EMBER_OBJECT\":false,\"DISABLE_7X_DEPRECATIONS\":true,\"ENABLE_LEGACY_SCHEMA_SERVICE\":true},\"features\":{\"JSON_API_CACHE_VALIDATION_ERRORS\":false,\"SAMPLE_FEATURE_FLAG\":false},\"activeLogging\":{\"DEBUG_RELATIONSHIP_NOTIFICATIONS\":true,\"LOG_CACHE\":true,\"LOG_GRAPH\":true,\"LOG_IDENTIFIERS\":true,\"LOG_INSTANCE_CACHE\":true,\"LOG_METRIC_COUNTS\":true,\"LOG_NOTIFICATIONS\":true,\"LOG_REQUESTS\":true,\"LOG_REQUEST_STATUS\":true,\"__INTERNAL_LOG_NATIVE_MAP_SET_COUNTS\":true},\"env\":{\"TESTING\":true,\"PRODUCTION\":false,\"DEBUG\":true,\"IS_RECORDING\":false,\"IS_CI\":false,\"SHOULD_RECORD\":true}}}};}function updaterMethods(){return{config,getGlobalConfig,setConfig(packageRoot,value){runtimeConfig.packages[packageRoot]=value;},setGlobalConfig(key,value){runtimeConfig.global[key]=value;}};}// this is how runtime config can get injected at boot. I'm not sure yet if this\n// should be public API, but we certainly need it internally to set things like\n// the global fastboot.isRunning.\n//\n// consumers of this API push a function onto\n// window._embroider_macros_runtime_config. The function is given four methods\n// which allow it to read and write the per-package and global configs. The\n// reason for allowing both read & write is that merging strategies are up to\n// each consumers -- read first, then merge, then write.\n//\n// For an example user of this API, see where we generate\n// embroider_macros_fastboot_init.js' in @embroider/core.\nlet updaters=typeof window!=='undefined'?window._embroider_macros_runtime_config:undefined;if(updaters){let methods=updaterMethods();for(let updater of updaters){updater(methods);}}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@embroider/macros/src/addon/runtime.js?");

/***/ }),

/***/ "./node_modules/@glimmer/component/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@glimmer/component/dist/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GlimmerComponent)\n/* harmony export */ });\n/* harmony import */ var _glimmer_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/env */ \"./node_modules/@glimmer/env/dist/modules/es2017/index.js\");\n/* harmony import */ var _ember_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/component */ \"@ember/component\");\n/* harmony import */ var _ember_component__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_component__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ember_destroyable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember/destroyable */ \"@ember/destroyable\");\n/* harmony import */ var _ember_destroyable__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ember_destroyable__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _ember_runloop__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ember/runloop */ \"@ember/runloop\");\n/* harmony import */ var _ember_runloop__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_ember_runloop__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _ember_owner__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ember/owner */ \"@ember/owner\");\n/* harmony import */ var _ember_owner__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_ember_owner__WEBPACK_IMPORTED_MODULE_4__);\nfunction _defineProperty(e,r,t){return(r=_toPropertyKey(r))in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e;}function _toPropertyKey(t){var i=_toPrimitive(t,\"string\");return\"symbol\"==typeof i?i:i+\"\";}function _toPrimitive(t,r){if(\"object\"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||\"default\");if(\"object\"!=typeof i)return i;throw new TypeError(\"@@toPrimitive must return a primitive value.\");}return(\"string\"===r?String:Number)(t);}const DESTROYING=new WeakMap();const DESTROYED=new WeakMap();function setDestroying(component){DESTROYING.set(component,true);}function setDestroyed(component){DESTROYED.set(component,true);}// This provides a type-safe `WeakMap`: the getter and setter link the key to a\n// specific value. This is how `WeakMap`s actually behave, but the TS type\n// system does not (yet!) have a good way to capture that for types like\n// `WeakMap` where the type is generic over another generic type (here, `Args`).\n// SAFETY: this only holds because we *only* acces this when `DEBUG` is `true`.\n// There is not a great way to connect that data in TS at present.\nlet ARGS_SET;if(_glimmer_env__WEBPACK_IMPORTED_MODULE_0__.DEBUG){ARGS_SET=new WeakMap();}// --- Type utilities for component signatures --- //\n// Type-only \"symbol\" to use with `EmptyObject` below, so that it is *not*\n// equivalent to an empty interface.\n/**\n * This provides us a way to have a \"fallback\" which represents an empty object,\n * without the downsides of how TS treats `{}`. Specifically: this will\n * correctly leverage \"excess property checking\" so that, given a component\n * which has no named args, if someone invokes it with any named args, they will\n * get a type error.\n *\n * @internal This is exported so declaration emit works (if it were not emitted,\n *   declarations which fall back to it would not work). It is *not* intended for\n *   public usage, and the specific mechanics it uses may change at any time.\n *   The location of this export *is* part of the public API, because moving it\n *   will break existing declarations, but is not legal for end users to import\n *   themselves, so ***DO NOT RELY ON IT***.\n *//** Given a signature `S`, get back the `Args` type. *//**\n * Given any allowed shorthand form of a signature, desugars it to its full\n * expanded type.\n *\n * @internal This is only exported so we can avoid duplicating it in\n *   [Glint](https://github.com/typed-ember/glint) or other such tooling. It is\n *   *not* intended for public usage, and the specific mechanics it uses may\n *   change at any time. Although the signature produced by is part of Glimmer's\n *   public API the existence and mechanics of this specific symbol are *not*,\n *   so ***DO NOT RELY ON IT***.\n */// The conditional type here is because TS applies conditional types\n// distributively. This means that for union types, checks like `keyof T` get\n// all the keys from all elements of the union, instead of ending up as `never`\n// and then always falling into the `Signature` path instead of falling back to\n// the legacy args handling path.\n/**\n * @internal we use this type for convenience internally; inference means users\n *   should not normally need to name it\n *//**\n * The `Component` class defines an encapsulated UI element that is rendered to\n * the DOM. A component is made up of a template and, optionally, this component\n * object.\n *\n * ## Defining a Component\n *\n * To define a component, subclass `Component` and add your own properties,\n * methods and lifecycle hooks:\n *\n * ```ts\n * import Component from '@glimmer/component';\n *\n * export default class extends Component {\n * }\n * ```\n *\n * ## Lifecycle Hooks\n *\n * Lifecycle hooks allow you to respond to changes to a component, such as when\n * it gets created, rendered, updated or destroyed. To add a lifecycle hook to a\n * component, implement the hook as a method on your component subclass.\n *\n * For example, to be notified when Glimmer has rendered your component so you\n * can attach a legacy jQuery plugin, implement the `didInsertElement()` method:\n *\n * ```ts\n * import Component from '@glimmer/component';\n *\n * export default class extends Component {\n *   didInsertElement() {\n *     $(this.element).pickadate();\n *   }\n * }\n * ```\n *\n * ## Data for Templates\n *\n * `Component`s have two different kinds of data, or state, that can be\n * displayed in templates:\n *\n * 1. Arguments\n * 2. Properties\n *\n * Arguments are data that is passed in to a component from its parent\n * component. For example, if I have a `UserGreeting` component, I can pass it\n * a name and greeting to use:\n *\n * ```hbs\n * <UserGreeting @name=\"Ricardo\" @greeting=\"Olá\" />\n * ```\n *\n * Inside my `UserGreeting` template, I can access the `@name` and `@greeting`\n * arguments that I've been given:\n *\n * ```hbs\n * {{@greeting}}, {{@name}}!\n * ```\n *\n * Arguments are also available inside my component:\n *\n * ```ts\n * console.log(this.args.greeting); // prints \"Olá\"\n * ```\n *\n * Properties, on the other hand, are internal to the component and declared in\n * the class. You can use properties to store data that you want to show in the\n * template, or pass to another component as an argument.\n *\n * ```ts\n * import Component from '@glimmer/component';\n *\n * export default class extends Component {\n *   user = {\n *     name: 'Robbie'\n *   }\n * }\n * ```\n *\n * In the above example, we've defined a component with a `user` property that\n * contains an object with its own `name` property.\n *\n * We can render that property in our template:\n *\n * ```hbs\n * Hello, {{user.name}}!\n * ```\n *\n * We can also take that property and pass it as an argument to the\n * `UserGreeting` component we defined above:\n *\n * ```hbs\n * <UserGreeting @greeting=\"Hello\" @name={{user.name}} />\n * ```\n *\n * ## Arguments vs. Properties\n *\n * Remember, arguments are data that was given to your component by its parent\n * component, and properties are data your component has defined for itself.\n *\n * You can tell the difference between arguments and properties in templates\n * because arguments always start with an `@` sign (think \"A is for arguments\"):\n *\n * ```hbs\n * {{@firstName}}\n * ```\n *\n * We know that `@firstName` came from the parent component, not the current\n * component, because it starts with `@` and is therefore an argument.\n *\n * On the other hand, if we see:\n *\n * ```hbs\n * {{name}}\n * ```\n *\n * We know that `name` is a property on the component. If we want to know where\n * the data is coming from, we can go look at our component class to find out.\n *\n * Inside the component itself, arguments always show up inside the component's\n * `args` property. For example, if `{{@firstName}}` is `Tom` in the template,\n * inside the component `this.args.firstName` would also be `Tom`.\n */let GlimmerComponent$1=class GlimmerComponent{/**\n   * Constructs a new component and assigns itself the passed properties. You\n   * should not construct new components yourself. Instead, Glimmer will\n   * instantiate new components automatically as it renders.\n   *\n   * @param owner\n   * @param args\n   */constructor(owner,args){/**\n   * Named arguments passed to the component from its parent component.\n   * They can be accessed in JavaScript via `this.args.argumentName` and in the template via `@argumentName`.\n   *\n   * Say you have the following component, which will have two `args`, `firstName` and `lastName`:\n   *\n   * ```hbs\n   * <my-component @firstName=\"Arthur\" @lastName=\"Dent\" />\n   * ```\n   *\n   * If you needed to calculate `fullName` by combining both of them, you would do:\n   *\n   * ```ts\n   * didInsertElement() {\n   *   console.log(`Hi, my full name is ${this.args.firstName} ${this.args.lastName}`);\n   * }\n   * ```\n   *\n   * While in the template you could do:\n   *\n   * ```hbs\n   * <p>Welcome, {{@firstName}} {{@lastName}}!</p>\n   * ```\n   */_defineProperty(this,\"args\",void 0);if(_glimmer_env__WEBPACK_IMPORTED_MODULE_0__.DEBUG&&!(owner!==null&&typeof owner==='object'&&ARGS_SET.has(args))){throw new Error(`You must pass both the owner and args to super() in your component: ${this.constructor.name}. You can pass them directly, or use ...arguments to pass all arguments through.`);}this.args=args;DESTROYING.set(this,false);DESTROYED.set(this,false);}get isDestroying(){return DESTROYING.get(this)||false;}get isDestroyed(){return DESTROYED.get(this)||false;}/**\n   * Called before the component has been removed from the DOM.\n   */willDestroy(){}};class BaseComponentManager{constructor(owner){_defineProperty(this,\"owner\",void 0);this.owner=owner;}createComponent(ComponentClass,args){if(_glimmer_env__WEBPACK_IMPORTED_MODULE_0__.DEBUG){ARGS_SET.set(args.named,true);}return new ComponentClass(this.owner,args.named);}getContext(component){return component;}}const CAPABILITIES=(0,_ember_component__WEBPACK_IMPORTED_MODULE_1__.capabilities)('3.13',{destructor:true,asyncLifecycleCallbacks:false,updateHook:false});function scheduledDestroyComponent(component){if(component.isDestroyed){return;}(0,_ember_destroyable__WEBPACK_IMPORTED_MODULE_2__.destroy)(component);setDestroyed(component);}/**\n * This component manager runs in Ember.js environments and extends the base component manager to:\n *\n * 1. Properly destroy the component's associated `meta` data structure\n * 2. Schedule destruction using Ember's runloop\n */class EmberGlimmerComponentManager extends BaseComponentManager{constructor(...args){super(...args);_defineProperty(this,\"capabilities\",CAPABILITIES);}destroyComponent(component){if(component.isDestroying){return;}setDestroying(component);(0,_ember_runloop__WEBPACK_IMPORTED_MODULE_3__.schedule)('actions',component,component.willDestroy);(0,_ember_runloop__WEBPACK_IMPORTED_MODULE_3__.schedule)('destroy',this,scheduledDestroyComponent,component);}}/**\n  A component is a reusable UI element that consists of a `.hbs` template and an\n  optional JavaScript class that defines its behavior. For example, someone\n  might make a `button` in the template and handle the click behavior in the\n  JavaScript file that shares the same name as the template.\n\n  Components are broken down into two categories:\n\n  - Components _without_ JavaScript, that are based only on a template. These\n    are called Template-only or TO components.\n  - Components _with_ JavaScript, which consist of a template and a backing\n    class.\n\n  Ember ships with two types of JavaScript classes for components:\n\n  1. Glimmer components, imported from `@glimmer/component`, which are the\n     default components for Ember Octane (3.15) and more recent editions.\n  2. Classic components, imported from `@ember/component`, which were the\n     default for older editions of Ember (pre 3.15).\n\n  Below is the documentation for Template-only and Glimmer components. If you\n  are looking for the API documentation for Classic components, it is\n  [available here](/ember/release/classes/Component). The source code for\n  Glimmer components can be found in [`@glimmer/component`](https://github.com/glimmerjs/glimmer.js/tree/master/packages/%40glimmer/component).\n\n  ## Defining a Template-only Component\n\n  The simplest way to create a component is to create a template file in\n  `app/templates/components`. For example, if you name a template\n  `app/templates/components/person-profile.hbs`:\n\n  ```app/templates/components/person-profile.hbs\n  <h1>{{@person.name}}</h1>\n  <img src={{@person.avatar}}>\n  <p class='signature'>{{@person.signature}}</p>\n  ```\n\n  You will be able to use `<PersonProfile />` to invoke this component elsewhere\n  in your application:\n\n  ```app/templates/application.hbs\n  <PersonProfile @person={{this.currentUser}} />\n  ```\n\n  Note that component names are capitalized here in order to distinguish them\n  from regular HTML elements, but they are dasherized in the file system.\n\n  While the angle bracket invocation form is generally preferred, it is also\n  possible to invoke the same component with the `{{person-profile}}` syntax:\n\n  ```app/templates/application.hbs\n  {{person-profile person=this.currentUser}}\n  ```\n\n  Note that with this syntax, you use dashes in the component name and\n  arguments are passed without the `@` sign.\n\n  In both cases, Ember will render the content of the component template we\n  created above. The end result will be something like this:\n\n  ```html\n  <h1>Tomster</h1>\n  <img src=\"https://emberjs.com/tomster.jpg\">\n  <p class='signature'>Out of office this week</p>\n  ```\n\n  ## File System Nesting\n\n  Components can be nested inside sub-folders for logical groupping. For\n  example, if we placed our template in\n  `app/templates/components/person/short-profile.hbs`, we can invoke it as\n  `<Person::ShortProfile />`:\n\n  ```app/templates/application.hbs\n  <Person::ShortProfile @person={{this.currentUser}} />\n  ```\n\n  Or equivalently, `{{person/short-profile}}`:\n\n  ```app/templates/application.hbs\n  {{person/short-profile person=this.currentUser}}\n  ```\n\n  ## Using Blocks\n\n  You can use `yield` inside a template to include the **contents** of any block\n  attached to the component. For instance, if we added a `{{yield}}` to our\n  component like so:\n\n  ```app/templates/components/person-profile.hbs\n  <h1>{{@person.name}}</h1>\n  {{yield}}\n  ```\n\n  We could then invoke it like this:\n\n  ```handlebars\n  <PersonProfile @person={{this.currentUser}}>\n    <p>Admin mode</p>\n  </PersonProfile>\n  ```\n\n  or with curly syntax like this:\n\n  ```handlebars\n  {{#person-profile person=this.currentUser}}\n    <p>Admin mode</p>\n  {{/person-profile}}\n  ```\n\n  And the content passed in between the brackets of the component would be\n  rendered in the same place as the `{{yield}}` within it, replacing it.\n\n  Blocks are executed in their original context, meaning they have access to the\n  scope and any in-scope variables where they were defined.\n\n  ### Passing parameters to blocks\n\n  You can also pass positional parameters to `{{yield}}`, which are then made\n  available in the block:\n\n  ```app/templates/components/person-profile.hbs\n  <h1>{{@person.name}}</h1>\n  {{yield @person.signature}}\n  ```\n\n  We can then use this value in the block like so:\n\n  ```handlebars\n  <PersonProfile @person={{this.currentUser}} as |signature|>\n    {{signature}}\n  </PersonProfile>\n  ```\n\n  ### Passing multiple blocks\n\n  You can pass multiple blocks to a component by giving them names, and\n  specifying which block you are yielding to with `{{yield}}`. For instance, if\n  we wanted to add a way for users to customize the title of our\n  `<PersonProfile>` component, we could add a named block inside of the header:\n\n  ```app/templates/components/person-profile.hbs\n  <h1>{{yield to=\"title\"}}</h1>\n  {{yield}}\n  ```\n\n  This component could then be invoked like so:\n\n  ```handlebars\n  <PersonProfile @person={{this.currentUser}}>\n    <:title>{{this.currentUser.name}}</:title>\n    <:default>{{this.currentUser.signature}}</:default>\n  </PersonProfile>\n  ```\n\n  When passing named blocks, you must name every block, including the `default`\n  block, which is the block that is defined if you do not pass a `to` parameter\n  to `{{yield}}`. Whenever you invoke a component without passing explicitly\n  named blocks, the passed block is considered the `default` block.\n\n  ### Passing parameters to named blocks\n\n  You can also pass parameters to named blocks:\n\n  ```app/templates/components/person-profile.hbs\n  <h1>{{yield @person.name to=\"title\"}}</h1>\n  {{yield @person.signature}}\n  ```\n\n  These parameters can then be used like so:\n\n  ```handlebars\n  <PersonProfile @person={{this.currentUser}}>\n    <:title as |name|>{{name}}</:title>\n    <:default as |signature|>{{signature}}</:default>\n  </PersonProfile>\n  ```\n\n  ### Checking to see if a block exists\n\n  You can also check to see if a block exists using the `(has-block)` keyword,\n  and conditionally use it, or provide a default template instead.\n\n  ```app/templates/components/person-profile.hbs\n  <h1>\n    {{#if (has-block \"title\")}}\n      {{yield @person.name to=\"title\"}}\n    {{else}}\n      {{@person.name}}\n    {{/if}}\n  </h1>\n\n  {{#if (has-block)}}\n    {{yield @person.signature}}\n  {{else}}\n    {{@person.signature}}\n  {{/if}}\n  ```\n\n  With this template, we can then optionally pass in one block, both blocks, or\n  none at all:\n\n  ```handlebars\n  {{! passing both blocks }}\n  <PersonProfile @person={{this.currentUser}}>\n    <:title as |name|>{{name}}</:title>\n    <:default as |signature|>{{signature}}</:default>\n  </PersonProfile>\n\n  {{! passing just the title block }}\n  <PersonProfile @person={{this.currentUser}}>\n    <:title as |name|>{{name}}</:title>\n  </PersonProfile>\n\n  {{! passing just the default block }}\n  <PersonProfile @person={{this.currentUser}} as |signature|>\n    {{signature}}\n  </PersonProfile>\n\n  {{! not passing any blocks }}\n  <PersonProfile @person={{this.currentUser}}/>\n  ```\n\n  ### Checking to see if a block has parameters\n\n  We can also check if a block receives parameters using the `(has-block-params)`\n  keyword, and conditionally yield different values if so.\n\n  ```app/templates/components/person-profile.hbs\n  {{#if (has-block-params)}}\n    {{yield @person.signature}}\n  {{else}}\n    {{yield}}\n  {{/if}}\n  ```\n\n  ## Customizing Components With JavaScript\n\n  To add JavaScript to a component, create a JavaScript file in the same\n  location as the template file, with the same name, and export a subclass\n  of `Component` as the default value. For example, to add Javascript to the\n  `PersonProfile` component which we defined above, we would create\n  `app/components/person-profile.js` and export our class as the default, like\n  so:\n\n  ```app/components/person-profile.js\n  import Component from '@glimmer/component';\n\n  export default class PersonProfileComponent extends Component {\n    get displayName() {\n      let { title, firstName, lastName } = this.args.person;\n\n      if (title) {\n        return `${title} ${lastName}`;\n      } else {\n        return `${firstName} ${lastName}`;\n      }\n    })\n  }\n  ```\n\n  You can add your own properties, methods, and lifecycle hooks to this\n  subclass to customize its behavior, and you can reference the instance of the\n  class in your template using `{{this}}`. For instance, we could access the\n  `displayName` property of our `PersonProfile` component instance in the\n  template like this:\n\n  ```app/templates/components/person-profile.hbs\n  <h1>{{this.displayName}}</h1>\n  {{yield}}\n  ```\n\n  ## `constructor`\n\n  params: `owner` object and `args` object\n\n  Constructs a new component and assigns itself the passed properties. The\n  constructor is run whenever a new instance of the component is created, and\n  can be used to setup the initial state of the component.\n\n  ```javascript\n  import Component from '@glimmer/component';\n\n  export default class SomeComponent extends Component {\n    constructor(owner, args) {\n      super(owner, args);\n\n      if (this.args.displayMode === 'list') {\n        this.items = [];\n      }\n    }\n  }\n  ```\n\n  Service injections and arguments are available in the constructor.\n\n  ```javascript\n  import Component from '@glimmer/component';\n  import { service } from '@ember/service';\n\n  export default class SomeComponent extends Component {\n    @service myAnimations;\n\n    constructor(owner, args) {\n      super(owner, args);\n\n      if (this.args.fadeIn === true) {\n        this.myAnimations.register(this, 'fade-in');\n      }\n    }\n  }\n  ```\n\n  ## `willDestroy`\n\n  `willDestroy` is called after the component has been removed from the DOM, but\n  before the component is fully destroyed. This lifecycle hook can be used to\n  cleanup the component and any related state.\n\n  ```javascript\n  import Component from '@glimmer/component';\n  import { service } from '@ember/service';\n\n  export default class SomeComponent extends Component {\n    @service myAnimations;\n\n    willDestroy() {\n      super.willDestroy(...arguments);\n\n      this.myAnimations.unregister(this);\n    }\n  }\n  ```\n\n  ## `args`\n\n  The `args` property of Glimmer components is an object that contains the\n  _arguments_ that are passed to the component. For instance, the\n  following component usage:\n\n  ```handlebars\n  <SomeComponent @fadeIn={{true}} />\n  ```\n\n  Would result in the following `args` object to be passed to the component:\n\n  ```javascript\n  { fadeIn: true }\n  ```\n\n  `args` can be accessed at any point in the component lifecycle, including\n  `constructor` and `willDestroy`. They are also automatically marked as tracked\n  properties, and they can be depended on as computed property dependencies:\n\n  ```javascript\n  import Component from '@glimmer/component';\n  import { computed } from '@ember/object';\n\n  export default class SomeComponent extends Component {\n\n    @computed('args.someValue')\n    get computedGetter() {\n      // updates whenever args.someValue updates\n      return this.args.someValue;\n    }\n\n    get standardGetter() {\n      // updates whenever args.anotherValue updates (Ember 3.13+)\n      return this.args.anotherValue;\n    }\n  }\n  ```\n\n  ## `isDestroying`\n\n  A boolean flag to tell if the component is in the process of destroying. This is set to\n  true before `willDestroy` is called.\n\n  ## `isDestroyed`\n  A boolean to tell if the component has been fully destroyed. This is set to true\n  after `willDestroy` is called.\n\n  @module @glimmer/component\n  @public\n*/class GlimmerComponent extends GlimmerComponent$1{constructor(owner,args){super(owner,args);if(_glimmer_env__WEBPACK_IMPORTED_MODULE_0__.DEBUG&&!(owner!==null&&typeof owner==='object')){throw new Error(`You must pass both the owner and args to super() in your component: ${this.constructor.name}. You can pass them directly, or use ...arguments to pass all arguments through.`);}(0,_ember_owner__WEBPACK_IMPORTED_MODULE_4__.setOwner)(this,owner);}}(0,_ember_component__WEBPACK_IMPORTED_MODULE_1__.setComponentManager)(owner=>{return new EmberGlimmerComponentManager(owner);},GlimmerComponent);\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@glimmer/component/dist/index.js?");

/***/ }),

/***/ "./node_modules/@glimmer/env/dist/modules/es2017/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@glimmer/env/dist/modules/es2017/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CI: () => (/* binding */ CI),\n/* harmony export */   DEBUG: () => (/* binding */ DEBUG)\n/* harmony export */ });\nconst DEBUG=false;const CI=false;\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@glimmer/env/dist/modules/es2017/index.js?");

/***/ }),

/***/ "./node_modules/@warp-drive/core-types/dist/-private.js":
/*!**************************************************************!*\
  !*** ./node_modules/@warp-drive/core-types/dist/-private.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getOrSetGlobal: () => (/* binding */ getOrSetGlobal),\n/* harmony export */   getOrSetUniversal: () => (/* binding */ getOrSetUniversal),\n/* harmony export */   peekTransient: () => (/* binding */ peekTransient),\n/* harmony export */   peekUniversalTransient: () => (/* binding */ peekUniversalTransient),\n/* harmony export */   setTransient: () => (/* binding */ setTransient),\n/* harmony export */   setUniversalTransient: () => (/* binding */ setUniversalTransient)\n/* harmony export */ });\nconst name=\"@warp-drive/core-types\";const version=\"5.4.1\";// in testing mode, we utilize globals to ensure only one copy exists of\n// these maps, due to bugs in ember-auto-import\nconst GlobalRef=globalThis;const UniversalCache=GlobalRef.__warpDrive_universalCache=GlobalRef.__warpDrive_universalCache??{};// in order to support mirror packages, we ensure that each\n// unique package name has its own global cache\nGlobalRef[name]=GlobalRef[name]??{__version:version};const GlobalSink=GlobalRef[name];{if(GlobalSink.__version!==version){throw new Error('Multiple versions of WarpDrive detected, the application will malfunction.');}}const ModuleScopedCaches=GlobalSink.__warpDrive_ModuleScopedCaches??{};{if(!GlobalSink.__warpDrive_ModuleScopedCaches){GlobalSink.__warpDrive_ModuleScopedCaches=ModuleScopedCaches;}else{// eslint-disable-next-line no-console\nconsole.warn(`\nMultiple copies of EmberData have been detected. This may be due to a bug in ember-auto-import\n  in which test assets get their own copy of some v2-addons. This can cause the application to\n  malfunction as each copy will maintain its own separate state.`);}}function getOrSetGlobal(key,value){{const existing=ModuleScopedCaches[key];if(existing===undefined){return ModuleScopedCaches[key]=value;}else{return existing;}}}function peekTransient(key){const globalKey=`(transient) ${key}`;return ModuleScopedCaches[globalKey]??null;}function setTransient(key,value){const globalKey=`(transient) ${key}`;return ModuleScopedCaches[globalKey]=value;}function getOrSetUniversal(key,value){{const existing=UniversalCache[key];if(existing===undefined){return UniversalCache[key]=value;}else{return existing;}}}function peekUniversalTransient(key){const globalKey=`(transient) ${key}`;return UniversalCache[globalKey]??null;}function setUniversalTransient(key,value){const globalKey=`(transient) ${key}`;return UniversalCache[globalKey]=value;}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@warp-drive/core-types/dist/-private.js?");

/***/ }),

/***/ "./node_modules/@warp-drive/core-types/dist/identifier.js":
/*!****************************************************************!*\
  !*** ./node_modules/@warp-drive/core-types/dist/identifier.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CACHE_OWNER: () => (/* binding */ CACHE_OWNER),\n/* harmony export */   DEBUG_CLIENT_ORIGINATED: () => (/* binding */ DEBUG_CLIENT_ORIGINATED),\n/* harmony export */   DEBUG_IDENTIFIER_BUCKET: () => (/* binding */ DEBUG_IDENTIFIER_BUCKET),\n/* harmony export */   DEBUG_STALE_CACHE_OWNER: () => (/* binding */ DEBUG_STALE_CACHE_OWNER)\n/* harmony export */ });\n/**\n  @module @ember-data/store\n*/// provided for additional debuggability\nconst DEBUG_CLIENT_ORIGINATED=Symbol('record-originated-on-client');const DEBUG_IDENTIFIER_BUCKET=Symbol('identifier-bucket');const DEBUG_STALE_CACHE_OWNER=Symbol('warpDriveStaleCache');function ProdSymbol(str,debugStr){return Symbol(debugStr);}// also present in production\nconst CACHE_OWNER=ProdSymbol('__$co','CACHE_OWNER');/**\n * An Identifier specific to a record which may or may not\n * be present in the cache.\n *\n * The absence of an `id` DOES NOT indicate that this\n * Identifier is for a new client-created record as it\n * may also indicate that it was generated for a secondary\n * index and the primary `id` index is not yet known.\n *\n * @internal\n *//**\n * Used when an Identifier is known to be the stable version\n *\n * @internal\n *//**\n * Used when a StableRecordIdentifier was not created locally as part\n * of a call to store.createRecord\n *\n * Distinguishing between this Identifier and one for a client created\n * record that was created with an ID is generally speaking not possible\n * at runtime, so anything with an ID typically narrows to this.\n *\n * @internal\n *//**\n * Used when a StableRecordIdentifier was created locally\n * (by a call to store.createRecord).\n *\n * It is possible in rare circumstances to have a StableRecordIdentifier\n * that is not for a new record but does not have an ID. This would\n * happen if a user intentionally created one for use with a secondary-index\n * prior to the record having been fully loaded.\n *\n * @internal\n *//**\n * A referentially stable object with a unique string (lid) that can be used\n * as a reference to data in the cache.\n *\n * Every record instance has a unique identifier, and identifiers may refer\n * to data that has never been loaded (for instance, in an async relationship).\n *\n * @class StableRecordIdentifier\n * @public\n *//**\n * A string representing a unique identity.\n *\n * @property {string} lid\n * @public\n *//**\n * the primary resource `type` or `modelName` this identity belongs to.\n *\n * @property {string} type\n * @public\n *//**\n * the primary id for the record this identity belongs to. `null`\n * if not yet assigned an id.\n *\n * @property {string | null} id\n * @public\n */\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@warp-drive/core-types/dist/identifier.js?");

/***/ }),

/***/ "./node_modules/@warp-drive/core-types/dist/request.js":
/*!*************************************************************!*\
  !*** ./node_modules/@warp-drive/core-types/dist/request.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EnableHydration: () => (/* binding */ EnableHydration),\n/* harmony export */   IS_FUTURE: () => (/* binding */ IS_FUTURE),\n/* harmony export */   STRUCTURED: () => (/* binding */ STRUCTURED),\n/* harmony export */   SkipCache: () => (/* binding */ SkipCache)\n/* harmony export */ });\n/* harmony import */ var _private_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./-private.js */ \"./node_modules/@warp-drive/core-types/dist/-private.js\");\nconst SkipCache=(0,_private_js__WEBPACK_IMPORTED_MODULE_0__.getOrSetUniversal)('SkipCache',Symbol.for('wd:skip-cache'));const EnableHydration=(0,_private_js__WEBPACK_IMPORTED_MODULE_0__.getOrSetUniversal)('EnableHydration',Symbol.for('wd:enable-hydration'));const IS_FUTURE=(0,_private_js__WEBPACK_IMPORTED_MODULE_0__.getOrSetGlobal)('IS_FUTURE',Symbol('IS_FUTURE'));const STRUCTURED=(0,_private_js__WEBPACK_IMPORTED_MODULE_0__.getOrSetGlobal)('DOC',Symbol('DOC'));/**\n * Use these options to adjust CacheHandler behavior for a request.\n *\n * @typedoc\n *//**\n * JavaScript's native Request class.\n *\n * EmberData provides our own typings due to incompleteness in the native typings.\n *\n * @typedoc\n *//**\n * Extends JavaScript's native {@link Request} object with additional\n * properties specific to the RequestManager's capabilities.\n *\n * @typedoc\n *//**\n * Immutable version of {@link RequestInfo}. This is what is passed to handlers.\n *\n * @typedoc\n */\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@warp-drive/core-types/dist/request.js?");

/***/ }),

/***/ "./node_modules/@warp-drive/core-types/dist/runtime.js":
/*!*************************************************************!*\
  !*** ./node_modules/@warp-drive/core-types/dist/runtime.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getRuntimeConfig: () => (/* binding */ getRuntimeConfig),\n/* harmony export */   setLogging: () => (/* binding */ setLogging)\n/* harmony export */ });\n/* harmony import */ var _private_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./-private.js */ \"./node_modules/@warp-drive/core-types/dist/-private.js\");\nconst RuntimeConfig=(0,_private_js__WEBPACK_IMPORTED_MODULE_0__.getOrSetUniversal)('WarpDriveRuntimeConfig',{debug:{}});function trySessionStorage(){// This works even when sessionStorage is not available.\n// See https://github.com/emberjs/data/issues/9784\ntry{return globalThis.sessionStorage;}catch{return undefined;}}const storage=trySessionStorage();const settings=storage?.getItem('WarpDriveRuntimeConfig');if(settings){Object.assign(RuntimeConfig,JSON.parse(settings));}function getRuntimeConfig(){return RuntimeConfig;}/**\n * Upserts the specified logging configuration into the runtime\n * config.\n *\n * globalThis.setWarpDriveLogging({ LOG_CACHE: true } });\n *\n * @typedoc\n */function setLogging(config){Object.assign(RuntimeConfig.debug,config);storage?.setItem('WarpDriveRuntimeConfig',JSON.stringify(RuntimeConfig));}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@warp-drive/core-types/dist/runtime.js?");

/***/ }),

/***/ "./node_modules/@warp-drive/core-types/dist/symbols.js":
/*!*************************************************************!*\
  !*** ./node_modules/@warp-drive/core-types/dist/symbols.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RecordStore: () => (/* binding */ RecordStore),\n/* harmony export */   RequestSignature: () => (/* binding */ RequestSignature),\n/* harmony export */   ResourceType: () => (/* binding */ ResourceType),\n/* harmony export */   TransformName: () => (/* binding */ TransformName),\n/* harmony export */   Type: () => (/* binding */ Type)\n/* harmony export */ });\n/* harmony import */ var _private_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./-private.js */ \"./node_modules/@warp-drive/core-types/dist/-private.js\");\n/*\n * @module @warp-drive/core-types\n */const RecordStore=(0,_private_js__WEBPACK_IMPORTED_MODULE_0__.getOrSetGlobal)('Store',Symbol('Store'));/**\n * Symbol for the name of a resource, transformation\n * or derivation.\n *\n * ### With Resources\n *\n * This is an optional feature that can be used by\n * record implementations to provide a typescript\n * hint for the type of the resource.\n *\n * When used, EmberData and WarpDrive APIs can\n * take advantage of this to provide better type\n * safety and intellisense.\n *\n * ### With Derivations\n *\n * Required for derivations registered with\n * `store.registerDerivation(derivation)`.\n *\n * ```ts\n * function concat(record: object, options: ObjectValue | null, prop: string): string {}\n * concat[Name] = 'concat';\n * ```\n *\n * ### With Transforms\n *\n * Required for new-style transformations registered\n * with `store.registerTransform(transform)`.\n *\n * For legacy transforms, if not used,\n * `attr<Transform>('name')` will allow any string name.\n * `attr('name')` will always allow any string name.\n *\n * If used, `attr<Transform>('name')` will enforce\n * that the name is the same as the transform name.\n *\n * @type {Symbol}\n * @typedoc\n */const Type=(0,_private_js__WEBPACK_IMPORTED_MODULE_0__.getOrSetGlobal)('$type',Symbol('$type'));/**\n * Symbol for the type of a resource.\n *\n * This is an optional feature that can be used by\n * record implementations to provide a typescript\n * hint for the type of the resource.\n *\n * When used, EmberData and WarpDrive APIs can\n * take advantage of this to provide better type\n * safety and intellisense.\n *\n * @type {Symbol}\n * @typedoc\n */const ResourceType=Type;/**\n * Symbol for the name of a transform.\n *\n * This is an optional feature that can be used by\n * transform implementations to provide a typescript\n * hint for the name of the transform.\n *\n * If not used, `attr<Transform>('name')` will\n * allow any string name. `attr('name')` will always\n * allow any string name.\n *\n * If used, `attr<Transform>('name')` will enforce\n * that the name is the same as the transform name.\n *\n * @type {Symbol}\n * @typedoc\n */const TransformName=Type;/**\n * Symbol for use by builders to indicate the return type\n * generic to use for store.request()\n *\n * @type {Symbol}\n * @typedoc\n */const RequestSignature=(0,_private_js__WEBPACK_IMPORTED_MODULE_0__.getOrSetGlobal)('RequestSignature',Symbol('RequestSignature'));\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@warp-drive/core-types/dist/symbols.js?");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/ember-welcome-page/dist/components/welcome-page.css":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/ember-welcome-page/dist/components/welcome-page.css ***!
  \****************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);\n// Imports\n\nvar ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(function(i){return i[1]});\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"body {\\n  color: rgb(28, 30, 36);\\n  background: rgb(244, 246, 248);\\n  font-family: \\\"Inter var\\\",\\\"Inter web\\\",-apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji;\\n  font-size: 18px;\\n  font-weight: 200;\\n  line-height: 1.5;\\n  margin: 0 auto;\\n  padding: 0;\\n}\\n#ember-welcome-page-id-selector {\\n  height: 100vh;\\n  padding: 2em;\\n}\\n#ember-welcome-page-id-selector img {\\n  max-width: 100%;\\n}\\n#ember-welcome-page-id-selector p {\\n  font-size: 1.25em;\\n  margin: 0 0 .75em;\\n}\\n#ember-welcome-page-id-selector h1 {\\n  font-size: 2.5em;\\n  font-weight: 200;\\n  line-height: 1.2;\\n  margin-top: 0;\\n}\\n#ember-welcome-page-id-selector a:link,\\n#ember-welcome-page-id-selector a:visited {\\n  color:rgb(255, 92, 68);\\n}\\n#ember-welcome-page-id-selector a:hover,\\n#ember-welcome-page-id-selector a:active {\\n  color: rgb(255, 92, 68);\\n}\\n#ember-welcome-page-id-selector .tomster {\\n  flex: 2;\\n}\\n#ember-welcome-page-id-selector .welcome {\\n  flex: 3;\\n}\\n#ember-welcome-page-id-selector .columns {\\n  display: flex;\\n  margin: 0 auto;\\n  max-width: 960px;\\n}\\n#ember-welcome-page-id-selector .welcome > ul > li {\\n  padding-bottom: 0.5em;\\n  font-size: 1.1em;\\n}\\n#ember-welcome-page-id-selector .welcome > ul > li > a {\\n  font-weight: bold;\\n}\\n#ember-welcome-page-id-selector .postscript {\\n  color: rgb(28, 30, 36);\\n  background: rgb(244, 246, 248);\\n  font-style: italic;\\n  line-height: 2;\\n  margin: 0 auto;\\n  max-width: 960px;\\n  padding-top: 3em;\\n  text-align: center;\\n}\\n#ember-welcome-page-id-selector .postscript code {\\n  color: rgb(244, 246, 248);\\n  border-radius: 3px;\\n  background-color: rgb(28, 30, 36);\\n  display: inline-block;\\n  font-family: Menlo, Courier, monospace;\\n  font-size: 0.9em;\\n  margin: 0 0.1em;\\n  padding: 0 0.5em;\\n}\\n@media (max-width: 700px) {\\n  #ember-welcome-page-id-selector {\\n    padding: 1em;\\n  }\\n  #ember-welcome-page-id-selector .columns {\\n    flex-direction: column;\\n  }\\n  #ember-welcome-page-id-selector .tomster img {\\n    display: block;\\n    margin: auto;\\n    width: 50%;\\n  }\\n  #ember-welcome-page-id-selector h2 {\\n    text-align: center;\\n  }\\n}\\n@media (max-width: 400px) {\\n  #ember-welcome-page-id-selector .tomster img {\\n    width: 60%;\\n  }\\n  #ember-welcome-page-id-selector .welcome,\\n  #ember-welcome-page-id-selector .tomster {\\n    float: none;\\n    margin: auto;\\n    width: 100%;\\n  }\\n}\\n\", \"\"]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/ember-welcome-page/dist/components/welcome-page.css?./node_modules/css-loader/dist/cjs.js");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports=function(cssWithMappingToString){var list=[];// return the list of modules as css string\nlist.toString=function toString(){return this.map(function(item){var content=cssWithMappingToString(item);if(item[2]){return\"@media \".concat(item[2],\" {\").concat(content,\"}\");}return content;}).join(\"\");};// import a list of modules into the list\n// eslint-disable-next-line func-names\nlist.i=function(modules,mediaQuery,dedupe){if(typeof modules===\"string\"){// eslint-disable-next-line no-param-reassign\nmodules=[[null,modules,\"\"]];}var alreadyImportedModules={};if(dedupe){for(var i=0;i<this.length;i++){// eslint-disable-next-line prefer-destructuring\nvar id=this[i][0];if(id!=null){alreadyImportedModules[id]=true;}}}for(var _i=0;_i<modules.length;_i++){var item=[].concat(modules[_i]);if(dedupe&&alreadyImportedModules[item[0]]){// eslint-disable-next-line no-continue\ncontinue;}if(mediaQuery){if(!item[2]){item[2]=mediaQuery;}else{item[2]=\"\".concat(mediaQuery,\" and \").concat(item[2]);}}list.push(item);}};return list;};\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/css-loader/dist/runtime/api.js?");

/***/ }),

/***/ "./node_modules/ember-data/dist/store.js":
/*!***********************************************!*\
  !*** ./node_modules/ember-data/dist/store.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Store)\n/* harmony export */ });\n/* harmony import */ var _ember_data_json_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember-data/json-api */ \"./node_modules/@ember-data/json-api/dist/index.js\");\n/* harmony import */ var _ember_data_legacy_compat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/legacy-compat */ \"./node_modules/@ember-data/legacy-compat/dist/index.js\");\n/* harmony import */ var _ember_data_model_hooks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember-data/model/hooks */ \"./node_modules/@ember-data/model/dist/hooks.js\");\n/* harmony import */ var _ember_data_request__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ember-data/request */ \"./node_modules/@ember-data/request/dist/index.js\");\n/* harmony import */ var _ember_data_request_fetch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ember-data/request/fetch */ \"./node_modules/@ember-data/request/dist/fetch.js\");\n/* harmony import */ var _ember_data_store__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ember-data/store */ \"./node_modules/@ember-data/store/dist/index.js\");\nfunction _defineProperty(e,r,t){return(r=_toPropertyKey(r))in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e;}function _toPropertyKey(t){var i=_toPrimitive(t,\"string\");return\"symbol\"==typeof i?i:i+\"\";}function _toPrimitive(t,r){if(\"object\"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||\"default\");if(\"object\"!=typeof i)return i;throw new TypeError(\"@@toPrimitive must return a primitive value.\");}return(\"string\"===r?String:Number)(t);}function hasRequestManager(store){return'requestManager'in store;}class Store extends _ember_data_store__WEBPACK_IMPORTED_MODULE_5__[\"default\"]{constructor(args){super(args);_defineProperty(this,\"adapterFor\",_ember_data_legacy_compat__WEBPACK_IMPORTED_MODULE_1__.adapterFor);_defineProperty(this,\"serializerFor\",_ember_data_legacy_compat__WEBPACK_IMPORTED_MODULE_1__.serializerFor);_defineProperty(this,\"pushPayload\",_ember_data_legacy_compat__WEBPACK_IMPORTED_MODULE_1__.pushPayload);_defineProperty(this,\"normalize\",_ember_data_legacy_compat__WEBPACK_IMPORTED_MODULE_1__.normalize);_defineProperty(this,\"serializeRecord\",_ember_data_legacy_compat__WEBPACK_IMPORTED_MODULE_1__.serializeRecord);if(!hasRequestManager(this)){this.requestManager=new _ember_data_request__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();this.requestManager.use([_ember_data_legacy_compat__WEBPACK_IMPORTED_MODULE_1__.LegacyNetworkHandler,_ember_data_request_fetch__WEBPACK_IMPORTED_MODULE_4__[\"default\"]]);}this.requestManager.useCache(_ember_data_store__WEBPACK_IMPORTED_MODULE_5__.CacheHandler);}createSchemaService(){return (0,_ember_data_model_hooks__WEBPACK_IMPORTED_MODULE_2__.buildSchema)(this);}createCache(storeWrapper){return new _ember_data_json_api__WEBPACK_IMPORTED_MODULE_0__[\"default\"](storeWrapper);}instantiateRecord(identifier,createRecordArgs){return _ember_data_model_hooks__WEBPACK_IMPORTED_MODULE_2__.instantiateRecord.call(this,identifier,createRecordArgs);}teardownRecord(record){_ember_data_model_hooks__WEBPACK_IMPORTED_MODULE_2__.teardownRecord.call(this,record);}modelFor(type){return _ember_data_model_hooks__WEBPACK_IMPORTED_MODULE_2__.modelFor.call(this,type)||super.modelFor(type);}destroy(){_ember_data_legacy_compat__WEBPACK_IMPORTED_MODULE_1__.cleanup.call(this);super.destroy();}}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/ember-data/dist/store.js?");

/***/ }),

/***/ "./node_modules/ember-load-initializers/dist/index.js":
/*!************************************************************!*\
  !*** ./node_modules/ember-load-initializers/dist/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ loadInitializers)\n/* harmony export */ });\nfunction resolveInitializer(modules,moduleName){let module=modules.load(moduleName);if(!module){throw new Error(moduleName+' must export an initializer.');}let initializer=module.default;if(!initializer){throw new Error(moduleName+' must have a default export');}if(!initializer.name){initializer.name=moduleName.slice(moduleName.lastIndexOf('/')+1);}return initializer;}function registerInitializers(app,modules,moduleNames){for(let moduleName of moduleNames){app.initializer(resolveInitializer(modules,moduleName));}}function registerInstanceInitializers(app,modules,moduleNames){for(let moduleName of moduleNames){app.instanceInitializer(resolveInitializer(modules,moduleName));}}/**\n * Configure your application as it boots\n */function loadInitializers(app,prefix,explicitModules){var initializerPrefix=prefix+'/initializers/';var instanceInitializerPrefix=prefix+'/instance-initializers/';var initializers=[];var instanceInitializers=[];let modules;if(explicitModules){modules={names(){return Object.keys(explicitModules);},load(name){return explicitModules[name];}};}else{modules={names(){let requirejs=globalThis.requirejs;if(!requirejs||!requirejs._eak_seen){throw new Error(\"No global AMD loader found. To use loadInitializers without a global AMD loader you must provide explicit modules\");}return Object.keys(requirejs._eak_seen);},load(name){return globalThis.require(name,null,null,true);}};}for(let moduleName of modules.names()){if(moduleName.startsWith(initializerPrefix)&&!moduleName.endsWith('-test')){initializers.push(moduleName);}else if(moduleName.startsWith(instanceInitializerPrefix)&&!moduleName.endsWith('-test')){instanceInitializers.push(moduleName);}}registerInitializers(app,modules,initializers);registerInstanceInitializers(app,modules,instanceInitializers);}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/ember-load-initializers/dist/index.js?");

/***/ }),

/***/ "./node_modules/ember-page-title/dist/_rollupPluginBabelHelpers-9wjJaosZ.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/ember-page-title/dist/_rollupPluginBabelHelpers-9wjJaosZ.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: () => (/* binding */ _applyDecoratedDescriptor),\n/* harmony export */   a: () => (/* binding */ _initializerDefineProperty),\n/* harmony export */   b: () => (/* binding */ _defineProperty)\n/* harmony export */ });\nfunction _toPrimitive(t,r){if(\"object\"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||\"default\");if(\"object\"!=typeof i)return i;throw new TypeError(\"@@toPrimitive must return a primitive value.\");}return(\"string\"===r?String:Number)(t);}function _toPropertyKey(t){var i=_toPrimitive(t,\"string\");return\"symbol\"==typeof i?i:String(i);}function _defineProperty(obj,key,value){key=_toPropertyKey(key);if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _initializerDefineProperty(target,property,descriptor,context){if(!descriptor)return;Object.defineProperty(target,property,{enumerable:descriptor.enumerable,configurable:descriptor.configurable,writable:descriptor.writable,value:descriptor.initializer?descriptor.initializer.call(context):void 0});}function _applyDecoratedDescriptor(target,property,decorators,descriptor,context){var desc={};Object.keys(descriptor).forEach(function(key){desc[key]=descriptor[key];});desc.enumerable=!!desc.enumerable;desc.configurable=!!desc.configurable;if('value'in desc||desc.initializer){desc.writable=true;}desc=decorators.slice().reverse().reduce(function(desc,decorator){return decorator(target,property,desc)||desc;},desc);if(context&&desc.initializer!==void 0){desc.value=desc.initializer?desc.initializer.call(context):void 0;desc.initializer=undefined;}if(desc.initializer===void 0){Object.defineProperty(target,property,desc);desc=null;}return desc;}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/ember-page-title/dist/_rollupPluginBabelHelpers-9wjJaosZ.js?");

/***/ }),

/***/ "./node_modules/ember-page-title/dist/helpers/page-title.js":
/*!******************************************************************!*\
  !*** ./node_modules/ember-page-title/dist/helpers/page-title.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PageTitle)\n/* harmony export */ });\n/* harmony import */ var _rollupPluginBabelHelpers_9wjJaosZ_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_rollupPluginBabelHelpers-9wjJaosZ.js */ \"./node_modules/ember-page-title/dist/_rollupPluginBabelHelpers-9wjJaosZ.js\");\n/* harmony import */ var _ember_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/service */ \"@ember/service\");\n/* harmony import */ var _ember_service__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_service__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ember_component_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember/component/helper */ \"@ember/component/helper\");\n/* harmony import */ var _ember_component_helper__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ember_component_helper__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _ember_object_internals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ember/object/internals */ \"@ember/object/internals\");\n/* harmony import */ var _ember_object_internals__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_ember_object_internals__WEBPACK_IMPORTED_MODULE_3__);\nvar _dec,_class,_descriptor;/**\n * `{{pageTitle}}` helper used to set the title of the current route context.\n *\n * ```gjs\n * import { pageTitle } from 'ember-page-title';\n *\n * <template>\n *   {{pageTitle \"the text to set the tab's title to\"}}\n *   {{pageTitle \\@model.post.title}}\n * </template>\n * ```\n */let PageTitle=(_dec=(0,_ember_service__WEBPACK_IMPORTED_MODULE_1__.service)('page-title'),_class=class PageTitle extends (_ember_component_helper__WEBPACK_IMPORTED_MODULE_2___default()){constructor(owner){super(owner);(0,_rollupPluginBabelHelpers_9wjJaosZ_js__WEBPACK_IMPORTED_MODULE_0__.a)(this,\"tokens\",_descriptor,this);(0,_rollupPluginBabelHelpers_9wjJaosZ_js__WEBPACK_IMPORTED_MODULE_0__.b)(this,\"tokenId\",(0,_ember_object_internals__WEBPACK_IMPORTED_MODULE_3__.guidFor)(this));this.tokens.push({id:this.tokenId});}compute(params,userOptions){const options={...userOptions,id:this.tokenId,title:params.join('')};this.tokens.push(options);this.tokens.scheduleTitleUpdate();// We must return an empty value here because otherwise\n// invoking the pageTitle helper will render something\n// in the component it's used in, and we don't want that.\n//\n// pageTitle is a side-effecting helper.\n// We *synchronize* the document.title with our internal state.\nreturn'';}willDestroy(){super.willDestroy();this.tokens.remove(this.tokenId);this.tokens.scheduleTitleUpdate();}},_descriptor=(0,_rollupPluginBabelHelpers_9wjJaosZ_js__WEBPACK_IMPORTED_MODULE_0__._)(_class.prototype,\"tokens\",[_dec],{configurable:true,enumerable:true,writable:true,initializer:null}),_class);\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/ember-page-title/dist/helpers/page-title.js?");

/***/ }),

/***/ "./node_modules/ember-page-title/dist/services/page-title.js":
/*!*******************************************************************!*\
  !*** ./node_modules/ember-page-title/dist/services/page-title.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PageTitleService)\n/* harmony export */ });\n/* harmony import */ var _rollupPluginBabelHelpers_9wjJaosZ_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_rollupPluginBabelHelpers-9wjJaosZ.js */ \"./node_modules/ember-page-title/dist/_rollupPluginBabelHelpers-9wjJaosZ.js\");\n/* harmony import */ var _ember_runloop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/runloop */ \"@ember/runloop\");\n/* harmony import */ var _ember_runloop__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_runloop__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ember_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember/service */ \"@ember/service\");\n/* harmony import */ var _ember_service__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ember_service__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _ember_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ember/utils */ \"@ember/utils\");\n/* harmony import */ var _ember_utils__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_ember_utils__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ember/debug */ \"@ember/debug\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_4__);\nvar _dec,_dec2,_class,_descriptor,_descriptor2;const isFastBoot=typeof FastBoot!=='undefined';const RouterEvent={ROUTE_DID_CHANGE:'routeDidChange'};function hasResolveRegistration(owner){return`resolveRegistration`in owner;}function hasPageTitleConfig(fromEnv){if(typeof fromEnv!=='object')return false;if(fromEnv===null)return false;// all properties on the pageTitle config are optional,\n// so we can't check for more\nreturn'pageTitle'in fromEnv;}const configKeys=['separator','prepend','replace'];/**\n  @class page-title\n  @extends Ember.Service\n */let PageTitleService=(_dec=(0,_ember_service__WEBPACK_IMPORTED_MODULE_2__.service)('router'),_dec2=(0,_ember_service__WEBPACK_IMPORTED_MODULE_2__.service)('-document'),_class=class PageTitleService extends (_ember_service__WEBPACK_IMPORTED_MODULE_2___default()){constructor(owner){super(owner);(0,_rollupPluginBabelHelpers_9wjJaosZ_js__WEBPACK_IMPORTED_MODULE_0__.a)(this,\"router\",_descriptor,this);// in fastboot context \"document\" is instance of\n// ember-fastboot/simple-dom document\n(0,_rollupPluginBabelHelpers_9wjJaosZ_js__WEBPACK_IMPORTED_MODULE_0__.a)(this,\"document\",_descriptor2,this);(0,_rollupPluginBabelHelpers_9wjJaosZ_js__WEBPACK_IMPORTED_MODULE_0__.b)(this,\"tokens\",[]);(0,_rollupPluginBabelHelpers_9wjJaosZ_js__WEBPACK_IMPORTED_MODULE_0__.b)(this,\"_defaultConfig\",{// The default separator to use between tokens.\nseparator:' | ',// The default prepend value to use.\nprepend:true,// The default replace value to use.\nreplace:null});(0,_rollupPluginBabelHelpers_9wjJaosZ_js__WEBPACK_IMPORTED_MODULE_0__.b)(this,\"scheduleTitleUpdate\",()=>{// eslint-disable-next-line ember/no-runloop\n(0,_ember_runloop__WEBPACK_IMPORTED_MODULE_1__.scheduleOnce)('afterRender',this,this._updateTitle);});this._validateExistingTitleElement();if(hasResolveRegistration(owner)){const config=owner.resolveRegistration('config:environment');if(hasPageTitleConfig(config)){configKeys.forEach(key=>{if(!(0,_ember_utils__WEBPACK_IMPORTED_MODULE_3__.isEmpty)(config.pageTitle[key])){const configValue=config.pageTitle[key];// SAFETY: how is one supposed to iterate over keys for an object and have it\n//         known to the compiler that both objects, having the same shape,\n//         will have the same type per-value?\n//         as-is, the `configValue` is a union of all value-types from the object.\nthis._defaultConfig[key]=configValue;}});}}this.router.on(RouterEvent.ROUTE_DID_CHANGE,this.scheduleTitleUpdate);}applyTokenDefaults(token){const defaultSeparator=this._defaultConfig.separator;const defaultPrepend=this._defaultConfig.prepend;const defaultReplace=this._defaultConfig.replace;token.previous??=null;token.next??=null;if(token.separator==null){token.separator=defaultSeparator;}if(token.prepend==null&&defaultPrepend!=null){token.prepend=defaultPrepend;}if(token.replace==null&&defaultReplace!=null){token.replace=defaultReplace;}}inheritFromPrevious(token){const previous=token.previous;if(previous){if(token.separator==null){token.separator=previous.separator;}if(token.prepend==null){token.prepend=previous.prepend;}}}push(token){const tokenForId=this._findTokenById(token.id);if(tokenForId){const index=this.tokens.indexOf(tokenForId);const tokens=[...this.tokens];const previous=tokenForId.previous;token.previous=previous;token.next=tokenForId.next;this.inheritFromPrevious(token);this.applyTokenDefaults(token);tokens.splice(index,1,token);this.tokens=tokens;return;}const previous=this.tokens.slice(-1)[0];if(previous){token.previous=previous??null;previous.next=token;this.inheritFromPrevious(token);}this.applyTokenDefaults(token);this.tokens=[...this.tokens,token];}remove(id){const token=this._findTokenById(id);if(!token)return;const{next,previous}=token;if(next){next.previous=previous;}if(previous){previous.next=next;}token.previous=token.next=null;const tokens=[...this.tokens];tokens.splice(tokens.indexOf(token),1);this.tokens=tokens;}get visibleTokens(){const tokens=this.tokens;let i=tokens?tokens.length:0;const visible=[];while(i--){const token=tokens[i];if(!token)continue;if(token.replace){visible.unshift(token);break;}else{visible.unshift(token);}}return visible;}get sortedTokens(){const visible=this.visibleTokens;if(!visible)return[];let appending=true;let group=[];const groups=[group];const frontGroups=[];visible.forEach(token=>{if(token.front){frontGroups.unshift(token);}else if(token.prepend){if(appending){appending=false;group=[];groups.push(group);}const lastToken=group[0];if(lastToken){token={...token};token.separator=lastToken.separator;}group.unshift(token);}else{if(!appending){appending=true;group=[];groups.push(group);}group.push(token);}});return frontGroups.concat(groups.reduce((E,group)=>E.concat(group),[]));}toString(){const tokens=this.sortedTokens;const title=[];for(let i=0,len=tokens.length;i<len;i++){const token=tokens[i];if(!token)continue;if(token.title){title.push(token.title);if(i+1<len){title.push(token.separator);}}}return title.join('');}willDestroy(){super.willDestroy();this.router.off(RouterEvent.ROUTE_DID_CHANGE,this.scheduleTitleUpdate);}_updateTitle(){const toBeTitle=this.toString();if(isFastBoot){this.updateFastbootTitle(toBeTitle);}else{/**\n       * When rendering app with \"?fastboot=false\" (http://ember-fastboot.com/docs/user-guide#disabling-fastboot)\n       * We will not have <title> element present in DOM.\n       *\n       * But this is fine as by HTML spec,\n       * one is created upon assigning \"document.title\" value;\n       *\n       * https://html.spec.whatwg.org/multipage/dom.html#dom-tree-accessors\n       */this.document.title=toBeTitle;}this.titleDidUpdate(toBeTitle);}/**\n   * Validate if there's more than one title element present.\n   *\n   * Example: ember-cli-head can cause conflicting updates.\n   * @private\n   */_validateExistingTitleElement(){if(isFastBoot){return;}(0,_ember_debug__WEBPACK_IMPORTED_MODULE_4__.assert)('[ember-page-title]: Multiple title elements found. Check for other addons like ember-cli-head updating <title> as well.',document.head.querySelectorAll('title').length<=1);}/**\n   * Find token by id\n   *\n   * @param {String} id\n   * @private\n   */_findTokenById(id){return this.tokens.find(token=>token.id===id);}updateFastbootTitle(toBeTitle){if(!isFastBoot){return;}const headElement=this.document.head;const headChildNodes=headElement.childNodes;// Remove existing title elements from previous render cycle\nfor(let i=0;i<headChildNodes.length;i++){const node=headChildNodes[i];if(!node)continue;if(node.nodeName.toLowerCase()==='title'){headElement.removeChild(node);}}// Add title element with latest value\nconst titleEl=this.document.createElement('title');const titleContents=this.document.createTextNode(toBeTitle);titleEl.appendChild(titleContents);headElement.appendChild(titleEl);}// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntitleDidUpdate(_title){// default is empty, meant to be overriden by user if desired\n}},_descriptor=(0,_rollupPluginBabelHelpers_9wjJaosZ_js__WEBPACK_IMPORTED_MODULE_0__._)(_class.prototype,\"router\",[_dec],{configurable:true,enumerable:true,writable:true,initializer:null}),_descriptor2=(0,_rollupPluginBabelHelpers_9wjJaosZ_js__WEBPACK_IMPORTED_MODULE_0__._)(_class.prototype,\"document\",[_dec2],{configurable:true,enumerable:true,writable:true,initializer:null}),_class);\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/ember-page-title/dist/services/page-title.js?");

/***/ }),

/***/ "./node_modules/ember-resolver/addon/index.js":
/*!****************************************************!*\
  !*** ./node_modules/ember-resolver/addon/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ModuleRegistry: () => (/* binding */ ModuleRegistry),\n/* harmony export */   \"default\": () => (/* binding */ Resolver)\n/* harmony export */ });\n/* harmony import */ var _string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./string */ \"./node_modules/ember-resolver/addon/string/index.js\");\n/* harmony import */ var _utils_class_factory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/class-factory */ \"./node_modules/ember-resolver/addon/utils/class-factory.js\");\nfunction _defineProperty(e,r,t){return(r=_toPropertyKey(r))in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e;}function _toPropertyKey(t){var i=_toPrimitive(t,\"string\");return\"symbol\"==typeof i?i:i+\"\";}function _toPrimitive(t,r){if(\"object\"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||\"default\");if(\"object\"!=typeof i)return i;throw new TypeError(\"@@toPrimitive must return a primitive value.\");}return(\"string\"===r?String:Number)(t);}class ModuleRegistry{constructor(entries){this._entries=entries||globalThis.requirejs.entries;}moduleNames(){return Object.keys(this._entries);}has(moduleName){return moduleName in this._entries;}get(...args){return globalThis.require(...args);}}/**\n * This module defines a subclass of Ember.DefaultResolver that adds two\n * important features:\n *\n *  1) The resolver makes the container aware of es6 modules via the AMD\n *     output. The loader's _moduleEntries is consulted so that classes can be\n *     resolved directly via the module loader, without needing a manual\n *     `import`.\n *  2) is able to provide injections to classes that implement `extend`\n *     (as is typical with Ember).\n */class Resolver{static create(props){return new this(props);}/**\n   A listing of functions to test for moduleName's based on the provided\n   `parsedName`. This allows easy customization of additional module based\n   lookup patterns.\n\n   @property moduleNameLookupPatterns\n   @returns {Ember.Array}\n   */static withModules(explicitModules){var _Class;return _Class=class extends this{},_defineProperty(_Class,\"explicitModules\",explicitModules),_Class;}constructor(props){_defineProperty(this,\"moduleBasedResolver\",true);_defineProperty(this,\"_deprecatedPodModulePrefix\",false);_defineProperty(this,\"_normalizeCache\",Object.create(null));_defineProperty(this,\"moduleNameLookupPatterns\",[this.podBasedModuleName,this.podBasedComponentsInSubdir,this.mainModuleName,this.defaultModuleName,this.nestedColocationComponentModuleName]);Object.assign(this,props);if(!this._moduleRegistry){let explicitModules=this.constructor.explicitModules;if(explicitModules){this._moduleRegistry={moduleNames(){return Object.keys(explicitModules);},has(name){return Boolean(explicitModules[name]);},get(name){return explicitModules[name];},addModules(modules){explicitModules=Object.assign({},explicitModules,modules);}};}else{if(typeof globalThis.requirejs.entries==='undefined'){globalThis.requirejs.entries=globalThis.requirejs._eak_seen;}this._moduleRegistry=new ModuleRegistry();}}this.pluralizedTypes=this.pluralizedTypes||Object.create(null);if(!this.pluralizedTypes.config){this.pluralizedTypes.config='config';}}makeToString(factory,fullName){return''+this.namespace.modulePrefix+'@'+fullName+':';}shouldWrapInClassFactory(/* module, parsedName */){return false;}parseName(fullName){if(fullName.parsedName===true){return fullName;}let prefix,type,name;let fullNameParts=fullName.split('@');if(fullNameParts.length===3){if(fullNameParts[0].length===0){// leading scoped namespace: `@scope/pkg@type:name`\nprefix=`@${fullNameParts[1]}`;let prefixParts=fullNameParts[2].split(':');type=prefixParts[0];name=prefixParts[1];}else{// interweaved scoped namespace: `type:@scope/pkg@name`\nprefix=`@${fullNameParts[1]}`;type=fullNameParts[0].slice(0,-1);name=fullNameParts[2];}if(type==='template:components'){name=`components/${name}`;type='template';}}else if(fullNameParts.length===2){let prefixParts=fullNameParts[0].split(':');if(prefixParts.length===2){if(prefixParts[1].length===0){type=prefixParts[0];name=`@${fullNameParts[1]}`;}else{prefix=prefixParts[1];type=prefixParts[0];name=fullNameParts[1];}}else{let nameParts=fullNameParts[1].split(':');prefix=fullNameParts[0];type=nameParts[0];name=nameParts[1];}if(type==='template'&&prefix.lastIndexOf('components/',0)===0){name=`components/${name}`;prefix=prefix.slice(11);}}else{fullNameParts=fullName.split(':');type=fullNameParts[0];name=fullNameParts[1];}let fullNameWithoutType=name;let namespace=this.namespace;let root=namespace;return{parsedName:true,fullName:fullName,prefix:prefix||this.prefix({type:type}),type:type,fullNameWithoutType:fullNameWithoutType,name:name,root:root,resolveMethodName:'resolve'+(0,_string__WEBPACK_IMPORTED_MODULE_0__.classify)(type)};}resolveOther(parsedName){assert('`modulePrefix` must be defined',this.namespace.modulePrefix);let normalizedModuleName=this.findModuleName(parsedName);if(normalizedModuleName){let defaultExport=this._extractDefaultExport(normalizedModuleName,parsedName);if(defaultExport===undefined){throw new Error(` Expected to find: '${parsedName.fullName}' within '${normalizedModuleName}' but got 'undefined'. Did you forget to 'export default' within '${normalizedModuleName}'?`);}if(this.shouldWrapInClassFactory(defaultExport,parsedName)){defaultExport=(0,_utils_class_factory__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(defaultExport);}return defaultExport;}}normalize(fullName){return this._normalizeCache[fullName]||(this._normalizeCache[fullName]=this._normalize(fullName));}resolve(fullName){if(fullName==='resolver:current'){return{create:()=>this};}let parsedName=this.parseName(fullName);let resolveMethodName=parsedName.resolveMethodName;let resolved;if(typeof this[resolveMethodName]==='function'){resolved=this[resolveMethodName](parsedName);}if(resolved==null){resolved=this.resolveOther(parsedName);}return resolved;}addModules(modules){if(!this._moduleRegistry.addModules){throw new Error(`addModules is only supported when your Resolver has been configured to use static modules via Resolver.withModules()`);}this._moduleRegistry.addModules(modules);}_normalize(fullName){// A) Convert underscores to dashes\n// B) Convert camelCase to dash-case, except for components (their\n//    templates) and helpers where we want to avoid shadowing camelCase\n//    expressions\n// C) replace `.` with `/` in order to make nested controllers work in the following cases\n//      1. `needs: ['posts/post']`\n//      2. `{{render \"posts/post\"}}`\n//      3. `this.render('posts/post')` from Route\nlet split=fullName.split(':');if(split.length>1){let type=split[0];if(type==='component'||type==='helper'||type==='modifier'||type==='template'&&split[1].indexOf('components/')===0){return type+':'+split[1].replace(/_/g,'-');}else{return type+':'+(0,_string__WEBPACK_IMPORTED_MODULE_0__.dasherize)(split[1].replace(/\\./g,'/'));}}else{return fullName;}}pluralize(type){return this.pluralizedTypes[type]||(this.pluralizedTypes[type]=type+'s');}podBasedLookupWithPrefix(podPrefix,parsedName){let fullNameWithoutType=parsedName.fullNameWithoutType;if(parsedName.type==='template'){fullNameWithoutType=fullNameWithoutType.replace(/^components\\//,'');}return podPrefix+'/'+fullNameWithoutType+'/'+parsedName.type;}podBasedModuleName(parsedName){let podPrefix=this.namespace.podModulePrefix||this.namespace.modulePrefix;return this.podBasedLookupWithPrefix(podPrefix,parsedName);}podBasedComponentsInSubdir(parsedName){let podPrefix=this.namespace.podModulePrefix||this.namespace.modulePrefix;podPrefix=podPrefix+'/components';if(parsedName.type==='component'||/^components/.test(parsedName.fullNameWithoutType)){return this.podBasedLookupWithPrefix(podPrefix,parsedName);}}resolveEngine(parsedName){let engineName=parsedName.fullNameWithoutType;let engineModule=engineName+'/engine';if(this._moduleRegistry.has(engineModule)){return this._extractDefaultExport(engineModule);}}resolveRouteMap(parsedName){let engineName=parsedName.fullNameWithoutType;let engineRoutesModule=engineName+'/routes';if(this._moduleRegistry.has(engineRoutesModule)){let routeMap=this._extractDefaultExport(engineRoutesModule);assert(`The route map for ${engineName} should be wrapped by 'buildRoutes' before exporting.`,routeMap.isRouteMap);return routeMap;}}resolveTemplate(parsedName){return this.resolveOther(parsedName);}mainModuleName(parsedName){if(parsedName.fullNameWithoutType==='main'){// if router:main or adapter:main look for a module with just the type first\nreturn parsedName.prefix+'/'+parsedName.type;}}defaultModuleName(parsedName){return parsedName.prefix+'/'+this.pluralize(parsedName.type)+'/'+parsedName.fullNameWithoutType;}nestedColocationComponentModuleName(parsedName){if(parsedName.type==='component'){return parsedName.prefix+'/'+this.pluralize(parsedName.type)+'/'+parsedName.fullNameWithoutType+'/index';}}prefix(parsedName){let tmpPrefix=this.namespace.modulePrefix;if(this.namespace[parsedName.type+'Prefix']){tmpPrefix=this.namespace[parsedName.type+'Prefix'];}return tmpPrefix;}findModuleName(parsedName){let moduleNameLookupPatterns=this.moduleNameLookupPatterns;let moduleName;for(let index=0,length=moduleNameLookupPatterns.length;index<length;index++){let item=moduleNameLookupPatterns[index];let tmpModuleName=item.call(this,parsedName);// allow treat all dashed and all underscored as the same thing\n// supports components with dashes and other stuff with underscores.\nif(tmpModuleName){tmpModuleName=this.chooseModuleName(tmpModuleName);}if(tmpModuleName&&this._moduleRegistry.has(tmpModuleName)){moduleName=tmpModuleName;}if(moduleName){return moduleName;}}}chooseModuleName(moduleName){let underscoredModuleName=(0,_string__WEBPACK_IMPORTED_MODULE_0__.underscore)(moduleName);if(moduleName!==underscoredModuleName&&this._moduleRegistry.has(moduleName)&&this._moduleRegistry.has(underscoredModuleName)){throw new TypeError(`Ambiguous module names: '${moduleName}' and '${underscoredModuleName}'`);}if(this._moduleRegistry.has(moduleName)){return moduleName;}else if(this._moduleRegistry.has(underscoredModuleName)){return underscoredModuleName;}}knownForType(type){let moduleKeys=this._moduleRegistry.moduleNames();let items=Object.create(null);for(let index=0,length=moduleKeys.length;index<length;index++){let moduleName=moduleKeys[index];let fullname=this.translateToContainerFullname(type,moduleName);if(fullname){items[fullname]=true;}}return items;}translateToContainerFullname(type,moduleName){let prefix=this.prefix({type});// Note: using string manipulation here rather than regexes for better performance.\n// pod modules\n// '^' + prefix + '/(.+)/' + type + '$'\nlet podPrefix=prefix+'/';let podSuffix='/'+type;let start=moduleName.indexOf(podPrefix);let end=moduleName.indexOf(podSuffix);if(start===0&&end===moduleName.length-podSuffix.length&&moduleName.length>podPrefix.length+podSuffix.length){return type+':'+moduleName.slice(start+podPrefix.length,end);}// non-pod modules\n// '^' + prefix + '/' + pluralizedType + '/(.+)$'\nlet pluralizedType=this.pluralize(type);let nonPodPrefix=prefix+'/'+pluralizedType+'/';if(moduleName.indexOf(nonPodPrefix)===0&&moduleName.length>nonPodPrefix.length){return type+':'+moduleName.slice(nonPodPrefix.length);}}_extractDefaultExport(normalizedModuleName){let module=this._moduleRegistry.get(normalizedModuleName,null,null,true/* force sync */);if(module&&module['default']){module=module['default'];}return module;}}_defineProperty(Resolver,\"moduleBasedResolver\",true);function assert(message,check){if(!check){throw new Error(message);}}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/ember-resolver/addon/index.js?");

/***/ }),

/***/ "./node_modules/ember-resolver/addon/string/cache.js":
/*!***********************************************************!*\
  !*** ./node_modules/ember-resolver/addon/string/cache.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Cache)\n/* harmony export */ });\nclass Cache{constructor(limit,func,store){this.limit=limit;this.func=func;this.store=store;this.size=0;this.misses=0;this.hits=0;this.store=store||new Map();}get(key){let value=this.store.get(key);if(this.store.has(key)){this.hits++;return this.store.get(key);}else{this.misses++;value=this.set(key,this.func(key));}return value;}set(key,value){if(this.limit>this.size){this.size++;this.store.set(key,value);}return value;}purge(){this.store.clear();this.size=0;this.hits=0;this.misses=0;}}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/ember-resolver/addon/string/cache.js?");

/***/ }),

/***/ "./node_modules/ember-resolver/addon/string/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/ember-resolver/addon/string/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   classify: () => (/* binding */ classify),\n/* harmony export */   dasherize: () => (/* binding */ dasherize),\n/* harmony export */   decamelize: () => (/* binding */ decamelize),\n/* harmony export */   getString: () => (/* binding */ getString),\n/* harmony export */   getStrings: () => (/* binding */ getStrings),\n/* harmony export */   setStrings: () => (/* binding */ setStrings),\n/* harmony export */   underscore: () => (/* binding */ underscore)\n/* harmony export */ });\n/* harmony import */ var _cache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cache */ \"./node_modules/ember-resolver/addon/string/cache.js\");\n/* eslint-disable no-useless-escape */let STRINGS={};function setStrings(strings){STRINGS=strings;}function getStrings(){return STRINGS;}function getString(name){return STRINGS[name];}const STRING_DASHERIZE_REGEXP=/[ _]/g;const STRING_DASHERIZE_CACHE=new _cache__WEBPACK_IMPORTED_MODULE_0__[\"default\"](1000,key=>decamelize(key).replace(STRING_DASHERIZE_REGEXP,'-'));const STRING_CLASSIFY_REGEXP_1=/^(\\-|_)+(.)?/;const STRING_CLASSIFY_REGEXP_2=/(.)(\\-|\\_|\\.|\\s)+(.)?/g;const STRING_CLASSIFY_REGEXP_3=/(^|\\/|\\.)([a-z])/g;const CLASSIFY_CACHE=new _cache__WEBPACK_IMPORTED_MODULE_0__[\"default\"](1000,str=>{const replace1=(_match,_separator,chr)=>chr?`_${chr.toUpperCase()}`:'';const replace2=(_match,initialChar,_separator,chr)=>initialChar+(chr?chr.toUpperCase():'');const parts=str.split('/');for(let i=0;i<parts.length;i++){parts[i]=parts[i].replace(STRING_CLASSIFY_REGEXP_1,replace1).replace(STRING_CLASSIFY_REGEXP_2,replace2);}return parts.join('/').replace(STRING_CLASSIFY_REGEXP_3,(match/*, separator, chr */)=>match.toUpperCase());});const STRING_UNDERSCORE_REGEXP_1=/([a-z\\d])([A-Z]+)/g;const STRING_UNDERSCORE_REGEXP_2=/\\-|\\s+/g;const UNDERSCORE_CACHE=new _cache__WEBPACK_IMPORTED_MODULE_0__[\"default\"](1000,str=>str.replace(STRING_UNDERSCORE_REGEXP_1,'$1_$2').replace(STRING_UNDERSCORE_REGEXP_2,'_').toLowerCase());const STRING_DECAMELIZE_REGEXP=/([a-z\\d])([A-Z])/g;const DECAMELIZE_CACHE=new _cache__WEBPACK_IMPORTED_MODULE_0__[\"default\"](1000,str=>str.replace(STRING_DECAMELIZE_REGEXP,'$1_$2').toLowerCase());/**\n  Converts a camelized string into all lower case separated by underscores.\n\n  ```javascript\n  import { decamelize } from '@ember/string';\n\n  decamelize('innerHTML');          // 'inner_html'\n  decamelize('action_name');        // 'action_name'\n  decamelize('css-class-name');     // 'css-class-name'\n  decamelize('my favorite items');  // 'my favorite items'\n  ```\n\n  @method decamelize\n  @param {String} str The string to decamelize.\n  @return {String} the decamelized string.\n  @public\n*/function decamelize(str){return DECAMELIZE_CACHE.get(str);}/**\n  Replaces underscores, spaces, or camelCase with dashes.\n\n  ```javascript\n  import { dasherize } from '@ember/string';\n\n  dasherize('innerHTML');                // 'inner-html'\n  dasherize('action_name');              // 'action-name'\n  dasherize('css-class-name');           // 'css-class-name'\n  dasherize('my favorite items');        // 'my-favorite-items'\n  dasherize('privateDocs/ownerInvoice';  // 'private-docs/owner-invoice'\n  ```\n\n  @method dasherize\n  @param {String} str The string to dasherize.\n  @return {String} the dasherized string.\n  @public\n*/function dasherize(str){return STRING_DASHERIZE_CACHE.get(str);}/**\n  Returns the UpperCamelCase form of a string.\n\n  ```javascript\n  import { classify } from '@ember/string';\n\n  classify('innerHTML');                   // 'InnerHTML'\n  classify('action_name');                 // 'ActionName'\n  classify('css-class-name');              // 'CssClassName'\n  classify('my favorite items');           // 'MyFavoriteItems'\n  classify('private-docs/owner-invoice');  // 'PrivateDocs/OwnerInvoice'\n  ```\n\n  @method classify\n  @param {String} str the string to classify\n  @return {String} the classified string\n  @public\n*/function classify(str){return CLASSIFY_CACHE.get(str);}/**\n  More general than decamelize. Returns the lower\\_case\\_and\\_underscored\n  form of a string.\n\n  ```javascript\n  import { underscore } from '@ember/string';\n\n  underscore('innerHTML');                 // 'inner_html'\n  underscore('action_name');               // 'action_name'\n  underscore('css-class-name');            // 'css_class_name'\n  underscore('my favorite items');         // 'my_favorite_items'\n  underscore('privateDocs/ownerInvoice');  // 'private_docs/owner_invoice'\n  ```\n\n  @method underscore\n  @param {String} str The string to underscore.\n  @return {String} the underscored string.\n  @public\n*/function underscore(str){return UNDERSCORE_CACHE.get(str);}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/ember-resolver/addon/string/index.js?");

/***/ }),

/***/ "./node_modules/ember-resolver/addon/utils/class-factory.js":
/*!******************************************************************!*\
  !*** ./node_modules/ember-resolver/addon/utils/class-factory.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ classFactory)\n/* harmony export */ });\nfunction classFactory(klass){return{create(injections){if(typeof klass.extend==='function'){return klass.extend(injections);}else{return klass;}}};}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/ember-resolver/addon/utils/class-factory.js?");

/***/ }),

/***/ "./node_modules/ember-welcome-page/dist/components/welcome-page.css":
/*!**************************************************************************!*\
  !*** ./node_modules/ember-welcome-page/dist/components/welcome-page.css ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_cjs_js_welcome_page_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./welcome-page.css */ \"./node_modules/css-loader/dist/cjs.js!./node_modules/ember-welcome-page/dist/components/welcome-page.css\");\n\n            \n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_welcome_page_css__WEBPACK_IMPORTED_MODULE_1__[\"default\"], options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_welcome_page_css__WEBPACK_IMPORTED_MODULE_1__[\"default\"].locals || {});\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/ember-welcome-page/dist/components/welcome-page.css?");

/***/ }),

/***/ "./node_modules/ember-welcome-page/dist/components/welcome-page.js":
/*!*************************************************************************!*\
  !*** ./node_modules/ember-welcome-page/dist/components/welcome-page.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ WelcomePageComponent)\n/* harmony export */ });\n/* harmony import */ var _ember_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/component */ \"@ember/component\");\n/* harmony import */ var _ember_component__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_component__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_application__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/application */ \"@ember/application\");\n/* harmony import */ var _ember_application__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_application__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ember_version__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember/version */ \"@ember/version\");\n/* harmony import */ var _ember_version__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ember_version__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _glimmer_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @glimmer/component */ \"./node_modules/@glimmer/component/dist/index.js\");\n/* harmony import */ var _welcome_page_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./welcome-page.css */ \"./node_modules/ember-welcome-page/dist/components/welcome-page.css\");\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ember/template-factory */ \"@ember/template-factory\");\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_ember_template_factory__WEBPACK_IMPORTED_MODULE_5__);\nvar TEMPLATE=(0,_ember_template_factory__WEBPACK_IMPORTED_MODULE_5__.createTemplateFactory)(/*\n  <main id=\"ember-welcome-page-id-selector\">\n  <div class=\"columns\">\n    <div class=\"tomster\">\n      <img src=\"{{this.rootURL}}ember-welcome-page/images/construction.png\" alt=\"Under construction\">\n    </div>\n    <div class=\"welcome\">\n      <h1 id=\"title\">Congratulations, you made it!</h1>\n\n      <p>You&rsquo;ve officially spun up your Ember app. You&rsquo;ve got one more decision to make: what do you want to do next? We&rsquo;d suggest one of the following to help you get going:</p>\n      <ul>\n        <li><a href=\"{{this.urlForEmberGuides}}/getting-started/quick-start/\">Quick Start</a> - a quick introduction to how Ember works. Learn about defining your first route, writing a UI component and deploying your application.</li>\n        <li><a href=\"{{this.urlForEmberGuides}}/tutorial/\">Tutorial</a> - this is our more thorough, hands-on intro to Ember. Your crash course in Ember philosophy, background and some in-depth discussion of how things work (and why they work the way they do).</li>\n      </ul>\n      <p>If you run into problems, please join <a href=\"https://discord.gg/emberjs\">our community's Discord server</a> or visit <a href=\"http://discuss.emberjs.com/\">our forums</a> for ideas and answers— our community is filled with friendly folks who are willing to help! We enjoy helping new Ember developers get started, and our <a href=\"https://emberjs.com/community/\">Ember Community</a> is incredibly supportive.</p>\n    </div>\n  </div>\n  <p class=\"postscript\">To remove this welcome message, remove the\n    <code>\n      &lt;WelcomePage /&gt;\n    </code>\n    component from your\n    <code>\n      app/templates/application.hbs\n    </code>\n    file and save it...you'll see this page update soon after!\n  </p>\n</main>\n\n\n*/{\"id\":\"wJzzMeEK\",\"block\":\"[[[10,\\\"main\\\"],[14,1,\\\"ember-welcome-page-id-selector\\\"],[12],[1,\\\"\\\\n  \\\"],[10,0],[14,0,\\\"columns\\\"],[12],[1,\\\"\\\\n    \\\"],[10,0],[14,0,\\\"tomster\\\"],[12],[1,\\\"\\\\n      \\\"],[10,\\\"img\\\"],[15,\\\"src\\\",[29,[[30,0,[\\\"rootURL\\\"]],\\\"ember-welcome-page/images/construction.png\\\"]]],[14,\\\"alt\\\",\\\"Under construction\\\"],[12],[13],[1,\\\"\\\\n    \\\"],[13],[1,\\\"\\\\n    \\\"],[10,0],[14,0,\\\"welcome\\\"],[12],[1,\\\"\\\\n      \\\"],[10,\\\"h1\\\"],[14,1,\\\"title\\\"],[12],[1,\\\"Congratulations, you made it!\\\"],[13],[1,\\\"\\\\n\\\\n      \\\"],[10,2],[12],[1,\\\"You’ve officially spun up your Ember app. You’ve got one more decision to make: what do you want to do next? We’d suggest one of the following to help you get going:\\\"],[13],[1,\\\"\\\\n      \\\"],[10,\\\"ul\\\"],[12],[1,\\\"\\\\n        \\\"],[10,\\\"li\\\"],[12],[10,3],[15,6,[29,[[30,0,[\\\"urlForEmberGuides\\\"]],\\\"/getting-started/quick-start/\\\"]]],[12],[1,\\\"Quick Start\\\"],[13],[1,\\\" - a quick introduction to how Ember works. Learn about defining your first route, writing a UI component and deploying your application.\\\"],[13],[1,\\\"\\\\n        \\\"],[10,\\\"li\\\"],[12],[10,3],[15,6,[29,[[30,0,[\\\"urlForEmberGuides\\\"]],\\\"/tutorial/\\\"]]],[12],[1,\\\"Tutorial\\\"],[13],[1,\\\" - this is our more thorough, hands-on intro to Ember. Your crash course in Ember philosophy, background and some in-depth discussion of how things work (and why they work the way they do).\\\"],[13],[1,\\\"\\\\n      \\\"],[13],[1,\\\"\\\\n      \\\"],[10,2],[12],[1,\\\"If you run into problems, please join \\\"],[10,3],[14,6,\\\"https://discord.gg/emberjs\\\"],[12],[1,\\\"our community's Discord server\\\"],[13],[1,\\\" or visit \\\"],[10,3],[14,6,\\\"http://discuss.emberjs.com/\\\"],[12],[1,\\\"our forums\\\"],[13],[1,\\\" for ideas and answers— our community is filled with friendly folks who are willing to help! We enjoy helping new Ember developers get started, and our \\\"],[10,3],[14,6,\\\"https://emberjs.com/community/\\\"],[12],[1,\\\"Ember Community\\\"],[13],[1,\\\" is incredibly supportive.\\\"],[13],[1,\\\"\\\\n    \\\"],[13],[1,\\\"\\\\n  \\\"],[13],[1,\\\"\\\\n  \\\"],[10,2],[14,0,\\\"postscript\\\"],[12],[1,\\\"To remove this welcome message, remove the\\\\n    \\\"],[10,\\\"code\\\"],[12],[1,\\\"\\\\n      <WelcomePage />\\\\n    \\\"],[13],[1,\\\"\\\\n    component from your\\\\n    \\\"],[10,\\\"code\\\"],[12],[1,\\\"\\\\n      app/templates/application.hbs\\\\n    \\\"],[13],[1,\\\"\\\\n    file and save it...you'll see this page update soon after!\\\\n  \\\"],[13],[1,\\\"\\\\n\\\"],[13],[1,\\\"\\\\n\\\\n\\\"]],[],[\\\"main\\\",\\\"div\\\",\\\"img\\\",\\\"h1\\\",\\\"p\\\",\\\"ul\\\",\\\"li\\\",\\\"a\\\",\\\"code\\\"]]\",\"moduleName\":\"C:\\\\Users\\\\shobi\\\\OneDrive\\\\Desktop\\\\janasakthi\\\\ember-app\\\\node_modules\\\\ember-welcome-page\\\\dist\\\\components\\\\welcome-page.js\",\"isStrictMode\":false});function isLatestVersion(){const stableRegex=/^\\d+\\.\\d+\\.\\d+$/;return!stableRegex.test(_ember_version__WEBPACK_IMPORTED_MODULE_2__.VERSION);}/* eslint-disable-next-line @typescript-eslint/no-empty-interface */class WelcomePageComponent extends _glimmer_component__WEBPACK_IMPORTED_MODULE_3__[\"default\"]{get rootURL(){const config=(0,_ember_application__WEBPACK_IMPORTED_MODULE_1__.getOwner)(this).factoryFor('config:environment');if(config){return config.class.rootURL;}return'/';}get urlForEmberGuides(){if(isLatestVersion()){return`https://guides.emberjs.com/release`;}const[majorVersion,minorVersion]=_ember_version__WEBPACK_IMPORTED_MODULE_2__.VERSION.split('.');const emberVersion=`${majorVersion}.${minorVersion}.0`;return`https://guides.emberjs.com/v${emberVersion}`;}}(0,_ember_component__WEBPACK_IMPORTED_MODULE_0__.setComponentTemplate)(TEMPLATE,WelcomePageComponent);\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/ember-welcome-page/dist/components/welcome-page.js?");

/***/ }),

/***/ "./node_modules/fuse.js/dist/fuse.mjs":
/*!********************************************!*\
  !*** ./node_modules/fuse.js/dist/fuse.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Fuse)\n/* harmony export */ });\n/**\n * Fuse.js v7.1.0 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2025 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */function isArray(value){return!Array.isArray?getTag(value)==='[object Array]':Array.isArray(value);}// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\nconst INFINITY=1/0;function baseToString(value){// Exit early for strings to avoid a performance hit in some environments.\nif(typeof value=='string'){return value;}let result=value+'';return result=='0'&&1/value==-INFINITY?'-0':result;}function toString(value){return value==null?'':baseToString(value);}function isString(value){return typeof value==='string';}function isNumber(value){return typeof value==='number';}// Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\nfunction isBoolean(value){return value===true||value===false||isObjectLike(value)&&getTag(value)=='[object Boolean]';}function isObject(value){return typeof value==='object';}// Checks if `value` is object-like.\nfunction isObjectLike(value){return isObject(value)&&value!==null;}function isDefined(value){return value!==undefined&&value!==null;}function isBlank(value){return!value.trim().length;}// Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\nfunction getTag(value){return value==null?value===undefined?'[object Undefined]':'[object Null]':Object.prototype.toString.call(value);}const EXTENDED_SEARCH_UNAVAILABLE='Extended search is not available';const INCORRECT_INDEX_TYPE=\"Incorrect 'index' type\";const LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY=key=>`Invalid value for key ${key}`;const PATTERN_LENGTH_TOO_LARGE=max=>`Pattern length exceeds max of ${max}.`;const MISSING_KEY_PROPERTY=name=>`Missing ${name} property in key`;const INVALID_KEY_WEIGHT_VALUE=key=>`Property 'weight' in key '${key}' must be a positive integer`;const hasOwn=Object.prototype.hasOwnProperty;class KeyStore{constructor(keys){this._keys=[];this._keyMap={};let totalWeight=0;keys.forEach(key=>{let obj=createKey(key);this._keys.push(obj);this._keyMap[obj.id]=obj;totalWeight+=obj.weight;});// Normalize weights so that their sum is equal to 1\nthis._keys.forEach(key=>{key.weight/=totalWeight;});}get(keyId){return this._keyMap[keyId];}keys(){return this._keys;}toJSON(){return JSON.stringify(this._keys);}}function createKey(key){let path=null;let id=null;let src=null;let weight=1;let getFn=null;if(isString(key)||isArray(key)){src=key;path=createKeyPath(key);id=createKeyId(key);}else{if(!hasOwn.call(key,'name')){throw new Error(MISSING_KEY_PROPERTY('name'));}const name=key.name;src=name;if(hasOwn.call(key,'weight')){weight=key.weight;if(weight<=0){throw new Error(INVALID_KEY_WEIGHT_VALUE(name));}}path=createKeyPath(name);id=createKeyId(name);getFn=key.getFn;}return{path,id,weight,src,getFn};}function createKeyPath(key){return isArray(key)?key:key.split('.');}function createKeyId(key){return isArray(key)?key.join('.'):key;}function get(obj,path){let list=[];let arr=false;const deepGet=(obj,path,index)=>{if(!isDefined(obj)){return;}if(!path[index]){// If there's no path left, we've arrived at the object we care about.\nlist.push(obj);}else{let key=path[index];const value=obj[key];if(!isDefined(value)){return;}// If we're at the last value in the path, and if it's a string/number/bool,\n// add it to the list\nif(index===path.length-1&&(isString(value)||isNumber(value)||isBoolean(value))){list.push(toString(value));}else if(isArray(value)){arr=true;// Search each item in the array.\nfor(let i=0,len=value.length;i<len;i+=1){deepGet(value[i],path,index+1);}}else if(path.length){// An object. Recurse further.\ndeepGet(value,path,index+1);}}};// Backwards compatibility (since path used to be a string)\ndeepGet(obj,isString(path)?path.split('.'):path,0);return arr?list:list[0];}const MatchOptions={// Whether the matches should be included in the result set. When `true`, each record in the result\n// set will include the indices of the matched characters.\n// These can consequently be used for highlighting purposes.\nincludeMatches:false,// When `true`, the matching function will continue to the end of a search pattern even if\n// a perfect match has already been located in the string.\nfindAllMatches:false,// Minimum number of characters that must be matched before a result is considered a match\nminMatchCharLength:1};const BasicOptions={// When `true`, the algorithm continues searching to the end of the input even if a perfect\n// match is found before the end of the same input.\nisCaseSensitive:false,// When `true`, the algorithm will ignore diacritics (accents) in comparisons\nignoreDiacritics:false,// When true, the matching function will continue to the end of a search pattern even if\nincludeScore:false,// List of properties that will be searched. This also supports nested properties.\nkeys:[],// Whether to sort the result list, by score\nshouldSort:true,// Default sort function: sort by ascending score, ascending index\nsortFn:(a,b)=>a.score===b.score?a.idx<b.idx?-1:1:a.score<b.score?-1:1};const FuzzyOptions={// Approximately where in the text is the pattern expected to be found?\nlocation:0,// At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n// (of both letters and location), a threshold of '1.0' would match anything.\nthreshold:0.6,// Determines how close the match must be to the fuzzy location (specified above).\n// An exact letter match which is 'distance' characters away from the fuzzy location\n// would score as a complete mismatch. A distance of '0' requires the match be at\n// the exact location specified, a threshold of '1000' would require a perfect match\n// to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\ndistance:100};const AdvancedOptions={// When `true`, it enables the use of unix-like search commands\nuseExtendedSearch:false,// The get function to use when fetching an object's properties.\n// The default will search nested paths *ie foo.bar.baz*\ngetFn:get,// When `true`, search will ignore `location` and `distance`, so it won't matter\n// where in the string the pattern appears.\n// More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\nignoreLocation:false,// When `true`, the calculation for the relevance score (used for sorting) will\n// ignore the field-length norm.\n// More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\nignoreFieldNorm:false,// The weight to determine how much field length norm effects scoring.\nfieldNormWeight:1};var Config={...BasicOptions,...MatchOptions,...FuzzyOptions,...AdvancedOptions};const SPACE=/[^ ]+/g;// Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\nfunction norm(weight=1,mantissa=3){const cache=new Map();const m=Math.pow(10,mantissa);return{get(value){const numTokens=value.match(SPACE).length;if(cache.has(numTokens)){return cache.get(numTokens);}// Default function is 1/sqrt(x), weight makes that variable\nconst norm=1/Math.pow(numTokens,0.5*weight);// In place of `toFixed(mantissa)`, for faster computation\nconst n=parseFloat(Math.round(norm*m)/m);cache.set(numTokens,n);return n;},clear(){cache.clear();}};}class FuseIndex{constructor({getFn=Config.getFn,fieldNormWeight=Config.fieldNormWeight}={}){this.norm=norm(fieldNormWeight,3);this.getFn=getFn;this.isCreated=false;this.setIndexRecords();}setSources(docs=[]){this.docs=docs;}setIndexRecords(records=[]){this.records=records;}setKeys(keys=[]){this.keys=keys;this._keysMap={};keys.forEach((key,idx)=>{this._keysMap[key.id]=idx;});}create(){if(this.isCreated||!this.docs.length){return;}this.isCreated=true;// List is Array<String>\nif(isString(this.docs[0])){this.docs.forEach((doc,docIndex)=>{this._addString(doc,docIndex);});}else{// List is Array<Object>\nthis.docs.forEach((doc,docIndex)=>{this._addObject(doc,docIndex);});}this.norm.clear();}// Adds a doc to the end of the index\nadd(doc){const idx=this.size();if(isString(doc)){this._addString(doc,idx);}else{this._addObject(doc,idx);}}// Removes the doc at the specified index of the index\nremoveAt(idx){this.records.splice(idx,1);// Change ref index of every subsquent doc\nfor(let i=idx,len=this.size();i<len;i+=1){this.records[i].i-=1;}}getValueForItemAtKeyId(item,keyId){return item[this._keysMap[keyId]];}size(){return this.records.length;}_addString(doc,docIndex){if(!isDefined(doc)||isBlank(doc)){return;}let record={v:doc,i:docIndex,n:this.norm.get(doc)};this.records.push(record);}_addObject(doc,docIndex){let record={i:docIndex,$:{}};// Iterate over every key (i.e, path), and fetch the value at that key\nthis.keys.forEach((key,keyIndex)=>{let value=key.getFn?key.getFn(doc):this.getFn(doc,key.path);if(!isDefined(value)){return;}if(isArray(value)){let subRecords=[];const stack=[{nestedArrIndex:-1,value}];while(stack.length){const{nestedArrIndex,value}=stack.pop();if(!isDefined(value)){continue;}if(isString(value)&&!isBlank(value)){let subRecord={v:value,i:nestedArrIndex,n:this.norm.get(value)};subRecords.push(subRecord);}else if(isArray(value)){value.forEach((item,k)=>{stack.push({nestedArrIndex:k,value:item});});}else;}record.$[keyIndex]=subRecords;}else if(isString(value)&&!isBlank(value)){let subRecord={v:value,n:this.norm.get(value)};record.$[keyIndex]=subRecord;}});this.records.push(record);}toJSON(){return{keys:this.keys,records:this.records};}}function createIndex(keys,docs,{getFn=Config.getFn,fieldNormWeight=Config.fieldNormWeight}={}){const myIndex=new FuseIndex({getFn,fieldNormWeight});myIndex.setKeys(keys.map(createKey));myIndex.setSources(docs);myIndex.create();return myIndex;}function parseIndex(data,{getFn=Config.getFn,fieldNormWeight=Config.fieldNormWeight}={}){const{keys,records}=data;const myIndex=new FuseIndex({getFn,fieldNormWeight});myIndex.setKeys(keys);myIndex.setIndexRecords(records);return myIndex;}function computeScore$1(pattern,{errors=0,currentLocation=0,expectedLocation=0,distance=Config.distance,ignoreLocation=Config.ignoreLocation}={}){const accuracy=errors/pattern.length;if(ignoreLocation){return accuracy;}const proximity=Math.abs(expectedLocation-currentLocation);if(!distance){// Dodge divide by zero error.\nreturn proximity?1.0:accuracy;}return accuracy+proximity/distance;}function convertMaskToIndices(matchmask=[],minMatchCharLength=Config.minMatchCharLength){let indices=[];let start=-1;let end=-1;let i=0;for(let len=matchmask.length;i<len;i+=1){let match=matchmask[i];if(match&&start===-1){start=i;}else if(!match&&start!==-1){end=i-1;if(end-start+1>=minMatchCharLength){indices.push([start,end]);}start=-1;}}// (i-1 - start) + 1 => i - start\nif(matchmask[i-1]&&i-start>=minMatchCharLength){indices.push([start,i-1]);}return indices;}// Machine word size\nconst MAX_BITS=32;function search(text,pattern,patternAlphabet,{location=Config.location,distance=Config.distance,threshold=Config.threshold,findAllMatches=Config.findAllMatches,minMatchCharLength=Config.minMatchCharLength,includeMatches=Config.includeMatches,ignoreLocation=Config.ignoreLocation}={}){if(pattern.length>MAX_BITS){throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS));}const patternLen=pattern.length;// Set starting location at beginning text and initialize the alphabet.\nconst textLen=text.length;// Handle the case when location > text.length\nconst expectedLocation=Math.max(0,Math.min(location,textLen));// Highest score beyond which we give up.\nlet currentThreshold=threshold;// Is there a nearby exact match? (speedup)\nlet bestLocation=expectedLocation;// Performance: only computer matches when the minMatchCharLength > 1\n// OR if `includeMatches` is true.\nconst computeMatches=minMatchCharLength>1||includeMatches;// A mask of the matches, used for building the indices\nconst matchMask=computeMatches?Array(textLen):[];let index;// Get all exact matches, here for speed up\nwhile((index=text.indexOf(pattern,bestLocation))>-1){let score=computeScore$1(pattern,{currentLocation:index,expectedLocation,distance,ignoreLocation});currentThreshold=Math.min(score,currentThreshold);bestLocation=index+patternLen;if(computeMatches){let i=0;while(i<patternLen){matchMask[index+i]=1;i+=1;}}}// Reset the best location\nbestLocation=-1;let lastBitArr=[];let finalScore=1;let binMax=patternLen+textLen;const mask=1<<patternLen-1;for(let i=0;i<patternLen;i+=1){// Scan for the best match; each iteration allows for one more error.\n// Run a binary search to determine how far from the match location we can stray\n// at this error level.\nlet binMin=0;let binMid=binMax;while(binMin<binMid){const score=computeScore$1(pattern,{errors:i,currentLocation:expectedLocation+binMid,expectedLocation,distance,ignoreLocation});if(score<=currentThreshold){binMin=binMid;}else{binMax=binMid;}binMid=Math.floor((binMax-binMin)/2+binMin);}// Use the result from this iteration as the maximum for the next.\nbinMax=binMid;let start=Math.max(1,expectedLocation-binMid+1);let finish=findAllMatches?textLen:Math.min(expectedLocation+binMid,textLen)+patternLen;// Initialize the bit array\nlet bitArr=Array(finish+2);bitArr[finish+1]=(1<<i)-1;for(let j=finish;j>=start;j-=1){let currentLocation=j-1;let charMatch=patternAlphabet[text.charAt(currentLocation)];if(computeMatches){// Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\nmatchMask[currentLocation]=+!!charMatch;}// First pass: exact match\nbitArr[j]=(bitArr[j+1]<<1|1)&charMatch;// Subsequent passes: fuzzy match\nif(i){bitArr[j]|=(lastBitArr[j+1]|lastBitArr[j])<<1|1|lastBitArr[j+1];}if(bitArr[j]&mask){finalScore=computeScore$1(pattern,{errors:i,currentLocation,expectedLocation,distance,ignoreLocation});// This match will almost certainly be better than any existing match.\n// But check anyway.\nif(finalScore<=currentThreshold){// Indeed it is\ncurrentThreshold=finalScore;bestLocation=currentLocation;// Already passed `loc`, downhill from here on in.\nif(bestLocation<=expectedLocation){break;}// When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\nstart=Math.max(1,2*expectedLocation-bestLocation);}}}// No hope for a (better) match at greater error levels.\nconst score=computeScore$1(pattern,{errors:i+1,currentLocation:expectedLocation,expectedLocation,distance,ignoreLocation});if(score>currentThreshold){break;}lastBitArr=bitArr;}const result={isMatch:bestLocation>=0,// Count exact matches (those with a score of 0) to be \"almost\" exact\nscore:Math.max(0.001,finalScore)};if(computeMatches){const indices=convertMaskToIndices(matchMask,minMatchCharLength);if(!indices.length){result.isMatch=false;}else if(includeMatches){result.indices=indices;}}return result;}function createPatternAlphabet(pattern){let mask={};for(let i=0,len=pattern.length;i<len;i+=1){const char=pattern.charAt(i);mask[char]=(mask[char]||0)|1<<len-i-1;}return mask;}const stripDiacritics=String.prototype.normalize?str=>str.normalize('NFD').replace(/[\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09FE\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AFA-\\u0AFF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0C00-\\u0C04\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D00-\\u0D03\\u0D3B\\u0D3C\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F\\u109A-\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u180B-\\u180D\\u1885\\u1886\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F\\u1AB0-\\u1ABE\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2-\\u1CF4\\u1CF7-\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9E5\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F]/g,''):str=>str;class BitapSearch{constructor(pattern,{location=Config.location,threshold=Config.threshold,distance=Config.distance,includeMatches=Config.includeMatches,findAllMatches=Config.findAllMatches,minMatchCharLength=Config.minMatchCharLength,isCaseSensitive=Config.isCaseSensitive,ignoreDiacritics=Config.ignoreDiacritics,ignoreLocation=Config.ignoreLocation}={}){this.options={location,threshold,distance,includeMatches,findAllMatches,minMatchCharLength,isCaseSensitive,ignoreDiacritics,ignoreLocation};pattern=isCaseSensitive?pattern:pattern.toLowerCase();pattern=ignoreDiacritics?stripDiacritics(pattern):pattern;this.pattern=pattern;this.chunks=[];if(!this.pattern.length){return;}const addChunk=(pattern,startIndex)=>{this.chunks.push({pattern,alphabet:createPatternAlphabet(pattern),startIndex});};const len=this.pattern.length;if(len>MAX_BITS){let i=0;const remainder=len%MAX_BITS;const end=len-remainder;while(i<end){addChunk(this.pattern.substr(i,MAX_BITS),i);i+=MAX_BITS;}if(remainder){const startIndex=len-MAX_BITS;addChunk(this.pattern.substr(startIndex),startIndex);}}else{addChunk(this.pattern,0);}}searchIn(text){const{isCaseSensitive,ignoreDiacritics,includeMatches}=this.options;text=isCaseSensitive?text:text.toLowerCase();text=ignoreDiacritics?stripDiacritics(text):text;// Exact match\nif(this.pattern===text){let result={isMatch:true,score:0};if(includeMatches){result.indices=[[0,text.length-1]];}return result;}// Otherwise, use Bitap algorithm\nconst{location,distance,threshold,findAllMatches,minMatchCharLength,ignoreLocation}=this.options;let allIndices=[];let totalScore=0;let hasMatches=false;this.chunks.forEach(({pattern,alphabet,startIndex})=>{const{isMatch,score,indices}=search(text,pattern,alphabet,{location:location+startIndex,distance,threshold,findAllMatches,minMatchCharLength,includeMatches,ignoreLocation});if(isMatch){hasMatches=true;}totalScore+=score;if(isMatch&&indices){allIndices=[...allIndices,...indices];}});let result={isMatch:hasMatches,score:hasMatches?totalScore/this.chunks.length:1};if(hasMatches&&includeMatches){result.indices=allIndices;}return result;}}class BaseMatch{constructor(pattern){this.pattern=pattern;}static isMultiMatch(pattern){return getMatch(pattern,this.multiRegex);}static isSingleMatch(pattern){return getMatch(pattern,this.singleRegex);}search(/*text*/){}}function getMatch(pattern,exp){const matches=pattern.match(exp);return matches?matches[1]:null;}// Token: 'file\nclass ExactMatch extends BaseMatch{constructor(pattern){super(pattern);}static get type(){return'exact';}static get multiRegex(){return /^=\"(.*)\"$/;}static get singleRegex(){return /^=(.*)$/;}search(text){const isMatch=text===this.pattern;return{isMatch,score:isMatch?0:1,indices:[0,this.pattern.length-1]};}}// Token: !fire\nclass InverseExactMatch extends BaseMatch{constructor(pattern){super(pattern);}static get type(){return'inverse-exact';}static get multiRegex(){return /^!\"(.*)\"$/;}static get singleRegex(){return /^!(.*)$/;}search(text){const index=text.indexOf(this.pattern);const isMatch=index===-1;return{isMatch,score:isMatch?0:1,indices:[0,text.length-1]};}}// Token: ^file\nclass PrefixExactMatch extends BaseMatch{constructor(pattern){super(pattern);}static get type(){return'prefix-exact';}static get multiRegex(){return /^\\^\"(.*)\"$/;}static get singleRegex(){return /^\\^(.*)$/;}search(text){const isMatch=text.startsWith(this.pattern);return{isMatch,score:isMatch?0:1,indices:[0,this.pattern.length-1]};}}// Token: !^fire\nclass InversePrefixExactMatch extends BaseMatch{constructor(pattern){super(pattern);}static get type(){return'inverse-prefix-exact';}static get multiRegex(){return /^!\\^\"(.*)\"$/;}static get singleRegex(){return /^!\\^(.*)$/;}search(text){const isMatch=!text.startsWith(this.pattern);return{isMatch,score:isMatch?0:1,indices:[0,text.length-1]};}}// Token: .file$\nclass SuffixExactMatch extends BaseMatch{constructor(pattern){super(pattern);}static get type(){return'suffix-exact';}static get multiRegex(){return /^\"(.*)\"\\$$/;}static get singleRegex(){return /^(.*)\\$$/;}search(text){const isMatch=text.endsWith(this.pattern);return{isMatch,score:isMatch?0:1,indices:[text.length-this.pattern.length,text.length-1]};}}// Token: !.file$\nclass InverseSuffixExactMatch extends BaseMatch{constructor(pattern){super(pattern);}static get type(){return'inverse-suffix-exact';}static get multiRegex(){return /^!\"(.*)\"\\$$/;}static get singleRegex(){return /^!(.*)\\$$/;}search(text){const isMatch=!text.endsWith(this.pattern);return{isMatch,score:isMatch?0:1,indices:[0,text.length-1]};}}class FuzzyMatch extends BaseMatch{constructor(pattern,{location=Config.location,threshold=Config.threshold,distance=Config.distance,includeMatches=Config.includeMatches,findAllMatches=Config.findAllMatches,minMatchCharLength=Config.minMatchCharLength,isCaseSensitive=Config.isCaseSensitive,ignoreDiacritics=Config.ignoreDiacritics,ignoreLocation=Config.ignoreLocation}={}){super(pattern);this._bitapSearch=new BitapSearch(pattern,{location,threshold,distance,includeMatches,findAllMatches,minMatchCharLength,isCaseSensitive,ignoreDiacritics,ignoreLocation});}static get type(){return'fuzzy';}static get multiRegex(){return /^\"(.*)\"$/;}static get singleRegex(){return /^(.*)$/;}search(text){return this._bitapSearch.searchIn(text);}}// Token: 'file\nclass IncludeMatch extends BaseMatch{constructor(pattern){super(pattern);}static get type(){return'include';}static get multiRegex(){return /^'\"(.*)\"$/;}static get singleRegex(){return /^'(.*)$/;}search(text){let location=0;let index;const indices=[];const patternLen=this.pattern.length;// Get all exact matches\nwhile((index=text.indexOf(this.pattern,location))>-1){location=index+patternLen;indices.push([index,location-1]);}const isMatch=!!indices.length;return{isMatch,score:isMatch?0:1,indices};}}// ❗Order is important. DO NOT CHANGE.\nconst searchers=[ExactMatch,IncludeMatch,PrefixExactMatch,InversePrefixExactMatch,InverseSuffixExactMatch,SuffixExactMatch,InverseExactMatch,FuzzyMatch];const searchersLen=searchers.length;// Regex to split by spaces, but keep anything in quotes together\nconst SPACE_RE=/ +(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;const OR_TOKEN='|';// Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\nfunction parseQuery(pattern,options={}){return pattern.split(OR_TOKEN).map(item=>{let query=item.trim().split(SPACE_RE).filter(item=>item&&!!item.trim());let results=[];for(let i=0,len=query.length;i<len;i+=1){const queryItem=query[i];// 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\nlet found=false;let idx=-1;while(!found&&++idx<searchersLen){const searcher=searchers[idx];let token=searcher.isMultiMatch(queryItem);if(token){results.push(new searcher(token,options));found=true;}}if(found){continue;}// 2. Handle single query matches (i.e, once that are *not* quoted)\nidx=-1;while(++idx<searchersLen){const searcher=searchers[idx];let token=searcher.isSingleMatch(queryItem);if(token){results.push(new searcher(token,options));break;}}}return results;});}// These extended matchers can return an array of matches, as opposed\n// to a singl match\nconst MultiMatchSet=new Set([FuzzyMatch.type,IncludeMatch.type]);/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */class ExtendedSearch{constructor(pattern,{isCaseSensitive=Config.isCaseSensitive,ignoreDiacritics=Config.ignoreDiacritics,includeMatches=Config.includeMatches,minMatchCharLength=Config.minMatchCharLength,ignoreLocation=Config.ignoreLocation,findAllMatches=Config.findAllMatches,location=Config.location,threshold=Config.threshold,distance=Config.distance}={}){this.query=null;this.options={isCaseSensitive,ignoreDiacritics,includeMatches,minMatchCharLength,findAllMatches,ignoreLocation,location,threshold,distance};pattern=isCaseSensitive?pattern:pattern.toLowerCase();pattern=ignoreDiacritics?stripDiacritics(pattern):pattern;this.pattern=pattern;this.query=parseQuery(this.pattern,this.options);}static condition(_,options){return options.useExtendedSearch;}searchIn(text){const query=this.query;if(!query){return{isMatch:false,score:1};}const{includeMatches,isCaseSensitive,ignoreDiacritics}=this.options;text=isCaseSensitive?text:text.toLowerCase();text=ignoreDiacritics?stripDiacritics(text):text;let numMatches=0;let allIndices=[];let totalScore=0;// ORs\nfor(let i=0,qLen=query.length;i<qLen;i+=1){const searchers=query[i];// Reset indices\nallIndices.length=0;numMatches=0;// ANDs\nfor(let j=0,pLen=searchers.length;j<pLen;j+=1){const searcher=searchers[j];const{isMatch,indices,score}=searcher.search(text);if(isMatch){numMatches+=1;totalScore+=score;if(includeMatches){const type=searcher.constructor.type;if(MultiMatchSet.has(type)){allIndices=[...allIndices,...indices];}else{allIndices.push(indices);}}}else{totalScore=0;numMatches=0;allIndices.length=0;break;}}// OR condition, so if TRUE, return\nif(numMatches){let result={isMatch:true,score:totalScore/numMatches};if(includeMatches){result.indices=allIndices;}return result;}}// Nothing was matched\nreturn{isMatch:false,score:1};}}const registeredSearchers=[];function register(...args){registeredSearchers.push(...args);}function createSearcher(pattern,options){for(let i=0,len=registeredSearchers.length;i<len;i+=1){let searcherClass=registeredSearchers[i];if(searcherClass.condition(pattern,options)){return new searcherClass(pattern,options);}}return new BitapSearch(pattern,options);}const LogicalOperator={AND:'$and',OR:'$or'};const KeyType={PATH:'$path',PATTERN:'$val'};const isExpression=query=>!!(query[LogicalOperator.AND]||query[LogicalOperator.OR]);const isPath=query=>!!query[KeyType.PATH];const isLeaf=query=>!isArray(query)&&isObject(query)&&!isExpression(query);const convertToExplicit=query=>({[LogicalOperator.AND]:Object.keys(query).map(key=>({[key]:query[key]}))});// When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\nfunction parse(query,options,{auto=true}={}){const next=query=>{let keys=Object.keys(query);const isQueryPath=isPath(query);if(!isQueryPath&&keys.length>1&&!isExpression(query)){return next(convertToExplicit(query));}if(isLeaf(query)){const key=isQueryPath?query[KeyType.PATH]:keys[0];const pattern=isQueryPath?query[KeyType.PATTERN]:query[key];if(!isString(pattern)){throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key));}const obj={keyId:createKeyId(key),pattern};if(auto){obj.searcher=createSearcher(pattern,options);}return obj;}let node={children:[],operator:keys[0]};keys.forEach(key=>{const value=query[key];if(isArray(value)){value.forEach(item=>{node.children.push(next(item));});}});return node;};if(!isExpression(query)){query=convertToExplicit(query);}return next(query);}// Practical scoring function\nfunction computeScore(results,{ignoreFieldNorm=Config.ignoreFieldNorm}){results.forEach(result=>{let totalScore=1;result.matches.forEach(({key,norm,score})=>{const weight=key?key.weight:null;totalScore*=Math.pow(score===0&&weight?Number.EPSILON:score,(weight||1)*(ignoreFieldNorm?1:norm));});result.score=totalScore;});}function transformMatches(result,data){const matches=result.matches;data.matches=[];if(!isDefined(matches)){return;}matches.forEach(match=>{if(!isDefined(match.indices)||!match.indices.length){return;}const{indices,value}=match;let obj={indices,value};if(match.key){obj.key=match.key.src;}if(match.idx>-1){obj.refIndex=match.idx;}data.matches.push(obj);});}function transformScore(result,data){data.score=result.score;}function format(results,docs,{includeMatches=Config.includeMatches,includeScore=Config.includeScore}={}){const transformers=[];if(includeMatches)transformers.push(transformMatches);if(includeScore)transformers.push(transformScore);return results.map(result=>{const{idx}=result;const data={item:docs[idx],refIndex:idx};if(transformers.length){transformers.forEach(transformer=>{transformer(result,data);});}return data;});}class Fuse{constructor(docs,options={},index){this.options={...Config,...options};if(this.options.useExtendedSearch&&!true)// removed by dead control flow\n{}this._keyStore=new KeyStore(this.options.keys);this.setCollection(docs,index);}setCollection(docs,index){this._docs=docs;if(index&&!(index instanceof FuseIndex)){throw new Error(INCORRECT_INDEX_TYPE);}this._myIndex=index||createIndex(this.options.keys,this._docs,{getFn:this.options.getFn,fieldNormWeight:this.options.fieldNormWeight});}add(doc){if(!isDefined(doc)){return;}this._docs.push(doc);this._myIndex.add(doc);}remove(predicate=(/* doc, idx */)=>false){const results=[];for(let i=0,len=this._docs.length;i<len;i+=1){const doc=this._docs[i];if(predicate(doc,i)){this.removeAt(i);i-=1;len-=1;results.push(doc);}}return results;}removeAt(idx){this._docs.splice(idx,1);this._myIndex.removeAt(idx);}getIndex(){return this._myIndex;}search(query,{limit=-1}={}){const{includeMatches,includeScore,shouldSort,sortFn,ignoreFieldNorm}=this.options;let results=isString(query)?isString(this._docs[0])?this._searchStringList(query):this._searchObjectList(query):this._searchLogical(query);computeScore(results,{ignoreFieldNorm});if(shouldSort){results.sort(sortFn);}if(isNumber(limit)&&limit>-1){results=results.slice(0,limit);}return format(results,this._docs,{includeMatches,includeScore});}_searchStringList(query){const searcher=createSearcher(query,this.options);const{records}=this._myIndex;const results=[];// Iterate over every string in the index\nrecords.forEach(({v:text,i:idx,n:norm})=>{if(!isDefined(text)){return;}const{isMatch,score,indices}=searcher.searchIn(text);if(isMatch){results.push({item:text,idx,matches:[{score,value:text,norm,indices}]});}});return results;}_searchLogical(query){const expression=parse(query,this.options);const evaluate=(node,item,idx)=>{if(!node.children){const{keyId,searcher}=node;const matches=this._findMatches({key:this._keyStore.get(keyId),value:this._myIndex.getValueForItemAtKeyId(item,keyId),searcher});if(matches&&matches.length){return[{idx,item,matches}];}return[];}const res=[];for(let i=0,len=node.children.length;i<len;i+=1){const child=node.children[i];const result=evaluate(child,item,idx);if(result.length){res.push(...result);}else if(node.operator===LogicalOperator.AND){return[];}}return res;};const records=this._myIndex.records;const resultMap={};const results=[];records.forEach(({$:item,i:idx})=>{if(isDefined(item)){let expResults=evaluate(expression,item,idx);if(expResults.length){// Dedupe when adding\nif(!resultMap[idx]){resultMap[idx]={idx,item,matches:[]};results.push(resultMap[idx]);}expResults.forEach(({matches})=>{resultMap[idx].matches.push(...matches);});}}});return results;}_searchObjectList(query){const searcher=createSearcher(query,this.options);const{keys,records}=this._myIndex;const results=[];// List is Array<Object>\nrecords.forEach(({$:item,i:idx})=>{if(!isDefined(item)){return;}let matches=[];// Iterate over every key (i.e, path), and fetch the value at that key\nkeys.forEach((key,keyIndex)=>{matches.push(...this._findMatches({key,value:item[keyIndex],searcher}));});if(matches.length){results.push({idx,item,matches});}});return results;}_findMatches({key,value,searcher}){if(!isDefined(value)){return[];}let matches=[];if(isArray(value)){value.forEach(({v:text,i:idx,n:norm})=>{if(!isDefined(text)){return;}const{isMatch,score,indices}=searcher.searchIn(text);if(isMatch){matches.push({score,key,value:text,idx,norm,indices});}});}else{const{v:text,n:norm}=value;const{isMatch,score,indices}=searcher.searchIn(text);if(isMatch){matches.push({score,key,value:text,norm,indices});}}return matches;}}Fuse.version='7.1.0';Fuse.createIndex=createIndex;Fuse.parseIndex=parseIndex;Fuse.config=Config;{Fuse.parseQuery=parse;}{register(ExtendedSearch);}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/fuse.js/dist/fuse.mjs?");

/***/ }),

/***/ "./node_modules/json-to-ast/build.js":
/*!*******************************************!*\
  !*** ./node_modules/json-to-ast/build.js ***!
  \*******************************************/
/***/ (function(module) {

eval("(function(global,factory){ true?module.exports=factory():0;})(this,function(){'use strict';var commonjsGlobal=typeof window!=='undefined'?window:typeof global!=='undefined'?global:typeof self!=='undefined'?self:{};function createCommonjsModule(fn,module){return module={exports:{}},fn(module,module.exports),module.exports;}var graphemeSplitter=createCommonjsModule(function(module){/*\r\n Breaks a Javascript string into individual user-perceived \"characters\" \r\n called extended grapheme clusters by implementing the Unicode UAX-29 standard, version 10.0.0\r\n \r\n Usage:\r\n var splitter = new GraphemeSplitter();\r\n //returns an array of strings, one string for each grapheme cluster\r\n var graphemes = splitter.splitGraphemes(string); \r\n \r\n */function GraphemeSplitter(){var CR=0,LF=1,Control=2,Extend=3,Regional_Indicator=4,SpacingMark=5,L=6,V=7,T=8,LV=9,LVT=10,Other=11,Prepend=12,E_Base=13,E_Modifier=14,ZWJ=15,Glue_After_Zwj=16,E_Base_GAZ=17;// BreakTypes\nvar NotBreak=0,BreakStart=1,Break=2,BreakLastRegional=3,BreakPenultimateRegional=4;function isSurrogate(str,pos){return 0xd800<=str.charCodeAt(pos)&&str.charCodeAt(pos)<=0xdbff&&0xdc00<=str.charCodeAt(pos+1)&&str.charCodeAt(pos+1)<=0xdfff;}// Private function, gets a Unicode code point from a JavaScript UTF-16 string\n// handling surrogate pairs appropriately\nfunction codePointAt(str,idx){if(idx===undefined){idx=0;}var code=str.charCodeAt(idx);// if a high surrogate\nif(0xD800<=code&&code<=0xDBFF&&idx<str.length-1){var hi=code;var low=str.charCodeAt(idx+1);if(0xDC00<=low&&low<=0xDFFF){return(hi-0xD800)*0x400+(low-0xDC00)+0x10000;}return hi;}// if a low surrogate\nif(0xDC00<=code&&code<=0xDFFF&&idx>=1){var hi=str.charCodeAt(idx-1);var low=code;if(0xD800<=hi&&hi<=0xDBFF){return(hi-0xD800)*0x400+(low-0xDC00)+0x10000;}return low;}//just return the char if an unmatched surrogate half or a \n//single-char codepoint\nreturn code;}// Private function, returns whether a break is allowed between the \n// two given grapheme breaking classes\nfunction shouldBreak(start,mid,end){var all=[start].concat(mid).concat([end]);var previous=all[all.length-2];var next=end;// Lookahead termintor for:\n// GB10. (E_Base | EBG) Extend* ?\tE_Modifier\nvar eModifierIndex=all.lastIndexOf(E_Modifier);if(eModifierIndex>1&&all.slice(1,eModifierIndex).every(function(c){return c==Extend;})&&[Extend,E_Base,E_Base_GAZ].indexOf(start)==-1){return Break;}// Lookahead termintor for:\n// GB12. ^ (RI RI)* RI\t?\tRI\n// GB13. [^RI] (RI RI)* RI\t?\tRI\nvar rIIndex=all.lastIndexOf(Regional_Indicator);if(rIIndex>0&&all.slice(1,rIIndex).every(function(c){return c==Regional_Indicator;})&&[Prepend,Regional_Indicator].indexOf(previous)==-1){if(all.filter(function(c){return c==Regional_Indicator;}).length%2==1){return BreakLastRegional;}else{return BreakPenultimateRegional;}}// GB3. CR X LF\nif(previous==CR&&next==LF){return NotBreak;}// GB4. (Control|CR|LF) ÷\nelse if(previous==Control||previous==CR||previous==LF){if(next==E_Modifier&&mid.every(function(c){return c==Extend;})){return Break;}else{return BreakStart;}}// GB5. ÷ (Control|CR|LF)\nelse if(next==Control||next==CR||next==LF){return BreakStart;}// GB6. L X (L|V|LV|LVT)\nelse if(previous==L&&(next==L||next==V||next==LV||next==LVT)){return NotBreak;}// GB7. (LV|V) X (V|T)\nelse if((previous==LV||previous==V)&&(next==V||next==T)){return NotBreak;}// GB8. (LVT|T) X (T)\nelse if((previous==LVT||previous==T)&&next==T){return NotBreak;}// GB9. X (Extend|ZWJ)\nelse if(next==Extend||next==ZWJ){return NotBreak;}// GB9a. X SpacingMark\nelse if(next==SpacingMark){return NotBreak;}// GB9b. Prepend X\nelse if(previous==Prepend){return NotBreak;}// GB10. (E_Base | EBG) Extend* ?\tE_Modifier\nvar previousNonExtendIndex=all.indexOf(Extend)!=-1?all.lastIndexOf(Extend)-1:all.length-2;if([E_Base,E_Base_GAZ].indexOf(all[previousNonExtendIndex])!=-1&&all.slice(previousNonExtendIndex+1,-1).every(function(c){return c==Extend;})&&next==E_Modifier){return NotBreak;}// GB11. ZWJ ? (Glue_After_Zwj | EBG)\nif(previous==ZWJ&&[Glue_After_Zwj,E_Base_GAZ].indexOf(next)!=-1){return NotBreak;}// GB12. ^ (RI RI)* RI ? RI\n// GB13. [^RI] (RI RI)* RI ? RI\nif(mid.indexOf(Regional_Indicator)!=-1){return Break;}if(previous==Regional_Indicator&&next==Regional_Indicator){return NotBreak;}// GB999. Any ? Any\nreturn BreakStart;}// Returns the next grapheme break in the string after the given index\nthis.nextBreak=function(string,index){if(index===undefined){index=0;}if(index<0){return 0;}if(index>=string.length-1){return string.length;}var prev=getGraphemeBreakProperty(codePointAt(string,index));var mid=[];for(var i=index+1;i<string.length;i++){// check for already processed low surrogates\nif(isSurrogate(string,i-1)){continue;}var next=getGraphemeBreakProperty(codePointAt(string,i));if(shouldBreak(prev,mid,next)){return i;}mid.push(next);}return string.length;};// Breaks the given string into an array of grapheme cluster strings\nthis.splitGraphemes=function(str){var res=[];var index=0;var brk;while((brk=this.nextBreak(str,index))<str.length){res.push(str.slice(index,brk));index=brk;}if(index<str.length){res.push(str.slice(index));}return res;};// Returns the iterator of grapheme clusters there are in the given string\nthis.iterateGraphemes=function(str){var index=0;var res={next:function(){var value;var brk;if((brk=this.nextBreak(str,index))<str.length){value=str.slice(index,brk);index=brk;return{value:value,done:false};}if(index<str.length){value=str.slice(index);index=str.length;return{value:value,done:false};}return{value:undefined,done:true};}.bind(this)};// ES2015 @@iterator method (iterable) for spread syntax and for...of statement\nif(typeof Symbol!=='undefined'&&Symbol.iterator){res[Symbol.iterator]=function(){return res;};}return res;};// Returns the number of grapheme clusters there are in the given string\nthis.countGraphemes=function(str){var count=0;var index=0;var brk;while((brk=this.nextBreak(str,index))<str.length){index=brk;count++;}if(index<str.length){count++;}return count;};//given a Unicode code point, determines this symbol's grapheme break property\nfunction getGraphemeBreakProperty(code){//grapheme break property for Unicode 10.0.0, \n//taken from http://www.unicode.org/Public/10.0.0/ucd/auxiliary/GraphemeBreakProperty.txt\n//and adapted to JavaScript rules\nif(0x0600<=code&&code<=0x0605||// Cf   [6] ARABIC NUMBER SIGN..ARABIC NUMBER MARK ABOVE\n0x06DD==code||// Cf       ARABIC END OF AYAH\n0x070F==code||// Cf       SYRIAC ABBREVIATION MARK\n0x08E2==code||// Cf       ARABIC DISPUTED END OF AYAH\n0x0D4E==code||// Lo       MALAYALAM LETTER DOT REPH\n0x110BD==code||// Cf       KAITHI NUMBER SIGN\n0x111C2<=code&&code<=0x111C3||// Lo   [2] SHARADA SIGN JIHVAMULIYA..SHARADA SIGN UPADHMANIYA\n0x11A3A==code||// Lo       ZANABAZAR SQUARE CLUSTER-INITIAL LETTER RA\n0x11A86<=code&&code<=0x11A89||// Lo   [4] SOYOMBO CLUSTER-INITIAL LETTER RA..SOYOMBO CLUSTER-INITIAL LETTER SA\n0x11D46==code// Lo       MASARAM GONDI REPHA\n){return Prepend;}if(0x000D==code// Cc       <control-000D>\n){return CR;}if(0x000A==code// Cc       <control-000A>\n){return LF;}if(0x0000<=code&&code<=0x0009||// Cc  [10] <control-0000>..<control-0009>\n0x000B<=code&&code<=0x000C||// Cc   [2] <control-000B>..<control-000C>\n0x000E<=code&&code<=0x001F||// Cc  [18] <control-000E>..<control-001F>\n0x007F<=code&&code<=0x009F||// Cc  [33] <control-007F>..<control-009F>\n0x00AD==code||// Cf       SOFT HYPHEN\n0x061C==code||// Cf       ARABIC LETTER MARK\n0x180E==code||// Cf       MONGOLIAN VOWEL SEPARATOR\n0x200B==code||// Cf       ZERO WIDTH SPACE\n0x200E<=code&&code<=0x200F||// Cf   [2] LEFT-TO-RIGHT MARK..RIGHT-TO-LEFT MARK\n0x2028==code||// Zl       LINE SEPARATOR\n0x2029==code||// Zp       PARAGRAPH SEPARATOR\n0x202A<=code&&code<=0x202E||// Cf   [5] LEFT-TO-RIGHT EMBEDDING..RIGHT-TO-LEFT OVERRIDE\n0x2060<=code&&code<=0x2064||// Cf   [5] WORD JOINER..INVISIBLE PLUS\n0x2065==code||// Cn       <reserved-2065>\n0x2066<=code&&code<=0x206F||// Cf  [10] LEFT-TO-RIGHT ISOLATE..NOMINAL DIGIT SHAPES\n0xD800<=code&&code<=0xDFFF||// Cs [2048] <surrogate-D800>..<surrogate-DFFF>\n0xFEFF==code||// Cf       ZERO WIDTH NO-BREAK SPACE\n0xFFF0<=code&&code<=0xFFF8||// Cn   [9] <reserved-FFF0>..<reserved-FFF8>\n0xFFF9<=code&&code<=0xFFFB||// Cf   [3] INTERLINEAR ANNOTATION ANCHOR..INTERLINEAR ANNOTATION TERMINATOR\n0x1BCA0<=code&&code<=0x1BCA3||// Cf   [4] SHORTHAND FORMAT LETTER OVERLAP..SHORTHAND FORMAT UP STEP\n0x1D173<=code&&code<=0x1D17A||// Cf   [8] MUSICAL SYMBOL BEGIN BEAM..MUSICAL SYMBOL END PHRASE\n0xE0000==code||// Cn       <reserved-E0000>\n0xE0001==code||// Cf       LANGUAGE TAG\n0xE0002<=code&&code<=0xE001F||// Cn  [30] <reserved-E0002>..<reserved-E001F>\n0xE0080<=code&&code<=0xE00FF||// Cn [128] <reserved-E0080>..<reserved-E00FF>\n0xE01F0<=code&&code<=0xE0FFF// Cn [3600] <reserved-E01F0>..<reserved-E0FFF>\n){return Control;}if(0x0300<=code&&code<=0x036F||// Mn [112] COMBINING GRAVE ACCENT..COMBINING LATIN SMALL LETTER X\n0x0483<=code&&code<=0x0487||// Mn   [5] COMBINING CYRILLIC TITLO..COMBINING CYRILLIC POKRYTIE\n0x0488<=code&&code<=0x0489||// Me   [2] COMBINING CYRILLIC HUNDRED THOUSANDS SIGN..COMBINING CYRILLIC MILLIONS SIGN\n0x0591<=code&&code<=0x05BD||// Mn  [45] HEBREW ACCENT ETNAHTA..HEBREW POINT METEG\n0x05BF==code||// Mn       HEBREW POINT RAFE\n0x05C1<=code&&code<=0x05C2||// Mn   [2] HEBREW POINT SHIN DOT..HEBREW POINT SIN DOT\n0x05C4<=code&&code<=0x05C5||// Mn   [2] HEBREW MARK UPPER DOT..HEBREW MARK LOWER DOT\n0x05C7==code||// Mn       HEBREW POINT QAMATS QATAN\n0x0610<=code&&code<=0x061A||// Mn  [11] ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM..ARABIC SMALL KASRA\n0x064B<=code&&code<=0x065F||// Mn  [21] ARABIC FATHATAN..ARABIC WAVY HAMZA BELOW\n0x0670==code||// Mn       ARABIC LETTER SUPERSCRIPT ALEF\n0x06D6<=code&&code<=0x06DC||// Mn   [7] ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA..ARABIC SMALL HIGH SEEN\n0x06DF<=code&&code<=0x06E4||// Mn   [6] ARABIC SMALL HIGH ROUNDED ZERO..ARABIC SMALL HIGH MADDA\n0x06E7<=code&&code<=0x06E8||// Mn   [2] ARABIC SMALL HIGH YEH..ARABIC SMALL HIGH NOON\n0x06EA<=code&&code<=0x06ED||// Mn   [4] ARABIC EMPTY CENTRE LOW STOP..ARABIC SMALL LOW MEEM\n0x0711==code||// Mn       SYRIAC LETTER SUPERSCRIPT ALAPH\n0x0730<=code&&code<=0x074A||// Mn  [27] SYRIAC PTHAHA ABOVE..SYRIAC BARREKH\n0x07A6<=code&&code<=0x07B0||// Mn  [11] THAANA ABAFILI..THAANA SUKUN\n0x07EB<=code&&code<=0x07F3||// Mn   [9] NKO COMBINING SHORT HIGH TONE..NKO COMBINING DOUBLE DOT ABOVE\n0x0816<=code&&code<=0x0819||// Mn   [4] SAMARITAN MARK IN..SAMARITAN MARK DAGESH\n0x081B<=code&&code<=0x0823||// Mn   [9] SAMARITAN MARK EPENTHETIC YUT..SAMARITAN VOWEL SIGN A\n0x0825<=code&&code<=0x0827||// Mn   [3] SAMARITAN VOWEL SIGN SHORT A..SAMARITAN VOWEL SIGN U\n0x0829<=code&&code<=0x082D||// Mn   [5] SAMARITAN VOWEL SIGN LONG I..SAMARITAN MARK NEQUDAA\n0x0859<=code&&code<=0x085B||// Mn   [3] MANDAIC AFFRICATION MARK..MANDAIC GEMINATION MARK\n0x08D4<=code&&code<=0x08E1||// Mn  [14] ARABIC SMALL HIGH WORD AR-RUB..ARABIC SMALL HIGH SIGN SAFHA\n0x08E3<=code&&code<=0x0902||// Mn  [32] ARABIC TURNED DAMMA BELOW..DEVANAGARI SIGN ANUSVARA\n0x093A==code||// Mn       DEVANAGARI VOWEL SIGN OE\n0x093C==code||// Mn       DEVANAGARI SIGN NUKTA\n0x0941<=code&&code<=0x0948||// Mn   [8] DEVANAGARI VOWEL SIGN U..DEVANAGARI VOWEL SIGN AI\n0x094D==code||// Mn       DEVANAGARI SIGN VIRAMA\n0x0951<=code&&code<=0x0957||// Mn   [7] DEVANAGARI STRESS SIGN UDATTA..DEVANAGARI VOWEL SIGN UUE\n0x0962<=code&&code<=0x0963||// Mn   [2] DEVANAGARI VOWEL SIGN VOCALIC L..DEVANAGARI VOWEL SIGN VOCALIC LL\n0x0981==code||// Mn       BENGALI SIGN CANDRABINDU\n0x09BC==code||// Mn       BENGALI SIGN NUKTA\n0x09BE==code||// Mc       BENGALI VOWEL SIGN AA\n0x09C1<=code&&code<=0x09C4||// Mn   [4] BENGALI VOWEL SIGN U..BENGALI VOWEL SIGN VOCALIC RR\n0x09CD==code||// Mn       BENGALI SIGN VIRAMA\n0x09D7==code||// Mc       BENGALI AU LENGTH MARK\n0x09E2<=code&&code<=0x09E3||// Mn   [2] BENGALI VOWEL SIGN VOCALIC L..BENGALI VOWEL SIGN VOCALIC LL\n0x0A01<=code&&code<=0x0A02||// Mn   [2] GURMUKHI SIGN ADAK BINDI..GURMUKHI SIGN BINDI\n0x0A3C==code||// Mn       GURMUKHI SIGN NUKTA\n0x0A41<=code&&code<=0x0A42||// Mn   [2] GURMUKHI VOWEL SIGN U..GURMUKHI VOWEL SIGN UU\n0x0A47<=code&&code<=0x0A48||// Mn   [2] GURMUKHI VOWEL SIGN EE..GURMUKHI VOWEL SIGN AI\n0x0A4B<=code&&code<=0x0A4D||// Mn   [3] GURMUKHI VOWEL SIGN OO..GURMUKHI SIGN VIRAMA\n0x0A51==code||// Mn       GURMUKHI SIGN UDAAT\n0x0A70<=code&&code<=0x0A71||// Mn   [2] GURMUKHI TIPPI..GURMUKHI ADDAK\n0x0A75==code||// Mn       GURMUKHI SIGN YAKASH\n0x0A81<=code&&code<=0x0A82||// Mn   [2] GUJARATI SIGN CANDRABINDU..GUJARATI SIGN ANUSVARA\n0x0ABC==code||// Mn       GUJARATI SIGN NUKTA\n0x0AC1<=code&&code<=0x0AC5||// Mn   [5] GUJARATI VOWEL SIGN U..GUJARATI VOWEL SIGN CANDRA E\n0x0AC7<=code&&code<=0x0AC8||// Mn   [2] GUJARATI VOWEL SIGN E..GUJARATI VOWEL SIGN AI\n0x0ACD==code||// Mn       GUJARATI SIGN VIRAMA\n0x0AE2<=code&&code<=0x0AE3||// Mn   [2] GUJARATI VOWEL SIGN VOCALIC L..GUJARATI VOWEL SIGN VOCALIC LL\n0x0AFA<=code&&code<=0x0AFF||// Mn   [6] GUJARATI SIGN SUKUN..GUJARATI SIGN TWO-CIRCLE NUKTA ABOVE\n0x0B01==code||// Mn       ORIYA SIGN CANDRABINDU\n0x0B3C==code||// Mn       ORIYA SIGN NUKTA\n0x0B3E==code||// Mc       ORIYA VOWEL SIGN AA\n0x0B3F==code||// Mn       ORIYA VOWEL SIGN I\n0x0B41<=code&&code<=0x0B44||// Mn   [4] ORIYA VOWEL SIGN U..ORIYA VOWEL SIGN VOCALIC RR\n0x0B4D==code||// Mn       ORIYA SIGN VIRAMA\n0x0B56==code||// Mn       ORIYA AI LENGTH MARK\n0x0B57==code||// Mc       ORIYA AU LENGTH MARK\n0x0B62<=code&&code<=0x0B63||// Mn   [2] ORIYA VOWEL SIGN VOCALIC L..ORIYA VOWEL SIGN VOCALIC LL\n0x0B82==code||// Mn       TAMIL SIGN ANUSVARA\n0x0BBE==code||// Mc       TAMIL VOWEL SIGN AA\n0x0BC0==code||// Mn       TAMIL VOWEL SIGN II\n0x0BCD==code||// Mn       TAMIL SIGN VIRAMA\n0x0BD7==code||// Mc       TAMIL AU LENGTH MARK\n0x0C00==code||// Mn       TELUGU SIGN COMBINING CANDRABINDU ABOVE\n0x0C3E<=code&&code<=0x0C40||// Mn   [3] TELUGU VOWEL SIGN AA..TELUGU VOWEL SIGN II\n0x0C46<=code&&code<=0x0C48||// Mn   [3] TELUGU VOWEL SIGN E..TELUGU VOWEL SIGN AI\n0x0C4A<=code&&code<=0x0C4D||// Mn   [4] TELUGU VOWEL SIGN O..TELUGU SIGN VIRAMA\n0x0C55<=code&&code<=0x0C56||// Mn   [2] TELUGU LENGTH MARK..TELUGU AI LENGTH MARK\n0x0C62<=code&&code<=0x0C63||// Mn   [2] TELUGU VOWEL SIGN VOCALIC L..TELUGU VOWEL SIGN VOCALIC LL\n0x0C81==code||// Mn       KANNADA SIGN CANDRABINDU\n0x0CBC==code||// Mn       KANNADA SIGN NUKTA\n0x0CBF==code||// Mn       KANNADA VOWEL SIGN I\n0x0CC2==code||// Mc       KANNADA VOWEL SIGN UU\n0x0CC6==code||// Mn       KANNADA VOWEL SIGN E\n0x0CCC<=code&&code<=0x0CCD||// Mn   [2] KANNADA VOWEL SIGN AU..KANNADA SIGN VIRAMA\n0x0CD5<=code&&code<=0x0CD6||// Mc   [2] KANNADA LENGTH MARK..KANNADA AI LENGTH MARK\n0x0CE2<=code&&code<=0x0CE3||// Mn   [2] KANNADA VOWEL SIGN VOCALIC L..KANNADA VOWEL SIGN VOCALIC LL\n0x0D00<=code&&code<=0x0D01||// Mn   [2] MALAYALAM SIGN COMBINING ANUSVARA ABOVE..MALAYALAM SIGN CANDRABINDU\n0x0D3B<=code&&code<=0x0D3C||// Mn   [2] MALAYALAM SIGN VERTICAL BAR VIRAMA..MALAYALAM SIGN CIRCULAR VIRAMA\n0x0D3E==code||// Mc       MALAYALAM VOWEL SIGN AA\n0x0D41<=code&&code<=0x0D44||// Mn   [4] MALAYALAM VOWEL SIGN U..MALAYALAM VOWEL SIGN VOCALIC RR\n0x0D4D==code||// Mn       MALAYALAM SIGN VIRAMA\n0x0D57==code||// Mc       MALAYALAM AU LENGTH MARK\n0x0D62<=code&&code<=0x0D63||// Mn   [2] MALAYALAM VOWEL SIGN VOCALIC L..MALAYALAM VOWEL SIGN VOCALIC LL\n0x0DCA==code||// Mn       SINHALA SIGN AL-LAKUNA\n0x0DCF==code||// Mc       SINHALA VOWEL SIGN AELA-PILLA\n0x0DD2<=code&&code<=0x0DD4||// Mn   [3] SINHALA VOWEL SIGN KETTI IS-PILLA..SINHALA VOWEL SIGN KETTI PAA-PILLA\n0x0DD6==code||// Mn       SINHALA VOWEL SIGN DIGA PAA-PILLA\n0x0DDF==code||// Mc       SINHALA VOWEL SIGN GAYANUKITTA\n0x0E31==code||// Mn       THAI CHARACTER MAI HAN-AKAT\n0x0E34<=code&&code<=0x0E3A||// Mn   [7] THAI CHARACTER SARA I..THAI CHARACTER PHINTHU\n0x0E47<=code&&code<=0x0E4E||// Mn   [8] THAI CHARACTER MAITAIKHU..THAI CHARACTER YAMAKKAN\n0x0EB1==code||// Mn       LAO VOWEL SIGN MAI KAN\n0x0EB4<=code&&code<=0x0EB9||// Mn   [6] LAO VOWEL SIGN I..LAO VOWEL SIGN UU\n0x0EBB<=code&&code<=0x0EBC||// Mn   [2] LAO VOWEL SIGN MAI KON..LAO SEMIVOWEL SIGN LO\n0x0EC8<=code&&code<=0x0ECD||// Mn   [6] LAO TONE MAI EK..LAO NIGGAHITA\n0x0F18<=code&&code<=0x0F19||// Mn   [2] TIBETAN ASTROLOGICAL SIGN -KHYUD PA..TIBETAN ASTROLOGICAL SIGN SDONG TSHUGS\n0x0F35==code||// Mn       TIBETAN MARK NGAS BZUNG NYI ZLA\n0x0F37==code||// Mn       TIBETAN MARK NGAS BZUNG SGOR RTAGS\n0x0F39==code||// Mn       TIBETAN MARK TSA -PHRU\n0x0F71<=code&&code<=0x0F7E||// Mn  [14] TIBETAN VOWEL SIGN AA..TIBETAN SIGN RJES SU NGA RO\n0x0F80<=code&&code<=0x0F84||// Mn   [5] TIBETAN VOWEL SIGN REVERSED I..TIBETAN MARK HALANTA\n0x0F86<=code&&code<=0x0F87||// Mn   [2] TIBETAN SIGN LCI RTAGS..TIBETAN SIGN YANG RTAGS\n0x0F8D<=code&&code<=0x0F97||// Mn  [11] TIBETAN SUBJOINED SIGN LCE TSA CAN..TIBETAN SUBJOINED LETTER JA\n0x0F99<=code&&code<=0x0FBC||// Mn  [36] TIBETAN SUBJOINED LETTER NYA..TIBETAN SUBJOINED LETTER FIXED-FORM RA\n0x0FC6==code||// Mn       TIBETAN SYMBOL PADMA GDAN\n0x102D<=code&&code<=0x1030||// Mn   [4] MYANMAR VOWEL SIGN I..MYANMAR VOWEL SIGN UU\n0x1032<=code&&code<=0x1037||// Mn   [6] MYANMAR VOWEL SIGN AI..MYANMAR SIGN DOT BELOW\n0x1039<=code&&code<=0x103A||// Mn   [2] MYANMAR SIGN VIRAMA..MYANMAR SIGN ASAT\n0x103D<=code&&code<=0x103E||// Mn   [2] MYANMAR CONSONANT SIGN MEDIAL WA..MYANMAR CONSONANT SIGN MEDIAL HA\n0x1058<=code&&code<=0x1059||// Mn   [2] MYANMAR VOWEL SIGN VOCALIC L..MYANMAR VOWEL SIGN VOCALIC LL\n0x105E<=code&&code<=0x1060||// Mn   [3] MYANMAR CONSONANT SIGN MON MEDIAL NA..MYANMAR CONSONANT SIGN MON MEDIAL LA\n0x1071<=code&&code<=0x1074||// Mn   [4] MYANMAR VOWEL SIGN GEBA KAREN I..MYANMAR VOWEL SIGN KAYAH EE\n0x1082==code||// Mn       MYANMAR CONSONANT SIGN SHAN MEDIAL WA\n0x1085<=code&&code<=0x1086||// Mn   [2] MYANMAR VOWEL SIGN SHAN E ABOVE..MYANMAR VOWEL SIGN SHAN FINAL Y\n0x108D==code||// Mn       MYANMAR SIGN SHAN COUNCIL EMPHATIC TONE\n0x109D==code||// Mn       MYANMAR VOWEL SIGN AITON AI\n0x135D<=code&&code<=0x135F||// Mn   [3] ETHIOPIC COMBINING GEMINATION AND VOWEL LENGTH MARK..ETHIOPIC COMBINING GEMINATION MARK\n0x1712<=code&&code<=0x1714||// Mn   [3] TAGALOG VOWEL SIGN I..TAGALOG SIGN VIRAMA\n0x1732<=code&&code<=0x1734||// Mn   [3] HANUNOO VOWEL SIGN I..HANUNOO SIGN PAMUDPOD\n0x1752<=code&&code<=0x1753||// Mn   [2] BUHID VOWEL SIGN I..BUHID VOWEL SIGN U\n0x1772<=code&&code<=0x1773||// Mn   [2] TAGBANWA VOWEL SIGN I..TAGBANWA VOWEL SIGN U\n0x17B4<=code&&code<=0x17B5||// Mn   [2] KHMER VOWEL INHERENT AQ..KHMER VOWEL INHERENT AA\n0x17B7<=code&&code<=0x17BD||// Mn   [7] KHMER VOWEL SIGN I..KHMER VOWEL SIGN UA\n0x17C6==code||// Mn       KHMER SIGN NIKAHIT\n0x17C9<=code&&code<=0x17D3||// Mn  [11] KHMER SIGN MUUSIKATOAN..KHMER SIGN BATHAMASAT\n0x17DD==code||// Mn       KHMER SIGN ATTHACAN\n0x180B<=code&&code<=0x180D||// Mn   [3] MONGOLIAN FREE VARIATION SELECTOR ONE..MONGOLIAN FREE VARIATION SELECTOR THREE\n0x1885<=code&&code<=0x1886||// Mn   [2] MONGOLIAN LETTER ALI GALI BALUDA..MONGOLIAN LETTER ALI GALI THREE BALUDA\n0x18A9==code||// Mn       MONGOLIAN LETTER ALI GALI DAGALGA\n0x1920<=code&&code<=0x1922||// Mn   [3] LIMBU VOWEL SIGN A..LIMBU VOWEL SIGN U\n0x1927<=code&&code<=0x1928||// Mn   [2] LIMBU VOWEL SIGN E..LIMBU VOWEL SIGN O\n0x1932==code||// Mn       LIMBU SMALL LETTER ANUSVARA\n0x1939<=code&&code<=0x193B||// Mn   [3] LIMBU SIGN MUKPHRENG..LIMBU SIGN SA-I\n0x1A17<=code&&code<=0x1A18||// Mn   [2] BUGINESE VOWEL SIGN I..BUGINESE VOWEL SIGN U\n0x1A1B==code||// Mn       BUGINESE VOWEL SIGN AE\n0x1A56==code||// Mn       TAI THAM CONSONANT SIGN MEDIAL LA\n0x1A58<=code&&code<=0x1A5E||// Mn   [7] TAI THAM SIGN MAI KANG LAI..TAI THAM CONSONANT SIGN SA\n0x1A60==code||// Mn       TAI THAM SIGN SAKOT\n0x1A62==code||// Mn       TAI THAM VOWEL SIGN MAI SAT\n0x1A65<=code&&code<=0x1A6C||// Mn   [8] TAI THAM VOWEL SIGN I..TAI THAM VOWEL SIGN OA BELOW\n0x1A73<=code&&code<=0x1A7C||// Mn  [10] TAI THAM VOWEL SIGN OA ABOVE..TAI THAM SIGN KHUEN-LUE KARAN\n0x1A7F==code||// Mn       TAI THAM COMBINING CRYPTOGRAMMIC DOT\n0x1AB0<=code&&code<=0x1ABD||// Mn  [14] COMBINING DOUBLED CIRCUMFLEX ACCENT..COMBINING PARENTHESES BELOW\n0x1ABE==code||// Me       COMBINING PARENTHESES OVERLAY\n0x1B00<=code&&code<=0x1B03||// Mn   [4] BALINESE SIGN ULU RICEM..BALINESE SIGN SURANG\n0x1B34==code||// Mn       BALINESE SIGN REREKAN\n0x1B36<=code&&code<=0x1B3A||// Mn   [5] BALINESE VOWEL SIGN ULU..BALINESE VOWEL SIGN RA REPA\n0x1B3C==code||// Mn       BALINESE VOWEL SIGN LA LENGA\n0x1B42==code||// Mn       BALINESE VOWEL SIGN PEPET\n0x1B6B<=code&&code<=0x1B73||// Mn   [9] BALINESE MUSICAL SYMBOL COMBINING TEGEH..BALINESE MUSICAL SYMBOL COMBINING GONG\n0x1B80<=code&&code<=0x1B81||// Mn   [2] SUNDANESE SIGN PANYECEK..SUNDANESE SIGN PANGLAYAR\n0x1BA2<=code&&code<=0x1BA5||// Mn   [4] SUNDANESE CONSONANT SIGN PANYAKRA..SUNDANESE VOWEL SIGN PANYUKU\n0x1BA8<=code&&code<=0x1BA9||// Mn   [2] SUNDANESE VOWEL SIGN PAMEPET..SUNDANESE VOWEL SIGN PANEULEUNG\n0x1BAB<=code&&code<=0x1BAD||// Mn   [3] SUNDANESE SIGN VIRAMA..SUNDANESE CONSONANT SIGN PASANGAN WA\n0x1BE6==code||// Mn       BATAK SIGN TOMPI\n0x1BE8<=code&&code<=0x1BE9||// Mn   [2] BATAK VOWEL SIGN PAKPAK E..BATAK VOWEL SIGN EE\n0x1BED==code||// Mn       BATAK VOWEL SIGN KARO O\n0x1BEF<=code&&code<=0x1BF1||// Mn   [3] BATAK VOWEL SIGN U FOR SIMALUNGUN SA..BATAK CONSONANT SIGN H\n0x1C2C<=code&&code<=0x1C33||// Mn   [8] LEPCHA VOWEL SIGN E..LEPCHA CONSONANT SIGN T\n0x1C36<=code&&code<=0x1C37||// Mn   [2] LEPCHA SIGN RAN..LEPCHA SIGN NUKTA\n0x1CD0<=code&&code<=0x1CD2||// Mn   [3] VEDIC TONE KARSHANA..VEDIC TONE PRENKHA\n0x1CD4<=code&&code<=0x1CE0||// Mn  [13] VEDIC SIGN YAJURVEDIC MIDLINE SVARITA..VEDIC TONE RIGVEDIC KASHMIRI INDEPENDENT SVARITA\n0x1CE2<=code&&code<=0x1CE8||// Mn   [7] VEDIC SIGN VISARGA SVARITA..VEDIC SIGN VISARGA ANUDATTA WITH TAIL\n0x1CED==code||// Mn       VEDIC SIGN TIRYAK\n0x1CF4==code||// Mn       VEDIC TONE CANDRA ABOVE\n0x1CF8<=code&&code<=0x1CF9||// Mn   [2] VEDIC TONE RING ABOVE..VEDIC TONE DOUBLE RING ABOVE\n0x1DC0<=code&&code<=0x1DF9||// Mn  [58] COMBINING DOTTED GRAVE ACCENT..COMBINING WIDE INVERTED BRIDGE BELOW\n0x1DFB<=code&&code<=0x1DFF||// Mn   [5] COMBINING DELETION MARK..COMBINING RIGHT ARROWHEAD AND DOWN ARROWHEAD BELOW\n0x200C==code||// Cf       ZERO WIDTH NON-JOINER\n0x20D0<=code&&code<=0x20DC||// Mn  [13] COMBINING LEFT HARPOON ABOVE..COMBINING FOUR DOTS ABOVE\n0x20DD<=code&&code<=0x20E0||// Me   [4] COMBINING ENCLOSING CIRCLE..COMBINING ENCLOSING CIRCLE BACKSLASH\n0x20E1==code||// Mn       COMBINING LEFT RIGHT ARROW ABOVE\n0x20E2<=code&&code<=0x20E4||// Me   [3] COMBINING ENCLOSING SCREEN..COMBINING ENCLOSING UPWARD POINTING TRIANGLE\n0x20E5<=code&&code<=0x20F0||// Mn  [12] COMBINING REVERSE SOLIDUS OVERLAY..COMBINING ASTERISK ABOVE\n0x2CEF<=code&&code<=0x2CF1||// Mn   [3] COPTIC COMBINING NI ABOVE..COPTIC COMBINING SPIRITUS LENIS\n0x2D7F==code||// Mn       TIFINAGH CONSONANT JOINER\n0x2DE0<=code&&code<=0x2DFF||// Mn  [32] COMBINING CYRILLIC LETTER BE..COMBINING CYRILLIC LETTER IOTIFIED BIG YUS\n0x302A<=code&&code<=0x302D||// Mn   [4] IDEOGRAPHIC LEVEL TONE MARK..IDEOGRAPHIC ENTERING TONE MARK\n0x302E<=code&&code<=0x302F||// Mc   [2] HANGUL SINGLE DOT TONE MARK..HANGUL DOUBLE DOT TONE MARK\n0x3099<=code&&code<=0x309A||// Mn   [2] COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK..COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK\n0xA66F==code||// Mn       COMBINING CYRILLIC VZMET\n0xA670<=code&&code<=0xA672||// Me   [3] COMBINING CYRILLIC TEN MILLIONS SIGN..COMBINING CYRILLIC THOUSAND MILLIONS SIGN\n0xA674<=code&&code<=0xA67D||// Mn  [10] COMBINING CYRILLIC LETTER UKRAINIAN IE..COMBINING CYRILLIC PAYEROK\n0xA69E<=code&&code<=0xA69F||// Mn   [2] COMBINING CYRILLIC LETTER EF..COMBINING CYRILLIC LETTER IOTIFIED E\n0xA6F0<=code&&code<=0xA6F1||// Mn   [2] BAMUM COMBINING MARK KOQNDON..BAMUM COMBINING MARK TUKWENTIS\n0xA802==code||// Mn       SYLOTI NAGRI SIGN DVISVARA\n0xA806==code||// Mn       SYLOTI NAGRI SIGN HASANTA\n0xA80B==code||// Mn       SYLOTI NAGRI SIGN ANUSVARA\n0xA825<=code&&code<=0xA826||// Mn   [2] SYLOTI NAGRI VOWEL SIGN U..SYLOTI NAGRI VOWEL SIGN E\n0xA8C4<=code&&code<=0xA8C5||// Mn   [2] SAURASHTRA SIGN VIRAMA..SAURASHTRA SIGN CANDRABINDU\n0xA8E0<=code&&code<=0xA8F1||// Mn  [18] COMBINING DEVANAGARI DIGIT ZERO..COMBINING DEVANAGARI SIGN AVAGRAHA\n0xA926<=code&&code<=0xA92D||// Mn   [8] KAYAH LI VOWEL UE..KAYAH LI TONE CALYA PLOPHU\n0xA947<=code&&code<=0xA951||// Mn  [11] REJANG VOWEL SIGN I..REJANG CONSONANT SIGN R\n0xA980<=code&&code<=0xA982||// Mn   [3] JAVANESE SIGN PANYANGGA..JAVANESE SIGN LAYAR\n0xA9B3==code||// Mn       JAVANESE SIGN CECAK TELU\n0xA9B6<=code&&code<=0xA9B9||// Mn   [4] JAVANESE VOWEL SIGN WULU..JAVANESE VOWEL SIGN SUKU MENDUT\n0xA9BC==code||// Mn       JAVANESE VOWEL SIGN PEPET\n0xA9E5==code||// Mn       MYANMAR SIGN SHAN SAW\n0xAA29<=code&&code<=0xAA2E||// Mn   [6] CHAM VOWEL SIGN AA..CHAM VOWEL SIGN OE\n0xAA31<=code&&code<=0xAA32||// Mn   [2] CHAM VOWEL SIGN AU..CHAM VOWEL SIGN UE\n0xAA35<=code&&code<=0xAA36||// Mn   [2] CHAM CONSONANT SIGN LA..CHAM CONSONANT SIGN WA\n0xAA43==code||// Mn       CHAM CONSONANT SIGN FINAL NG\n0xAA4C==code||// Mn       CHAM CONSONANT SIGN FINAL M\n0xAA7C==code||// Mn       MYANMAR SIGN TAI LAING TONE-2\n0xAAB0==code||// Mn       TAI VIET MAI KANG\n0xAAB2<=code&&code<=0xAAB4||// Mn   [3] TAI VIET VOWEL I..TAI VIET VOWEL U\n0xAAB7<=code&&code<=0xAAB8||// Mn   [2] TAI VIET MAI KHIT..TAI VIET VOWEL IA\n0xAABE<=code&&code<=0xAABF||// Mn   [2] TAI VIET VOWEL AM..TAI VIET TONE MAI EK\n0xAAC1==code||// Mn       TAI VIET TONE MAI THO\n0xAAEC<=code&&code<=0xAAED||// Mn   [2] MEETEI MAYEK VOWEL SIGN UU..MEETEI MAYEK VOWEL SIGN AAI\n0xAAF6==code||// Mn       MEETEI MAYEK VIRAMA\n0xABE5==code||// Mn       MEETEI MAYEK VOWEL SIGN ANAP\n0xABE8==code||// Mn       MEETEI MAYEK VOWEL SIGN UNAP\n0xABED==code||// Mn       MEETEI MAYEK APUN IYEK\n0xFB1E==code||// Mn       HEBREW POINT JUDEO-SPANISH VARIKA\n0xFE00<=code&&code<=0xFE0F||// Mn  [16] VARIATION SELECTOR-1..VARIATION SELECTOR-16\n0xFE20<=code&&code<=0xFE2F||// Mn  [16] COMBINING LIGATURE LEFT HALF..COMBINING CYRILLIC TITLO RIGHT HALF\n0xFF9E<=code&&code<=0xFF9F||// Lm   [2] HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK\n0x101FD==code||// Mn       PHAISTOS DISC SIGN COMBINING OBLIQUE STROKE\n0x102E0==code||// Mn       COPTIC EPACT THOUSANDS MARK\n0x10376<=code&&code<=0x1037A||// Mn   [5] COMBINING OLD PERMIC LETTER AN..COMBINING OLD PERMIC LETTER SII\n0x10A01<=code&&code<=0x10A03||// Mn   [3] KHAROSHTHI VOWEL SIGN I..KHAROSHTHI VOWEL SIGN VOCALIC R\n0x10A05<=code&&code<=0x10A06||// Mn   [2] KHAROSHTHI VOWEL SIGN E..KHAROSHTHI VOWEL SIGN O\n0x10A0C<=code&&code<=0x10A0F||// Mn   [4] KHAROSHTHI VOWEL LENGTH MARK..KHAROSHTHI SIGN VISARGA\n0x10A38<=code&&code<=0x10A3A||// Mn   [3] KHAROSHTHI SIGN BAR ABOVE..KHAROSHTHI SIGN DOT BELOW\n0x10A3F==code||// Mn       KHAROSHTHI VIRAMA\n0x10AE5<=code&&code<=0x10AE6||// Mn   [2] MANICHAEAN ABBREVIATION MARK ABOVE..MANICHAEAN ABBREVIATION MARK BELOW\n0x11001==code||// Mn       BRAHMI SIGN ANUSVARA\n0x11038<=code&&code<=0x11046||// Mn  [15] BRAHMI VOWEL SIGN AA..BRAHMI VIRAMA\n0x1107F<=code&&code<=0x11081||// Mn   [3] BRAHMI NUMBER JOINER..KAITHI SIGN ANUSVARA\n0x110B3<=code&&code<=0x110B6||// Mn   [4] KAITHI VOWEL SIGN U..KAITHI VOWEL SIGN AI\n0x110B9<=code&&code<=0x110BA||// Mn   [2] KAITHI SIGN VIRAMA..KAITHI SIGN NUKTA\n0x11100<=code&&code<=0x11102||// Mn   [3] CHAKMA SIGN CANDRABINDU..CHAKMA SIGN VISARGA\n0x11127<=code&&code<=0x1112B||// Mn   [5] CHAKMA VOWEL SIGN A..CHAKMA VOWEL SIGN UU\n0x1112D<=code&&code<=0x11134||// Mn   [8] CHAKMA VOWEL SIGN AI..CHAKMA MAAYYAA\n0x11173==code||// Mn       MAHAJANI SIGN NUKTA\n0x11180<=code&&code<=0x11181||// Mn   [2] SHARADA SIGN CANDRABINDU..SHARADA SIGN ANUSVARA\n0x111B6<=code&&code<=0x111BE||// Mn   [9] SHARADA VOWEL SIGN U..SHARADA VOWEL SIGN O\n0x111CA<=code&&code<=0x111CC||// Mn   [3] SHARADA SIGN NUKTA..SHARADA EXTRA SHORT VOWEL MARK\n0x1122F<=code&&code<=0x11231||// Mn   [3] KHOJKI VOWEL SIGN U..KHOJKI VOWEL SIGN AI\n0x11234==code||// Mn       KHOJKI SIGN ANUSVARA\n0x11236<=code&&code<=0x11237||// Mn   [2] KHOJKI SIGN NUKTA..KHOJKI SIGN SHADDA\n0x1123E==code||// Mn       KHOJKI SIGN SUKUN\n0x112DF==code||// Mn       KHUDAWADI SIGN ANUSVARA\n0x112E3<=code&&code<=0x112EA||// Mn   [8] KHUDAWADI VOWEL SIGN U..KHUDAWADI SIGN VIRAMA\n0x11300<=code&&code<=0x11301||// Mn   [2] GRANTHA SIGN COMBINING ANUSVARA ABOVE..GRANTHA SIGN CANDRABINDU\n0x1133C==code||// Mn       GRANTHA SIGN NUKTA\n0x1133E==code||// Mc       GRANTHA VOWEL SIGN AA\n0x11340==code||// Mn       GRANTHA VOWEL SIGN II\n0x11357==code||// Mc       GRANTHA AU LENGTH MARK\n0x11366<=code&&code<=0x1136C||// Mn   [7] COMBINING GRANTHA DIGIT ZERO..COMBINING GRANTHA DIGIT SIX\n0x11370<=code&&code<=0x11374||// Mn   [5] COMBINING GRANTHA LETTER A..COMBINING GRANTHA LETTER PA\n0x11438<=code&&code<=0x1143F||// Mn   [8] NEWA VOWEL SIGN U..NEWA VOWEL SIGN AI\n0x11442<=code&&code<=0x11444||// Mn   [3] NEWA SIGN VIRAMA..NEWA SIGN ANUSVARA\n0x11446==code||// Mn       NEWA SIGN NUKTA\n0x114B0==code||// Mc       TIRHUTA VOWEL SIGN AA\n0x114B3<=code&&code<=0x114B8||// Mn   [6] TIRHUTA VOWEL SIGN U..TIRHUTA VOWEL SIGN VOCALIC LL\n0x114BA==code||// Mn       TIRHUTA VOWEL SIGN SHORT E\n0x114BD==code||// Mc       TIRHUTA VOWEL SIGN SHORT O\n0x114BF<=code&&code<=0x114C0||// Mn   [2] TIRHUTA SIGN CANDRABINDU..TIRHUTA SIGN ANUSVARA\n0x114C2<=code&&code<=0x114C3||// Mn   [2] TIRHUTA SIGN VIRAMA..TIRHUTA SIGN NUKTA\n0x115AF==code||// Mc       SIDDHAM VOWEL SIGN AA\n0x115B2<=code&&code<=0x115B5||// Mn   [4] SIDDHAM VOWEL SIGN U..SIDDHAM VOWEL SIGN VOCALIC RR\n0x115BC<=code&&code<=0x115BD||// Mn   [2] SIDDHAM SIGN CANDRABINDU..SIDDHAM SIGN ANUSVARA\n0x115BF<=code&&code<=0x115C0||// Mn   [2] SIDDHAM SIGN VIRAMA..SIDDHAM SIGN NUKTA\n0x115DC<=code&&code<=0x115DD||// Mn   [2] SIDDHAM VOWEL SIGN ALTERNATE U..SIDDHAM VOWEL SIGN ALTERNATE UU\n0x11633<=code&&code<=0x1163A||// Mn   [8] MODI VOWEL SIGN U..MODI VOWEL SIGN AI\n0x1163D==code||// Mn       MODI SIGN ANUSVARA\n0x1163F<=code&&code<=0x11640||// Mn   [2] MODI SIGN VIRAMA..MODI SIGN ARDHACANDRA\n0x116AB==code||// Mn       TAKRI SIGN ANUSVARA\n0x116AD==code||// Mn       TAKRI VOWEL SIGN AA\n0x116B0<=code&&code<=0x116B5||// Mn   [6] TAKRI VOWEL SIGN U..TAKRI VOWEL SIGN AU\n0x116B7==code||// Mn       TAKRI SIGN NUKTA\n0x1171D<=code&&code<=0x1171F||// Mn   [3] AHOM CONSONANT SIGN MEDIAL LA..AHOM CONSONANT SIGN MEDIAL LIGATING RA\n0x11722<=code&&code<=0x11725||// Mn   [4] AHOM VOWEL SIGN I..AHOM VOWEL SIGN UU\n0x11727<=code&&code<=0x1172B||// Mn   [5] AHOM VOWEL SIGN AW..AHOM SIGN KILLER\n0x11A01<=code&&code<=0x11A06||// Mn   [6] ZANABAZAR SQUARE VOWEL SIGN I..ZANABAZAR SQUARE VOWEL SIGN O\n0x11A09<=code&&code<=0x11A0A||// Mn   [2] ZANABAZAR SQUARE VOWEL SIGN REVERSED I..ZANABAZAR SQUARE VOWEL LENGTH MARK\n0x11A33<=code&&code<=0x11A38||// Mn   [6] ZANABAZAR SQUARE FINAL CONSONANT MARK..ZANABAZAR SQUARE SIGN ANUSVARA\n0x11A3B<=code&&code<=0x11A3E||// Mn   [4] ZANABAZAR SQUARE CLUSTER-FINAL LETTER YA..ZANABAZAR SQUARE CLUSTER-FINAL LETTER VA\n0x11A47==code||// Mn       ZANABAZAR SQUARE SUBJOINER\n0x11A51<=code&&code<=0x11A56||// Mn   [6] SOYOMBO VOWEL SIGN I..SOYOMBO VOWEL SIGN OE\n0x11A59<=code&&code<=0x11A5B||// Mn   [3] SOYOMBO VOWEL SIGN VOCALIC R..SOYOMBO VOWEL LENGTH MARK\n0x11A8A<=code&&code<=0x11A96||// Mn  [13] SOYOMBO FINAL CONSONANT SIGN G..SOYOMBO SIGN ANUSVARA\n0x11A98<=code&&code<=0x11A99||// Mn   [2] SOYOMBO GEMINATION MARK..SOYOMBO SUBJOINER\n0x11C30<=code&&code<=0x11C36||// Mn   [7] BHAIKSUKI VOWEL SIGN I..BHAIKSUKI VOWEL SIGN VOCALIC L\n0x11C38<=code&&code<=0x11C3D||// Mn   [6] BHAIKSUKI VOWEL SIGN E..BHAIKSUKI SIGN ANUSVARA\n0x11C3F==code||// Mn       BHAIKSUKI SIGN VIRAMA\n0x11C92<=code&&code<=0x11CA7||// Mn  [22] MARCHEN SUBJOINED LETTER KA..MARCHEN SUBJOINED LETTER ZA\n0x11CAA<=code&&code<=0x11CB0||// Mn   [7] MARCHEN SUBJOINED LETTER RA..MARCHEN VOWEL SIGN AA\n0x11CB2<=code&&code<=0x11CB3||// Mn   [2] MARCHEN VOWEL SIGN U..MARCHEN VOWEL SIGN E\n0x11CB5<=code&&code<=0x11CB6||// Mn   [2] MARCHEN SIGN ANUSVARA..MARCHEN SIGN CANDRABINDU\n0x11D31<=code&&code<=0x11D36||// Mn   [6] MASARAM GONDI VOWEL SIGN AA..MASARAM GONDI VOWEL SIGN VOCALIC R\n0x11D3A==code||// Mn       MASARAM GONDI VOWEL SIGN E\n0x11D3C<=code&&code<=0x11D3D||// Mn   [2] MASARAM GONDI VOWEL SIGN AI..MASARAM GONDI VOWEL SIGN O\n0x11D3F<=code&&code<=0x11D45||// Mn   [7] MASARAM GONDI VOWEL SIGN AU..MASARAM GONDI VIRAMA\n0x11D47==code||// Mn       MASARAM GONDI RA-KARA\n0x16AF0<=code&&code<=0x16AF4||// Mn   [5] BASSA VAH COMBINING HIGH TONE..BASSA VAH COMBINING HIGH-LOW TONE\n0x16B30<=code&&code<=0x16B36||// Mn   [7] PAHAWH HMONG MARK CIM TUB..PAHAWH HMONG MARK CIM TAUM\n0x16F8F<=code&&code<=0x16F92||// Mn   [4] MIAO TONE RIGHT..MIAO TONE BELOW\n0x1BC9D<=code&&code<=0x1BC9E||// Mn   [2] DUPLOYAN THICK LETTER SELECTOR..DUPLOYAN DOUBLE MARK\n0x1D165==code||// Mc       MUSICAL SYMBOL COMBINING STEM\n0x1D167<=code&&code<=0x1D169||// Mn   [3] MUSICAL SYMBOL COMBINING TREMOLO-1..MUSICAL SYMBOL COMBINING TREMOLO-3\n0x1D16E<=code&&code<=0x1D172||// Mc   [5] MUSICAL SYMBOL COMBINING FLAG-1..MUSICAL SYMBOL COMBINING FLAG-5\n0x1D17B<=code&&code<=0x1D182||// Mn   [8] MUSICAL SYMBOL COMBINING ACCENT..MUSICAL SYMBOL COMBINING LOURE\n0x1D185<=code&&code<=0x1D18B||// Mn   [7] MUSICAL SYMBOL COMBINING DOIT..MUSICAL SYMBOL COMBINING TRIPLE TONGUE\n0x1D1AA<=code&&code<=0x1D1AD||// Mn   [4] MUSICAL SYMBOL COMBINING DOWN BOW..MUSICAL SYMBOL COMBINING SNAP PIZZICATO\n0x1D242<=code&&code<=0x1D244||// Mn   [3] COMBINING GREEK MUSICAL TRISEME..COMBINING GREEK MUSICAL PENTASEME\n0x1DA00<=code&&code<=0x1DA36||// Mn  [55] SIGNWRITING HEAD RIM..SIGNWRITING AIR SUCKING IN\n0x1DA3B<=code&&code<=0x1DA6C||// Mn  [50] SIGNWRITING MOUTH CLOSED NEUTRAL..SIGNWRITING EXCITEMENT\n0x1DA75==code||// Mn       SIGNWRITING UPPER BODY TILTING FROM HIP JOINTS\n0x1DA84==code||// Mn       SIGNWRITING LOCATION HEAD NECK\n0x1DA9B<=code&&code<=0x1DA9F||// Mn   [5] SIGNWRITING FILL MODIFIER-2..SIGNWRITING FILL MODIFIER-6\n0x1DAA1<=code&&code<=0x1DAAF||// Mn  [15] SIGNWRITING ROTATION MODIFIER-2..SIGNWRITING ROTATION MODIFIER-16\n0x1E000<=code&&code<=0x1E006||// Mn   [7] COMBINING GLAGOLITIC LETTER AZU..COMBINING GLAGOLITIC LETTER ZHIVETE\n0x1E008<=code&&code<=0x1E018||// Mn  [17] COMBINING GLAGOLITIC LETTER ZEMLJA..COMBINING GLAGOLITIC LETTER HERU\n0x1E01B<=code&&code<=0x1E021||// Mn   [7] COMBINING GLAGOLITIC LETTER SHTA..COMBINING GLAGOLITIC LETTER YATI\n0x1E023<=code&&code<=0x1E024||// Mn   [2] COMBINING GLAGOLITIC LETTER YU..COMBINING GLAGOLITIC LETTER SMALL YUS\n0x1E026<=code&&code<=0x1E02A||// Mn   [5] COMBINING GLAGOLITIC LETTER YO..COMBINING GLAGOLITIC LETTER FITA\n0x1E8D0<=code&&code<=0x1E8D6||// Mn   [7] MENDE KIKAKUI COMBINING NUMBER TEENS..MENDE KIKAKUI COMBINING NUMBER MILLIONS\n0x1E944<=code&&code<=0x1E94A||// Mn   [7] ADLAM ALIF LENGTHENER..ADLAM NUKTA\n0xE0020<=code&&code<=0xE007F||// Cf  [96] TAG SPACE..CANCEL TAG\n0xE0100<=code&&code<=0xE01EF// Mn [240] VARIATION SELECTOR-17..VARIATION SELECTOR-256\n){return Extend;}if(0x1F1E6<=code&&code<=0x1F1FF)// So  [26] REGIONAL INDICATOR SYMBOL LETTER A..REGIONAL INDICATOR SYMBOL LETTER Z\n{return Regional_Indicator;}if(0x0903==code||// Mc       DEVANAGARI SIGN VISARGA\n0x093B==code||// Mc       DEVANAGARI VOWEL SIGN OOE\n0x093E<=code&&code<=0x0940||// Mc   [3] DEVANAGARI VOWEL SIGN AA..DEVANAGARI VOWEL SIGN II\n0x0949<=code&&code<=0x094C||// Mc   [4] DEVANAGARI VOWEL SIGN CANDRA O..DEVANAGARI VOWEL SIGN AU\n0x094E<=code&&code<=0x094F||// Mc   [2] DEVANAGARI VOWEL SIGN PRISHTHAMATRA E..DEVANAGARI VOWEL SIGN AW\n0x0982<=code&&code<=0x0983||// Mc   [2] BENGALI SIGN ANUSVARA..BENGALI SIGN VISARGA\n0x09BF<=code&&code<=0x09C0||// Mc   [2] BENGALI VOWEL SIGN I..BENGALI VOWEL SIGN II\n0x09C7<=code&&code<=0x09C8||// Mc   [2] BENGALI VOWEL SIGN E..BENGALI VOWEL SIGN AI\n0x09CB<=code&&code<=0x09CC||// Mc   [2] BENGALI VOWEL SIGN O..BENGALI VOWEL SIGN AU\n0x0A03==code||// Mc       GURMUKHI SIGN VISARGA\n0x0A3E<=code&&code<=0x0A40||// Mc   [3] GURMUKHI VOWEL SIGN AA..GURMUKHI VOWEL SIGN II\n0x0A83==code||// Mc       GUJARATI SIGN VISARGA\n0x0ABE<=code&&code<=0x0AC0||// Mc   [3] GUJARATI VOWEL SIGN AA..GUJARATI VOWEL SIGN II\n0x0AC9==code||// Mc       GUJARATI VOWEL SIGN CANDRA O\n0x0ACB<=code&&code<=0x0ACC||// Mc   [2] GUJARATI VOWEL SIGN O..GUJARATI VOWEL SIGN AU\n0x0B02<=code&&code<=0x0B03||// Mc   [2] ORIYA SIGN ANUSVARA..ORIYA SIGN VISARGA\n0x0B40==code||// Mc       ORIYA VOWEL SIGN II\n0x0B47<=code&&code<=0x0B48||// Mc   [2] ORIYA VOWEL SIGN E..ORIYA VOWEL SIGN AI\n0x0B4B<=code&&code<=0x0B4C||// Mc   [2] ORIYA VOWEL SIGN O..ORIYA VOWEL SIGN AU\n0x0BBF==code||// Mc       TAMIL VOWEL SIGN I\n0x0BC1<=code&&code<=0x0BC2||// Mc   [2] TAMIL VOWEL SIGN U..TAMIL VOWEL SIGN UU\n0x0BC6<=code&&code<=0x0BC8||// Mc   [3] TAMIL VOWEL SIGN E..TAMIL VOWEL SIGN AI\n0x0BCA<=code&&code<=0x0BCC||// Mc   [3] TAMIL VOWEL SIGN O..TAMIL VOWEL SIGN AU\n0x0C01<=code&&code<=0x0C03||// Mc   [3] TELUGU SIGN CANDRABINDU..TELUGU SIGN VISARGA\n0x0C41<=code&&code<=0x0C44||// Mc   [4] TELUGU VOWEL SIGN U..TELUGU VOWEL SIGN VOCALIC RR\n0x0C82<=code&&code<=0x0C83||// Mc   [2] KANNADA SIGN ANUSVARA..KANNADA SIGN VISARGA\n0x0CBE==code||// Mc       KANNADA VOWEL SIGN AA\n0x0CC0<=code&&code<=0x0CC1||// Mc   [2] KANNADA VOWEL SIGN II..KANNADA VOWEL SIGN U\n0x0CC3<=code&&code<=0x0CC4||// Mc   [2] KANNADA VOWEL SIGN VOCALIC R..KANNADA VOWEL SIGN VOCALIC RR\n0x0CC7<=code&&code<=0x0CC8||// Mc   [2] KANNADA VOWEL SIGN EE..KANNADA VOWEL SIGN AI\n0x0CCA<=code&&code<=0x0CCB||// Mc   [2] KANNADA VOWEL SIGN O..KANNADA VOWEL SIGN OO\n0x0D02<=code&&code<=0x0D03||// Mc   [2] MALAYALAM SIGN ANUSVARA..MALAYALAM SIGN VISARGA\n0x0D3F<=code&&code<=0x0D40||// Mc   [2] MALAYALAM VOWEL SIGN I..MALAYALAM VOWEL SIGN II\n0x0D46<=code&&code<=0x0D48||// Mc   [3] MALAYALAM VOWEL SIGN E..MALAYALAM VOWEL SIGN AI\n0x0D4A<=code&&code<=0x0D4C||// Mc   [3] MALAYALAM VOWEL SIGN O..MALAYALAM VOWEL SIGN AU\n0x0D82<=code&&code<=0x0D83||// Mc   [2] SINHALA SIGN ANUSVARAYA..SINHALA SIGN VISARGAYA\n0x0DD0<=code&&code<=0x0DD1||// Mc   [2] SINHALA VOWEL SIGN KETTI AEDA-PILLA..SINHALA VOWEL SIGN DIGA AEDA-PILLA\n0x0DD8<=code&&code<=0x0DDE||// Mc   [7] SINHALA VOWEL SIGN GAETTA-PILLA..SINHALA VOWEL SIGN KOMBUVA HAA GAYANUKITTA\n0x0DF2<=code&&code<=0x0DF3||// Mc   [2] SINHALA VOWEL SIGN DIGA GAETTA-PILLA..SINHALA VOWEL SIGN DIGA GAYANUKITTA\n0x0E33==code||// Lo       THAI CHARACTER SARA AM\n0x0EB3==code||// Lo       LAO VOWEL SIGN AM\n0x0F3E<=code&&code<=0x0F3F||// Mc   [2] TIBETAN SIGN YAR TSHES..TIBETAN SIGN MAR TSHES\n0x0F7F==code||// Mc       TIBETAN SIGN RNAM BCAD\n0x1031==code||// Mc       MYANMAR VOWEL SIGN E\n0x103B<=code&&code<=0x103C||// Mc   [2] MYANMAR CONSONANT SIGN MEDIAL YA..MYANMAR CONSONANT SIGN MEDIAL RA\n0x1056<=code&&code<=0x1057||// Mc   [2] MYANMAR VOWEL SIGN VOCALIC R..MYANMAR VOWEL SIGN VOCALIC RR\n0x1084==code||// Mc       MYANMAR VOWEL SIGN SHAN E\n0x17B6==code||// Mc       KHMER VOWEL SIGN AA\n0x17BE<=code&&code<=0x17C5||// Mc   [8] KHMER VOWEL SIGN OE..KHMER VOWEL SIGN AU\n0x17C7<=code&&code<=0x17C8||// Mc   [2] KHMER SIGN REAHMUK..KHMER SIGN YUUKALEAPINTU\n0x1923<=code&&code<=0x1926||// Mc   [4] LIMBU VOWEL SIGN EE..LIMBU VOWEL SIGN AU\n0x1929<=code&&code<=0x192B||// Mc   [3] LIMBU SUBJOINED LETTER YA..LIMBU SUBJOINED LETTER WA\n0x1930<=code&&code<=0x1931||// Mc   [2] LIMBU SMALL LETTER KA..LIMBU SMALL LETTER NGA\n0x1933<=code&&code<=0x1938||// Mc   [6] LIMBU SMALL LETTER TA..LIMBU SMALL LETTER LA\n0x1A19<=code&&code<=0x1A1A||// Mc   [2] BUGINESE VOWEL SIGN E..BUGINESE VOWEL SIGN O\n0x1A55==code||// Mc       TAI THAM CONSONANT SIGN MEDIAL RA\n0x1A57==code||// Mc       TAI THAM CONSONANT SIGN LA TANG LAI\n0x1A6D<=code&&code<=0x1A72||// Mc   [6] TAI THAM VOWEL SIGN OY..TAI THAM VOWEL SIGN THAM AI\n0x1B04==code||// Mc       BALINESE SIGN BISAH\n0x1B35==code||// Mc       BALINESE VOWEL SIGN TEDUNG\n0x1B3B==code||// Mc       BALINESE VOWEL SIGN RA REPA TEDUNG\n0x1B3D<=code&&code<=0x1B41||// Mc   [5] BALINESE VOWEL SIGN LA LENGA TEDUNG..BALINESE VOWEL SIGN TALING REPA TEDUNG\n0x1B43<=code&&code<=0x1B44||// Mc   [2] BALINESE VOWEL SIGN PEPET TEDUNG..BALINESE ADEG ADEG\n0x1B82==code||// Mc       SUNDANESE SIGN PANGWISAD\n0x1BA1==code||// Mc       SUNDANESE CONSONANT SIGN PAMINGKAL\n0x1BA6<=code&&code<=0x1BA7||// Mc   [2] SUNDANESE VOWEL SIGN PANAELAENG..SUNDANESE VOWEL SIGN PANOLONG\n0x1BAA==code||// Mc       SUNDANESE SIGN PAMAAEH\n0x1BE7==code||// Mc       BATAK VOWEL SIGN E\n0x1BEA<=code&&code<=0x1BEC||// Mc   [3] BATAK VOWEL SIGN I..BATAK VOWEL SIGN O\n0x1BEE==code||// Mc       BATAK VOWEL SIGN U\n0x1BF2<=code&&code<=0x1BF3||// Mc   [2] BATAK PANGOLAT..BATAK PANONGONAN\n0x1C24<=code&&code<=0x1C2B||// Mc   [8] LEPCHA SUBJOINED LETTER YA..LEPCHA VOWEL SIGN UU\n0x1C34<=code&&code<=0x1C35||// Mc   [2] LEPCHA CONSONANT SIGN NYIN-DO..LEPCHA CONSONANT SIGN KANG\n0x1CE1==code||// Mc       VEDIC TONE ATHARVAVEDIC INDEPENDENT SVARITA\n0x1CF2<=code&&code<=0x1CF3||// Mc   [2] VEDIC SIGN ARDHAVISARGA..VEDIC SIGN ROTATED ARDHAVISARGA\n0x1CF7==code||// Mc       VEDIC SIGN ATIKRAMA\n0xA823<=code&&code<=0xA824||// Mc   [2] SYLOTI NAGRI VOWEL SIGN A..SYLOTI NAGRI VOWEL SIGN I\n0xA827==code||// Mc       SYLOTI NAGRI VOWEL SIGN OO\n0xA880<=code&&code<=0xA881||// Mc   [2] SAURASHTRA SIGN ANUSVARA..SAURASHTRA SIGN VISARGA\n0xA8B4<=code&&code<=0xA8C3||// Mc  [16] SAURASHTRA CONSONANT SIGN HAARU..SAURASHTRA VOWEL SIGN AU\n0xA952<=code&&code<=0xA953||// Mc   [2] REJANG CONSONANT SIGN H..REJANG VIRAMA\n0xA983==code||// Mc       JAVANESE SIGN WIGNYAN\n0xA9B4<=code&&code<=0xA9B5||// Mc   [2] JAVANESE VOWEL SIGN TARUNG..JAVANESE VOWEL SIGN TOLONG\n0xA9BA<=code&&code<=0xA9BB||// Mc   [2] JAVANESE VOWEL SIGN TALING..JAVANESE VOWEL SIGN DIRGA MURE\n0xA9BD<=code&&code<=0xA9C0||// Mc   [4] JAVANESE CONSONANT SIGN KERET..JAVANESE PANGKON\n0xAA2F<=code&&code<=0xAA30||// Mc   [2] CHAM VOWEL SIGN O..CHAM VOWEL SIGN AI\n0xAA33<=code&&code<=0xAA34||// Mc   [2] CHAM CONSONANT SIGN YA..CHAM CONSONANT SIGN RA\n0xAA4D==code||// Mc       CHAM CONSONANT SIGN FINAL H\n0xAAEB==code||// Mc       MEETEI MAYEK VOWEL SIGN II\n0xAAEE<=code&&code<=0xAAEF||// Mc   [2] MEETEI MAYEK VOWEL SIGN AU..MEETEI MAYEK VOWEL SIGN AAU\n0xAAF5==code||// Mc       MEETEI MAYEK VOWEL SIGN VISARGA\n0xABE3<=code&&code<=0xABE4||// Mc   [2] MEETEI MAYEK VOWEL SIGN ONAP..MEETEI MAYEK VOWEL SIGN INAP\n0xABE6<=code&&code<=0xABE7||// Mc   [2] MEETEI MAYEK VOWEL SIGN YENAP..MEETEI MAYEK VOWEL SIGN SOUNAP\n0xABE9<=code&&code<=0xABEA||// Mc   [2] MEETEI MAYEK VOWEL SIGN CHEINAP..MEETEI MAYEK VOWEL SIGN NUNG\n0xABEC==code||// Mc       MEETEI MAYEK LUM IYEK\n0x11000==code||// Mc       BRAHMI SIGN CANDRABINDU\n0x11002==code||// Mc       BRAHMI SIGN VISARGA\n0x11082==code||// Mc       KAITHI SIGN VISARGA\n0x110B0<=code&&code<=0x110B2||// Mc   [3] KAITHI VOWEL SIGN AA..KAITHI VOWEL SIGN II\n0x110B7<=code&&code<=0x110B8||// Mc   [2] KAITHI VOWEL SIGN O..KAITHI VOWEL SIGN AU\n0x1112C==code||// Mc       CHAKMA VOWEL SIGN E\n0x11182==code||// Mc       SHARADA SIGN VISARGA\n0x111B3<=code&&code<=0x111B5||// Mc   [3] SHARADA VOWEL SIGN AA..SHARADA VOWEL SIGN II\n0x111BF<=code&&code<=0x111C0||// Mc   [2] SHARADA VOWEL SIGN AU..SHARADA SIGN VIRAMA\n0x1122C<=code&&code<=0x1122E||// Mc   [3] KHOJKI VOWEL SIGN AA..KHOJKI VOWEL SIGN II\n0x11232<=code&&code<=0x11233||// Mc   [2] KHOJKI VOWEL SIGN O..KHOJKI VOWEL SIGN AU\n0x11235==code||// Mc       KHOJKI SIGN VIRAMA\n0x112E0<=code&&code<=0x112E2||// Mc   [3] KHUDAWADI VOWEL SIGN AA..KHUDAWADI VOWEL SIGN II\n0x11302<=code&&code<=0x11303||// Mc   [2] GRANTHA SIGN ANUSVARA..GRANTHA SIGN VISARGA\n0x1133F==code||// Mc       GRANTHA VOWEL SIGN I\n0x11341<=code&&code<=0x11344||// Mc   [4] GRANTHA VOWEL SIGN U..GRANTHA VOWEL SIGN VOCALIC RR\n0x11347<=code&&code<=0x11348||// Mc   [2] GRANTHA VOWEL SIGN EE..GRANTHA VOWEL SIGN AI\n0x1134B<=code&&code<=0x1134D||// Mc   [3] GRANTHA VOWEL SIGN OO..GRANTHA SIGN VIRAMA\n0x11362<=code&&code<=0x11363||// Mc   [2] GRANTHA VOWEL SIGN VOCALIC L..GRANTHA VOWEL SIGN VOCALIC LL\n0x11435<=code&&code<=0x11437||// Mc   [3] NEWA VOWEL SIGN AA..NEWA VOWEL SIGN II\n0x11440<=code&&code<=0x11441||// Mc   [2] NEWA VOWEL SIGN O..NEWA VOWEL SIGN AU\n0x11445==code||// Mc       NEWA SIGN VISARGA\n0x114B1<=code&&code<=0x114B2||// Mc   [2] TIRHUTA VOWEL SIGN I..TIRHUTA VOWEL SIGN II\n0x114B9==code||// Mc       TIRHUTA VOWEL SIGN E\n0x114BB<=code&&code<=0x114BC||// Mc   [2] TIRHUTA VOWEL SIGN AI..TIRHUTA VOWEL SIGN O\n0x114BE==code||// Mc       TIRHUTA VOWEL SIGN AU\n0x114C1==code||// Mc       TIRHUTA SIGN VISARGA\n0x115B0<=code&&code<=0x115B1||// Mc   [2] SIDDHAM VOWEL SIGN I..SIDDHAM VOWEL SIGN II\n0x115B8<=code&&code<=0x115BB||// Mc   [4] SIDDHAM VOWEL SIGN E..SIDDHAM VOWEL SIGN AU\n0x115BE==code||// Mc       SIDDHAM SIGN VISARGA\n0x11630<=code&&code<=0x11632||// Mc   [3] MODI VOWEL SIGN AA..MODI VOWEL SIGN II\n0x1163B<=code&&code<=0x1163C||// Mc   [2] MODI VOWEL SIGN O..MODI VOWEL SIGN AU\n0x1163E==code||// Mc       MODI SIGN VISARGA\n0x116AC==code||// Mc       TAKRI SIGN VISARGA\n0x116AE<=code&&code<=0x116AF||// Mc   [2] TAKRI VOWEL SIGN I..TAKRI VOWEL SIGN II\n0x116B6==code||// Mc       TAKRI SIGN VIRAMA\n0x11720<=code&&code<=0x11721||// Mc   [2] AHOM VOWEL SIGN A..AHOM VOWEL SIGN AA\n0x11726==code||// Mc       AHOM VOWEL SIGN E\n0x11A07<=code&&code<=0x11A08||// Mc   [2] ZANABAZAR SQUARE VOWEL SIGN AI..ZANABAZAR SQUARE VOWEL SIGN AU\n0x11A39==code||// Mc       ZANABAZAR SQUARE SIGN VISARGA\n0x11A57<=code&&code<=0x11A58||// Mc   [2] SOYOMBO VOWEL SIGN AI..SOYOMBO VOWEL SIGN AU\n0x11A97==code||// Mc       SOYOMBO SIGN VISARGA\n0x11C2F==code||// Mc       BHAIKSUKI VOWEL SIGN AA\n0x11C3E==code||// Mc       BHAIKSUKI SIGN VISARGA\n0x11CA9==code||// Mc       MARCHEN SUBJOINED LETTER YA\n0x11CB1==code||// Mc       MARCHEN VOWEL SIGN I\n0x11CB4==code||// Mc       MARCHEN VOWEL SIGN O\n0x16F51<=code&&code<=0x16F7E||// Mc  [46] MIAO SIGN ASPIRATION..MIAO VOWEL SIGN NG\n0x1D166==code||// Mc       MUSICAL SYMBOL COMBINING SPRECHGESANG STEM\n0x1D16D==code// Mc       MUSICAL SYMBOL COMBINING AUGMENTATION DOT\n){return SpacingMark;}if(0x1100<=code&&code<=0x115F||// Lo  [96] HANGUL CHOSEONG KIYEOK..HANGUL CHOSEONG FILLER\n0xA960<=code&&code<=0xA97C// Lo  [29] HANGUL CHOSEONG TIKEUT-MIEUM..HANGUL CHOSEONG SSANGYEORINHIEUH\n){return L;}if(0x1160<=code&&code<=0x11A7||// Lo  [72] HANGUL JUNGSEONG FILLER..HANGUL JUNGSEONG O-YAE\n0xD7B0<=code&&code<=0xD7C6// Lo  [23] HANGUL JUNGSEONG O-YEO..HANGUL JUNGSEONG ARAEA-E\n){return V;}if(0x11A8<=code&&code<=0x11FF||// Lo  [88] HANGUL JONGSEONG KIYEOK..HANGUL JONGSEONG SSANGNIEUN\n0xD7CB<=code&&code<=0xD7FB// Lo  [49] HANGUL JONGSEONG NIEUN-RIEUL..HANGUL JONGSEONG PHIEUPH-THIEUTH\n){return T;}if(0xAC00==code||// Lo       HANGUL SYLLABLE GA\n0xAC1C==code||// Lo       HANGUL SYLLABLE GAE\n0xAC38==code||// Lo       HANGUL SYLLABLE GYA\n0xAC54==code||// Lo       HANGUL SYLLABLE GYAE\n0xAC70==code||// Lo       HANGUL SYLLABLE GEO\n0xAC8C==code||// Lo       HANGUL SYLLABLE GE\n0xACA8==code||// Lo       HANGUL SYLLABLE GYEO\n0xACC4==code||// Lo       HANGUL SYLLABLE GYE\n0xACE0==code||// Lo       HANGUL SYLLABLE GO\n0xACFC==code||// Lo       HANGUL SYLLABLE GWA\n0xAD18==code||// Lo       HANGUL SYLLABLE GWAE\n0xAD34==code||// Lo       HANGUL SYLLABLE GOE\n0xAD50==code||// Lo       HANGUL SYLLABLE GYO\n0xAD6C==code||// Lo       HANGUL SYLLABLE GU\n0xAD88==code||// Lo       HANGUL SYLLABLE GWEO\n0xADA4==code||// Lo       HANGUL SYLLABLE GWE\n0xADC0==code||// Lo       HANGUL SYLLABLE GWI\n0xADDC==code||// Lo       HANGUL SYLLABLE GYU\n0xADF8==code||// Lo       HANGUL SYLLABLE GEU\n0xAE14==code||// Lo       HANGUL SYLLABLE GYI\n0xAE30==code||// Lo       HANGUL SYLLABLE GI\n0xAE4C==code||// Lo       HANGUL SYLLABLE GGA\n0xAE68==code||// Lo       HANGUL SYLLABLE GGAE\n0xAE84==code||// Lo       HANGUL SYLLABLE GGYA\n0xAEA0==code||// Lo       HANGUL SYLLABLE GGYAE\n0xAEBC==code||// Lo       HANGUL SYLLABLE GGEO\n0xAED8==code||// Lo       HANGUL SYLLABLE GGE\n0xAEF4==code||// Lo       HANGUL SYLLABLE GGYEO\n0xAF10==code||// Lo       HANGUL SYLLABLE GGYE\n0xAF2C==code||// Lo       HANGUL SYLLABLE GGO\n0xAF48==code||// Lo       HANGUL SYLLABLE GGWA\n0xAF64==code||// Lo       HANGUL SYLLABLE GGWAE\n0xAF80==code||// Lo       HANGUL SYLLABLE GGOE\n0xAF9C==code||// Lo       HANGUL SYLLABLE GGYO\n0xAFB8==code||// Lo       HANGUL SYLLABLE GGU\n0xAFD4==code||// Lo       HANGUL SYLLABLE GGWEO\n0xAFF0==code||// Lo       HANGUL SYLLABLE GGWE\n0xB00C==code||// Lo       HANGUL SYLLABLE GGWI\n0xB028==code||// Lo       HANGUL SYLLABLE GGYU\n0xB044==code||// Lo       HANGUL SYLLABLE GGEU\n0xB060==code||// Lo       HANGUL SYLLABLE GGYI\n0xB07C==code||// Lo       HANGUL SYLLABLE GGI\n0xB098==code||// Lo       HANGUL SYLLABLE NA\n0xB0B4==code||// Lo       HANGUL SYLLABLE NAE\n0xB0D0==code||// Lo       HANGUL SYLLABLE NYA\n0xB0EC==code||// Lo       HANGUL SYLLABLE NYAE\n0xB108==code||// Lo       HANGUL SYLLABLE NEO\n0xB124==code||// Lo       HANGUL SYLLABLE NE\n0xB140==code||// Lo       HANGUL SYLLABLE NYEO\n0xB15C==code||// Lo       HANGUL SYLLABLE NYE\n0xB178==code||// Lo       HANGUL SYLLABLE NO\n0xB194==code||// Lo       HANGUL SYLLABLE NWA\n0xB1B0==code||// Lo       HANGUL SYLLABLE NWAE\n0xB1CC==code||// Lo       HANGUL SYLLABLE NOE\n0xB1E8==code||// Lo       HANGUL SYLLABLE NYO\n0xB204==code||// Lo       HANGUL SYLLABLE NU\n0xB220==code||// Lo       HANGUL SYLLABLE NWEO\n0xB23C==code||// Lo       HANGUL SYLLABLE NWE\n0xB258==code||// Lo       HANGUL SYLLABLE NWI\n0xB274==code||// Lo       HANGUL SYLLABLE NYU\n0xB290==code||// Lo       HANGUL SYLLABLE NEU\n0xB2AC==code||// Lo       HANGUL SYLLABLE NYI\n0xB2C8==code||// Lo       HANGUL SYLLABLE NI\n0xB2E4==code||// Lo       HANGUL SYLLABLE DA\n0xB300==code||// Lo       HANGUL SYLLABLE DAE\n0xB31C==code||// Lo       HANGUL SYLLABLE DYA\n0xB338==code||// Lo       HANGUL SYLLABLE DYAE\n0xB354==code||// Lo       HANGUL SYLLABLE DEO\n0xB370==code||// Lo       HANGUL SYLLABLE DE\n0xB38C==code||// Lo       HANGUL SYLLABLE DYEO\n0xB3A8==code||// Lo       HANGUL SYLLABLE DYE\n0xB3C4==code||// Lo       HANGUL SYLLABLE DO\n0xB3E0==code||// Lo       HANGUL SYLLABLE DWA\n0xB3FC==code||// Lo       HANGUL SYLLABLE DWAE\n0xB418==code||// Lo       HANGUL SYLLABLE DOE\n0xB434==code||// Lo       HANGUL SYLLABLE DYO\n0xB450==code||// Lo       HANGUL SYLLABLE DU\n0xB46C==code||// Lo       HANGUL SYLLABLE DWEO\n0xB488==code||// Lo       HANGUL SYLLABLE DWE\n0xB4A4==code||// Lo       HANGUL SYLLABLE DWI\n0xB4C0==code||// Lo       HANGUL SYLLABLE DYU\n0xB4DC==code||// Lo       HANGUL SYLLABLE DEU\n0xB4F8==code||// Lo       HANGUL SYLLABLE DYI\n0xB514==code||// Lo       HANGUL SYLLABLE DI\n0xB530==code||// Lo       HANGUL SYLLABLE DDA\n0xB54C==code||// Lo       HANGUL SYLLABLE DDAE\n0xB568==code||// Lo       HANGUL SYLLABLE DDYA\n0xB584==code||// Lo       HANGUL SYLLABLE DDYAE\n0xB5A0==code||// Lo       HANGUL SYLLABLE DDEO\n0xB5BC==code||// Lo       HANGUL SYLLABLE DDE\n0xB5D8==code||// Lo       HANGUL SYLLABLE DDYEO\n0xB5F4==code||// Lo       HANGUL SYLLABLE DDYE\n0xB610==code||// Lo       HANGUL SYLLABLE DDO\n0xB62C==code||// Lo       HANGUL SYLLABLE DDWA\n0xB648==code||// Lo       HANGUL SYLLABLE DDWAE\n0xB664==code||// Lo       HANGUL SYLLABLE DDOE\n0xB680==code||// Lo       HANGUL SYLLABLE DDYO\n0xB69C==code||// Lo       HANGUL SYLLABLE DDU\n0xB6B8==code||// Lo       HANGUL SYLLABLE DDWEO\n0xB6D4==code||// Lo       HANGUL SYLLABLE DDWE\n0xB6F0==code||// Lo       HANGUL SYLLABLE DDWI\n0xB70C==code||// Lo       HANGUL SYLLABLE DDYU\n0xB728==code||// Lo       HANGUL SYLLABLE DDEU\n0xB744==code||// Lo       HANGUL SYLLABLE DDYI\n0xB760==code||// Lo       HANGUL SYLLABLE DDI\n0xB77C==code||// Lo       HANGUL SYLLABLE RA\n0xB798==code||// Lo       HANGUL SYLLABLE RAE\n0xB7B4==code||// Lo       HANGUL SYLLABLE RYA\n0xB7D0==code||// Lo       HANGUL SYLLABLE RYAE\n0xB7EC==code||// Lo       HANGUL SYLLABLE REO\n0xB808==code||// Lo       HANGUL SYLLABLE RE\n0xB824==code||// Lo       HANGUL SYLLABLE RYEO\n0xB840==code||// Lo       HANGUL SYLLABLE RYE\n0xB85C==code||// Lo       HANGUL SYLLABLE RO\n0xB878==code||// Lo       HANGUL SYLLABLE RWA\n0xB894==code||// Lo       HANGUL SYLLABLE RWAE\n0xB8B0==code||// Lo       HANGUL SYLLABLE ROE\n0xB8CC==code||// Lo       HANGUL SYLLABLE RYO\n0xB8E8==code||// Lo       HANGUL SYLLABLE RU\n0xB904==code||// Lo       HANGUL SYLLABLE RWEO\n0xB920==code||// Lo       HANGUL SYLLABLE RWE\n0xB93C==code||// Lo       HANGUL SYLLABLE RWI\n0xB958==code||// Lo       HANGUL SYLLABLE RYU\n0xB974==code||// Lo       HANGUL SYLLABLE REU\n0xB990==code||// Lo       HANGUL SYLLABLE RYI\n0xB9AC==code||// Lo       HANGUL SYLLABLE RI\n0xB9C8==code||// Lo       HANGUL SYLLABLE MA\n0xB9E4==code||// Lo       HANGUL SYLLABLE MAE\n0xBA00==code||// Lo       HANGUL SYLLABLE MYA\n0xBA1C==code||// Lo       HANGUL SYLLABLE MYAE\n0xBA38==code||// Lo       HANGUL SYLLABLE MEO\n0xBA54==code||// Lo       HANGUL SYLLABLE ME\n0xBA70==code||// Lo       HANGUL SYLLABLE MYEO\n0xBA8C==code||// Lo       HANGUL SYLLABLE MYE\n0xBAA8==code||// Lo       HANGUL SYLLABLE MO\n0xBAC4==code||// Lo       HANGUL SYLLABLE MWA\n0xBAE0==code||// Lo       HANGUL SYLLABLE MWAE\n0xBAFC==code||// Lo       HANGUL SYLLABLE MOE\n0xBB18==code||// Lo       HANGUL SYLLABLE MYO\n0xBB34==code||// Lo       HANGUL SYLLABLE MU\n0xBB50==code||// Lo       HANGUL SYLLABLE MWEO\n0xBB6C==code||// Lo       HANGUL SYLLABLE MWE\n0xBB88==code||// Lo       HANGUL SYLLABLE MWI\n0xBBA4==code||// Lo       HANGUL SYLLABLE MYU\n0xBBC0==code||// Lo       HANGUL SYLLABLE MEU\n0xBBDC==code||// Lo       HANGUL SYLLABLE MYI\n0xBBF8==code||// Lo       HANGUL SYLLABLE MI\n0xBC14==code||// Lo       HANGUL SYLLABLE BA\n0xBC30==code||// Lo       HANGUL SYLLABLE BAE\n0xBC4C==code||// Lo       HANGUL SYLLABLE BYA\n0xBC68==code||// Lo       HANGUL SYLLABLE BYAE\n0xBC84==code||// Lo       HANGUL SYLLABLE BEO\n0xBCA0==code||// Lo       HANGUL SYLLABLE BE\n0xBCBC==code||// Lo       HANGUL SYLLABLE BYEO\n0xBCD8==code||// Lo       HANGUL SYLLABLE BYE\n0xBCF4==code||// Lo       HANGUL SYLLABLE BO\n0xBD10==code||// Lo       HANGUL SYLLABLE BWA\n0xBD2C==code||// Lo       HANGUL SYLLABLE BWAE\n0xBD48==code||// Lo       HANGUL SYLLABLE BOE\n0xBD64==code||// Lo       HANGUL SYLLABLE BYO\n0xBD80==code||// Lo       HANGUL SYLLABLE BU\n0xBD9C==code||// Lo       HANGUL SYLLABLE BWEO\n0xBDB8==code||// Lo       HANGUL SYLLABLE BWE\n0xBDD4==code||// Lo       HANGUL SYLLABLE BWI\n0xBDF0==code||// Lo       HANGUL SYLLABLE BYU\n0xBE0C==code||// Lo       HANGUL SYLLABLE BEU\n0xBE28==code||// Lo       HANGUL SYLLABLE BYI\n0xBE44==code||// Lo       HANGUL SYLLABLE BI\n0xBE60==code||// Lo       HANGUL SYLLABLE BBA\n0xBE7C==code||// Lo       HANGUL SYLLABLE BBAE\n0xBE98==code||// Lo       HANGUL SYLLABLE BBYA\n0xBEB4==code||// Lo       HANGUL SYLLABLE BBYAE\n0xBED0==code||// Lo       HANGUL SYLLABLE BBEO\n0xBEEC==code||// Lo       HANGUL SYLLABLE BBE\n0xBF08==code||// Lo       HANGUL SYLLABLE BBYEO\n0xBF24==code||// Lo       HANGUL SYLLABLE BBYE\n0xBF40==code||// Lo       HANGUL SYLLABLE BBO\n0xBF5C==code||// Lo       HANGUL SYLLABLE BBWA\n0xBF78==code||// Lo       HANGUL SYLLABLE BBWAE\n0xBF94==code||// Lo       HANGUL SYLLABLE BBOE\n0xBFB0==code||// Lo       HANGUL SYLLABLE BBYO\n0xBFCC==code||// Lo       HANGUL SYLLABLE BBU\n0xBFE8==code||// Lo       HANGUL SYLLABLE BBWEO\n0xC004==code||// Lo       HANGUL SYLLABLE BBWE\n0xC020==code||// Lo       HANGUL SYLLABLE BBWI\n0xC03C==code||// Lo       HANGUL SYLLABLE BBYU\n0xC058==code||// Lo       HANGUL SYLLABLE BBEU\n0xC074==code||// Lo       HANGUL SYLLABLE BBYI\n0xC090==code||// Lo       HANGUL SYLLABLE BBI\n0xC0AC==code||// Lo       HANGUL SYLLABLE SA\n0xC0C8==code||// Lo       HANGUL SYLLABLE SAE\n0xC0E4==code||// Lo       HANGUL SYLLABLE SYA\n0xC100==code||// Lo       HANGUL SYLLABLE SYAE\n0xC11C==code||// Lo       HANGUL SYLLABLE SEO\n0xC138==code||// Lo       HANGUL SYLLABLE SE\n0xC154==code||// Lo       HANGUL SYLLABLE SYEO\n0xC170==code||// Lo       HANGUL SYLLABLE SYE\n0xC18C==code||// Lo       HANGUL SYLLABLE SO\n0xC1A8==code||// Lo       HANGUL SYLLABLE SWA\n0xC1C4==code||// Lo       HANGUL SYLLABLE SWAE\n0xC1E0==code||// Lo       HANGUL SYLLABLE SOE\n0xC1FC==code||// Lo       HANGUL SYLLABLE SYO\n0xC218==code||// Lo       HANGUL SYLLABLE SU\n0xC234==code||// Lo       HANGUL SYLLABLE SWEO\n0xC250==code||// Lo       HANGUL SYLLABLE SWE\n0xC26C==code||// Lo       HANGUL SYLLABLE SWI\n0xC288==code||// Lo       HANGUL SYLLABLE SYU\n0xC2A4==code||// Lo       HANGUL SYLLABLE SEU\n0xC2C0==code||// Lo       HANGUL SYLLABLE SYI\n0xC2DC==code||// Lo       HANGUL SYLLABLE SI\n0xC2F8==code||// Lo       HANGUL SYLLABLE SSA\n0xC314==code||// Lo       HANGUL SYLLABLE SSAE\n0xC330==code||// Lo       HANGUL SYLLABLE SSYA\n0xC34C==code||// Lo       HANGUL SYLLABLE SSYAE\n0xC368==code||// Lo       HANGUL SYLLABLE SSEO\n0xC384==code||// Lo       HANGUL SYLLABLE SSE\n0xC3A0==code||// Lo       HANGUL SYLLABLE SSYEO\n0xC3BC==code||// Lo       HANGUL SYLLABLE SSYE\n0xC3D8==code||// Lo       HANGUL SYLLABLE SSO\n0xC3F4==code||// Lo       HANGUL SYLLABLE SSWA\n0xC410==code||// Lo       HANGUL SYLLABLE SSWAE\n0xC42C==code||// Lo       HANGUL SYLLABLE SSOE\n0xC448==code||// Lo       HANGUL SYLLABLE SSYO\n0xC464==code||// Lo       HANGUL SYLLABLE SSU\n0xC480==code||// Lo       HANGUL SYLLABLE SSWEO\n0xC49C==code||// Lo       HANGUL SYLLABLE SSWE\n0xC4B8==code||// Lo       HANGUL SYLLABLE SSWI\n0xC4D4==code||// Lo       HANGUL SYLLABLE SSYU\n0xC4F0==code||// Lo       HANGUL SYLLABLE SSEU\n0xC50C==code||// Lo       HANGUL SYLLABLE SSYI\n0xC528==code||// Lo       HANGUL SYLLABLE SSI\n0xC544==code||// Lo       HANGUL SYLLABLE A\n0xC560==code||// Lo       HANGUL SYLLABLE AE\n0xC57C==code||// Lo       HANGUL SYLLABLE YA\n0xC598==code||// Lo       HANGUL SYLLABLE YAE\n0xC5B4==code||// Lo       HANGUL SYLLABLE EO\n0xC5D0==code||// Lo       HANGUL SYLLABLE E\n0xC5EC==code||// Lo       HANGUL SYLLABLE YEO\n0xC608==code||// Lo       HANGUL SYLLABLE YE\n0xC624==code||// Lo       HANGUL SYLLABLE O\n0xC640==code||// Lo       HANGUL SYLLABLE WA\n0xC65C==code||// Lo       HANGUL SYLLABLE WAE\n0xC678==code||// Lo       HANGUL SYLLABLE OE\n0xC694==code||// Lo       HANGUL SYLLABLE YO\n0xC6B0==code||// Lo       HANGUL SYLLABLE U\n0xC6CC==code||// Lo       HANGUL SYLLABLE WEO\n0xC6E8==code||// Lo       HANGUL SYLLABLE WE\n0xC704==code||// Lo       HANGUL SYLLABLE WI\n0xC720==code||// Lo       HANGUL SYLLABLE YU\n0xC73C==code||// Lo       HANGUL SYLLABLE EU\n0xC758==code||// Lo       HANGUL SYLLABLE YI\n0xC774==code||// Lo       HANGUL SYLLABLE I\n0xC790==code||// Lo       HANGUL SYLLABLE JA\n0xC7AC==code||// Lo       HANGUL SYLLABLE JAE\n0xC7C8==code||// Lo       HANGUL SYLLABLE JYA\n0xC7E4==code||// Lo       HANGUL SYLLABLE JYAE\n0xC800==code||// Lo       HANGUL SYLLABLE JEO\n0xC81C==code||// Lo       HANGUL SYLLABLE JE\n0xC838==code||// Lo       HANGUL SYLLABLE JYEO\n0xC854==code||// Lo       HANGUL SYLLABLE JYE\n0xC870==code||// Lo       HANGUL SYLLABLE JO\n0xC88C==code||// Lo       HANGUL SYLLABLE JWA\n0xC8A8==code||// Lo       HANGUL SYLLABLE JWAE\n0xC8C4==code||// Lo       HANGUL SYLLABLE JOE\n0xC8E0==code||// Lo       HANGUL SYLLABLE JYO\n0xC8FC==code||// Lo       HANGUL SYLLABLE JU\n0xC918==code||// Lo       HANGUL SYLLABLE JWEO\n0xC934==code||// Lo       HANGUL SYLLABLE JWE\n0xC950==code||// Lo       HANGUL SYLLABLE JWI\n0xC96C==code||// Lo       HANGUL SYLLABLE JYU\n0xC988==code||// Lo       HANGUL SYLLABLE JEU\n0xC9A4==code||// Lo       HANGUL SYLLABLE JYI\n0xC9C0==code||// Lo       HANGUL SYLLABLE JI\n0xC9DC==code||// Lo       HANGUL SYLLABLE JJA\n0xC9F8==code||// Lo       HANGUL SYLLABLE JJAE\n0xCA14==code||// Lo       HANGUL SYLLABLE JJYA\n0xCA30==code||// Lo       HANGUL SYLLABLE JJYAE\n0xCA4C==code||// Lo       HANGUL SYLLABLE JJEO\n0xCA68==code||// Lo       HANGUL SYLLABLE JJE\n0xCA84==code||// Lo       HANGUL SYLLABLE JJYEO\n0xCAA0==code||// Lo       HANGUL SYLLABLE JJYE\n0xCABC==code||// Lo       HANGUL SYLLABLE JJO\n0xCAD8==code||// Lo       HANGUL SYLLABLE JJWA\n0xCAF4==code||// Lo       HANGUL SYLLABLE JJWAE\n0xCB10==code||// Lo       HANGUL SYLLABLE JJOE\n0xCB2C==code||// Lo       HANGUL SYLLABLE JJYO\n0xCB48==code||// Lo       HANGUL SYLLABLE JJU\n0xCB64==code||// Lo       HANGUL SYLLABLE JJWEO\n0xCB80==code||// Lo       HANGUL SYLLABLE JJWE\n0xCB9C==code||// Lo       HANGUL SYLLABLE JJWI\n0xCBB8==code||// Lo       HANGUL SYLLABLE JJYU\n0xCBD4==code||// Lo       HANGUL SYLLABLE JJEU\n0xCBF0==code||// Lo       HANGUL SYLLABLE JJYI\n0xCC0C==code||// Lo       HANGUL SYLLABLE JJI\n0xCC28==code||// Lo       HANGUL SYLLABLE CA\n0xCC44==code||// Lo       HANGUL SYLLABLE CAE\n0xCC60==code||// Lo       HANGUL SYLLABLE CYA\n0xCC7C==code||// Lo       HANGUL SYLLABLE CYAE\n0xCC98==code||// Lo       HANGUL SYLLABLE CEO\n0xCCB4==code||// Lo       HANGUL SYLLABLE CE\n0xCCD0==code||// Lo       HANGUL SYLLABLE CYEO\n0xCCEC==code||// Lo       HANGUL SYLLABLE CYE\n0xCD08==code||// Lo       HANGUL SYLLABLE CO\n0xCD24==code||// Lo       HANGUL SYLLABLE CWA\n0xCD40==code||// Lo       HANGUL SYLLABLE CWAE\n0xCD5C==code||// Lo       HANGUL SYLLABLE COE\n0xCD78==code||// Lo       HANGUL SYLLABLE CYO\n0xCD94==code||// Lo       HANGUL SYLLABLE CU\n0xCDB0==code||// Lo       HANGUL SYLLABLE CWEO\n0xCDCC==code||// Lo       HANGUL SYLLABLE CWE\n0xCDE8==code||// Lo       HANGUL SYLLABLE CWI\n0xCE04==code||// Lo       HANGUL SYLLABLE CYU\n0xCE20==code||// Lo       HANGUL SYLLABLE CEU\n0xCE3C==code||// Lo       HANGUL SYLLABLE CYI\n0xCE58==code||// Lo       HANGUL SYLLABLE CI\n0xCE74==code||// Lo       HANGUL SYLLABLE KA\n0xCE90==code||// Lo       HANGUL SYLLABLE KAE\n0xCEAC==code||// Lo       HANGUL SYLLABLE KYA\n0xCEC8==code||// Lo       HANGUL SYLLABLE KYAE\n0xCEE4==code||// Lo       HANGUL SYLLABLE KEO\n0xCF00==code||// Lo       HANGUL SYLLABLE KE\n0xCF1C==code||// Lo       HANGUL SYLLABLE KYEO\n0xCF38==code||// Lo       HANGUL SYLLABLE KYE\n0xCF54==code||// Lo       HANGUL SYLLABLE KO\n0xCF70==code||// Lo       HANGUL SYLLABLE KWA\n0xCF8C==code||// Lo       HANGUL SYLLABLE KWAE\n0xCFA8==code||// Lo       HANGUL SYLLABLE KOE\n0xCFC4==code||// Lo       HANGUL SYLLABLE KYO\n0xCFE0==code||// Lo       HANGUL SYLLABLE KU\n0xCFFC==code||// Lo       HANGUL SYLLABLE KWEO\n0xD018==code||// Lo       HANGUL SYLLABLE KWE\n0xD034==code||// Lo       HANGUL SYLLABLE KWI\n0xD050==code||// Lo       HANGUL SYLLABLE KYU\n0xD06C==code||// Lo       HANGUL SYLLABLE KEU\n0xD088==code||// Lo       HANGUL SYLLABLE KYI\n0xD0A4==code||// Lo       HANGUL SYLLABLE KI\n0xD0C0==code||// Lo       HANGUL SYLLABLE TA\n0xD0DC==code||// Lo       HANGUL SYLLABLE TAE\n0xD0F8==code||// Lo       HANGUL SYLLABLE TYA\n0xD114==code||// Lo       HANGUL SYLLABLE TYAE\n0xD130==code||// Lo       HANGUL SYLLABLE TEO\n0xD14C==code||// Lo       HANGUL SYLLABLE TE\n0xD168==code||// Lo       HANGUL SYLLABLE TYEO\n0xD184==code||// Lo       HANGUL SYLLABLE TYE\n0xD1A0==code||// Lo       HANGUL SYLLABLE TO\n0xD1BC==code||// Lo       HANGUL SYLLABLE TWA\n0xD1D8==code||// Lo       HANGUL SYLLABLE TWAE\n0xD1F4==code||// Lo       HANGUL SYLLABLE TOE\n0xD210==code||// Lo       HANGUL SYLLABLE TYO\n0xD22C==code||// Lo       HANGUL SYLLABLE TU\n0xD248==code||// Lo       HANGUL SYLLABLE TWEO\n0xD264==code||// Lo       HANGUL SYLLABLE TWE\n0xD280==code||// Lo       HANGUL SYLLABLE TWI\n0xD29C==code||// Lo       HANGUL SYLLABLE TYU\n0xD2B8==code||// Lo       HANGUL SYLLABLE TEU\n0xD2D4==code||// Lo       HANGUL SYLLABLE TYI\n0xD2F0==code||// Lo       HANGUL SYLLABLE TI\n0xD30C==code||// Lo       HANGUL SYLLABLE PA\n0xD328==code||// Lo       HANGUL SYLLABLE PAE\n0xD344==code||// Lo       HANGUL SYLLABLE PYA\n0xD360==code||// Lo       HANGUL SYLLABLE PYAE\n0xD37C==code||// Lo       HANGUL SYLLABLE PEO\n0xD398==code||// Lo       HANGUL SYLLABLE PE\n0xD3B4==code||// Lo       HANGUL SYLLABLE PYEO\n0xD3D0==code||// Lo       HANGUL SYLLABLE PYE\n0xD3EC==code||// Lo       HANGUL SYLLABLE PO\n0xD408==code||// Lo       HANGUL SYLLABLE PWA\n0xD424==code||// Lo       HANGUL SYLLABLE PWAE\n0xD440==code||// Lo       HANGUL SYLLABLE POE\n0xD45C==code||// Lo       HANGUL SYLLABLE PYO\n0xD478==code||// Lo       HANGUL SYLLABLE PU\n0xD494==code||// Lo       HANGUL SYLLABLE PWEO\n0xD4B0==code||// Lo       HANGUL SYLLABLE PWE\n0xD4CC==code||// Lo       HANGUL SYLLABLE PWI\n0xD4E8==code||// Lo       HANGUL SYLLABLE PYU\n0xD504==code||// Lo       HANGUL SYLLABLE PEU\n0xD520==code||// Lo       HANGUL SYLLABLE PYI\n0xD53C==code||// Lo       HANGUL SYLLABLE PI\n0xD558==code||// Lo       HANGUL SYLLABLE HA\n0xD574==code||// Lo       HANGUL SYLLABLE HAE\n0xD590==code||// Lo       HANGUL SYLLABLE HYA\n0xD5AC==code||// Lo       HANGUL SYLLABLE HYAE\n0xD5C8==code||// Lo       HANGUL SYLLABLE HEO\n0xD5E4==code||// Lo       HANGUL SYLLABLE HE\n0xD600==code||// Lo       HANGUL SYLLABLE HYEO\n0xD61C==code||// Lo       HANGUL SYLLABLE HYE\n0xD638==code||// Lo       HANGUL SYLLABLE HO\n0xD654==code||// Lo       HANGUL SYLLABLE HWA\n0xD670==code||// Lo       HANGUL SYLLABLE HWAE\n0xD68C==code||// Lo       HANGUL SYLLABLE HOE\n0xD6A8==code||// Lo       HANGUL SYLLABLE HYO\n0xD6C4==code||// Lo       HANGUL SYLLABLE HU\n0xD6E0==code||// Lo       HANGUL SYLLABLE HWEO\n0xD6FC==code||// Lo       HANGUL SYLLABLE HWE\n0xD718==code||// Lo       HANGUL SYLLABLE HWI\n0xD734==code||// Lo       HANGUL SYLLABLE HYU\n0xD750==code||// Lo       HANGUL SYLLABLE HEU\n0xD76C==code||// Lo       HANGUL SYLLABLE HYI\n0xD788==code// Lo       HANGUL SYLLABLE HI\n){return LV;}if(0xAC01<=code&&code<=0xAC1B||// Lo  [27] HANGUL SYLLABLE GAG..HANGUL SYLLABLE GAH\n0xAC1D<=code&&code<=0xAC37||// Lo  [27] HANGUL SYLLABLE GAEG..HANGUL SYLLABLE GAEH\n0xAC39<=code&&code<=0xAC53||// Lo  [27] HANGUL SYLLABLE GYAG..HANGUL SYLLABLE GYAH\n0xAC55<=code&&code<=0xAC6F||// Lo  [27] HANGUL SYLLABLE GYAEG..HANGUL SYLLABLE GYAEH\n0xAC71<=code&&code<=0xAC8B||// Lo  [27] HANGUL SYLLABLE GEOG..HANGUL SYLLABLE GEOH\n0xAC8D<=code&&code<=0xACA7||// Lo  [27] HANGUL SYLLABLE GEG..HANGUL SYLLABLE GEH\n0xACA9<=code&&code<=0xACC3||// Lo  [27] HANGUL SYLLABLE GYEOG..HANGUL SYLLABLE GYEOH\n0xACC5<=code&&code<=0xACDF||// Lo  [27] HANGUL SYLLABLE GYEG..HANGUL SYLLABLE GYEH\n0xACE1<=code&&code<=0xACFB||// Lo  [27] HANGUL SYLLABLE GOG..HANGUL SYLLABLE GOH\n0xACFD<=code&&code<=0xAD17||// Lo  [27] HANGUL SYLLABLE GWAG..HANGUL SYLLABLE GWAH\n0xAD19<=code&&code<=0xAD33||// Lo  [27] HANGUL SYLLABLE GWAEG..HANGUL SYLLABLE GWAEH\n0xAD35<=code&&code<=0xAD4F||// Lo  [27] HANGUL SYLLABLE GOEG..HANGUL SYLLABLE GOEH\n0xAD51<=code&&code<=0xAD6B||// Lo  [27] HANGUL SYLLABLE GYOG..HANGUL SYLLABLE GYOH\n0xAD6D<=code&&code<=0xAD87||// Lo  [27] HANGUL SYLLABLE GUG..HANGUL SYLLABLE GUH\n0xAD89<=code&&code<=0xADA3||// Lo  [27] HANGUL SYLLABLE GWEOG..HANGUL SYLLABLE GWEOH\n0xADA5<=code&&code<=0xADBF||// Lo  [27] HANGUL SYLLABLE GWEG..HANGUL SYLLABLE GWEH\n0xADC1<=code&&code<=0xADDB||// Lo  [27] HANGUL SYLLABLE GWIG..HANGUL SYLLABLE GWIH\n0xADDD<=code&&code<=0xADF7||// Lo  [27] HANGUL SYLLABLE GYUG..HANGUL SYLLABLE GYUH\n0xADF9<=code&&code<=0xAE13||// Lo  [27] HANGUL SYLLABLE GEUG..HANGUL SYLLABLE GEUH\n0xAE15<=code&&code<=0xAE2F||// Lo  [27] HANGUL SYLLABLE GYIG..HANGUL SYLLABLE GYIH\n0xAE31<=code&&code<=0xAE4B||// Lo  [27] HANGUL SYLLABLE GIG..HANGUL SYLLABLE GIH\n0xAE4D<=code&&code<=0xAE67||// Lo  [27] HANGUL SYLLABLE GGAG..HANGUL SYLLABLE GGAH\n0xAE69<=code&&code<=0xAE83||// Lo  [27] HANGUL SYLLABLE GGAEG..HANGUL SYLLABLE GGAEH\n0xAE85<=code&&code<=0xAE9F||// Lo  [27] HANGUL SYLLABLE GGYAG..HANGUL SYLLABLE GGYAH\n0xAEA1<=code&&code<=0xAEBB||// Lo  [27] HANGUL SYLLABLE GGYAEG..HANGUL SYLLABLE GGYAEH\n0xAEBD<=code&&code<=0xAED7||// Lo  [27] HANGUL SYLLABLE GGEOG..HANGUL SYLLABLE GGEOH\n0xAED9<=code&&code<=0xAEF3||// Lo  [27] HANGUL SYLLABLE GGEG..HANGUL SYLLABLE GGEH\n0xAEF5<=code&&code<=0xAF0F||// Lo  [27] HANGUL SYLLABLE GGYEOG..HANGUL SYLLABLE GGYEOH\n0xAF11<=code&&code<=0xAF2B||// Lo  [27] HANGUL SYLLABLE GGYEG..HANGUL SYLLABLE GGYEH\n0xAF2D<=code&&code<=0xAF47||// Lo  [27] HANGUL SYLLABLE GGOG..HANGUL SYLLABLE GGOH\n0xAF49<=code&&code<=0xAF63||// Lo  [27] HANGUL SYLLABLE GGWAG..HANGUL SYLLABLE GGWAH\n0xAF65<=code&&code<=0xAF7F||// Lo  [27] HANGUL SYLLABLE GGWAEG..HANGUL SYLLABLE GGWAEH\n0xAF81<=code&&code<=0xAF9B||// Lo  [27] HANGUL SYLLABLE GGOEG..HANGUL SYLLABLE GGOEH\n0xAF9D<=code&&code<=0xAFB7||// Lo  [27] HANGUL SYLLABLE GGYOG..HANGUL SYLLABLE GGYOH\n0xAFB9<=code&&code<=0xAFD3||// Lo  [27] HANGUL SYLLABLE GGUG..HANGUL SYLLABLE GGUH\n0xAFD5<=code&&code<=0xAFEF||// Lo  [27] HANGUL SYLLABLE GGWEOG..HANGUL SYLLABLE GGWEOH\n0xAFF1<=code&&code<=0xB00B||// Lo  [27] HANGUL SYLLABLE GGWEG..HANGUL SYLLABLE GGWEH\n0xB00D<=code&&code<=0xB027||// Lo  [27] HANGUL SYLLABLE GGWIG..HANGUL SYLLABLE GGWIH\n0xB029<=code&&code<=0xB043||// Lo  [27] HANGUL SYLLABLE GGYUG..HANGUL SYLLABLE GGYUH\n0xB045<=code&&code<=0xB05F||// Lo  [27] HANGUL SYLLABLE GGEUG..HANGUL SYLLABLE GGEUH\n0xB061<=code&&code<=0xB07B||// Lo  [27] HANGUL SYLLABLE GGYIG..HANGUL SYLLABLE GGYIH\n0xB07D<=code&&code<=0xB097||// Lo  [27] HANGUL SYLLABLE GGIG..HANGUL SYLLABLE GGIH\n0xB099<=code&&code<=0xB0B3||// Lo  [27] HANGUL SYLLABLE NAG..HANGUL SYLLABLE NAH\n0xB0B5<=code&&code<=0xB0CF||// Lo  [27] HANGUL SYLLABLE NAEG..HANGUL SYLLABLE NAEH\n0xB0D1<=code&&code<=0xB0EB||// Lo  [27] HANGUL SYLLABLE NYAG..HANGUL SYLLABLE NYAH\n0xB0ED<=code&&code<=0xB107||// Lo  [27] HANGUL SYLLABLE NYAEG..HANGUL SYLLABLE NYAEH\n0xB109<=code&&code<=0xB123||// Lo  [27] HANGUL SYLLABLE NEOG..HANGUL SYLLABLE NEOH\n0xB125<=code&&code<=0xB13F||// Lo  [27] HANGUL SYLLABLE NEG..HANGUL SYLLABLE NEH\n0xB141<=code&&code<=0xB15B||// Lo  [27] HANGUL SYLLABLE NYEOG..HANGUL SYLLABLE NYEOH\n0xB15D<=code&&code<=0xB177||// Lo  [27] HANGUL SYLLABLE NYEG..HANGUL SYLLABLE NYEH\n0xB179<=code&&code<=0xB193||// Lo  [27] HANGUL SYLLABLE NOG..HANGUL SYLLABLE NOH\n0xB195<=code&&code<=0xB1AF||// Lo  [27] HANGUL SYLLABLE NWAG..HANGUL SYLLABLE NWAH\n0xB1B1<=code&&code<=0xB1CB||// Lo  [27] HANGUL SYLLABLE NWAEG..HANGUL SYLLABLE NWAEH\n0xB1CD<=code&&code<=0xB1E7||// Lo  [27] HANGUL SYLLABLE NOEG..HANGUL SYLLABLE NOEH\n0xB1E9<=code&&code<=0xB203||// Lo  [27] HANGUL SYLLABLE NYOG..HANGUL SYLLABLE NYOH\n0xB205<=code&&code<=0xB21F||// Lo  [27] HANGUL SYLLABLE NUG..HANGUL SYLLABLE NUH\n0xB221<=code&&code<=0xB23B||// Lo  [27] HANGUL SYLLABLE NWEOG..HANGUL SYLLABLE NWEOH\n0xB23D<=code&&code<=0xB257||// Lo  [27] HANGUL SYLLABLE NWEG..HANGUL SYLLABLE NWEH\n0xB259<=code&&code<=0xB273||// Lo  [27] HANGUL SYLLABLE NWIG..HANGUL SYLLABLE NWIH\n0xB275<=code&&code<=0xB28F||// Lo  [27] HANGUL SYLLABLE NYUG..HANGUL SYLLABLE NYUH\n0xB291<=code&&code<=0xB2AB||// Lo  [27] HANGUL SYLLABLE NEUG..HANGUL SYLLABLE NEUH\n0xB2AD<=code&&code<=0xB2C7||// Lo  [27] HANGUL SYLLABLE NYIG..HANGUL SYLLABLE NYIH\n0xB2C9<=code&&code<=0xB2E3||// Lo  [27] HANGUL SYLLABLE NIG..HANGUL SYLLABLE NIH\n0xB2E5<=code&&code<=0xB2FF||// Lo  [27] HANGUL SYLLABLE DAG..HANGUL SYLLABLE DAH\n0xB301<=code&&code<=0xB31B||// Lo  [27] HANGUL SYLLABLE DAEG..HANGUL SYLLABLE DAEH\n0xB31D<=code&&code<=0xB337||// Lo  [27] HANGUL SYLLABLE DYAG..HANGUL SYLLABLE DYAH\n0xB339<=code&&code<=0xB353||// Lo  [27] HANGUL SYLLABLE DYAEG..HANGUL SYLLABLE DYAEH\n0xB355<=code&&code<=0xB36F||// Lo  [27] HANGUL SYLLABLE DEOG..HANGUL SYLLABLE DEOH\n0xB371<=code&&code<=0xB38B||// Lo  [27] HANGUL SYLLABLE DEG..HANGUL SYLLABLE DEH\n0xB38D<=code&&code<=0xB3A7||// Lo  [27] HANGUL SYLLABLE DYEOG..HANGUL SYLLABLE DYEOH\n0xB3A9<=code&&code<=0xB3C3||// Lo  [27] HANGUL SYLLABLE DYEG..HANGUL SYLLABLE DYEH\n0xB3C5<=code&&code<=0xB3DF||// Lo  [27] HANGUL SYLLABLE DOG..HANGUL SYLLABLE DOH\n0xB3E1<=code&&code<=0xB3FB||// Lo  [27] HANGUL SYLLABLE DWAG..HANGUL SYLLABLE DWAH\n0xB3FD<=code&&code<=0xB417||// Lo  [27] HANGUL SYLLABLE DWAEG..HANGUL SYLLABLE DWAEH\n0xB419<=code&&code<=0xB433||// Lo  [27] HANGUL SYLLABLE DOEG..HANGUL SYLLABLE DOEH\n0xB435<=code&&code<=0xB44F||// Lo  [27] HANGUL SYLLABLE DYOG..HANGUL SYLLABLE DYOH\n0xB451<=code&&code<=0xB46B||// Lo  [27] HANGUL SYLLABLE DUG..HANGUL SYLLABLE DUH\n0xB46D<=code&&code<=0xB487||// Lo  [27] HANGUL SYLLABLE DWEOG..HANGUL SYLLABLE DWEOH\n0xB489<=code&&code<=0xB4A3||// Lo  [27] HANGUL SYLLABLE DWEG..HANGUL SYLLABLE DWEH\n0xB4A5<=code&&code<=0xB4BF||// Lo  [27] HANGUL SYLLABLE DWIG..HANGUL SYLLABLE DWIH\n0xB4C1<=code&&code<=0xB4DB||// Lo  [27] HANGUL SYLLABLE DYUG..HANGUL SYLLABLE DYUH\n0xB4DD<=code&&code<=0xB4F7||// Lo  [27] HANGUL SYLLABLE DEUG..HANGUL SYLLABLE DEUH\n0xB4F9<=code&&code<=0xB513||// Lo  [27] HANGUL SYLLABLE DYIG..HANGUL SYLLABLE DYIH\n0xB515<=code&&code<=0xB52F||// Lo  [27] HANGUL SYLLABLE DIG..HANGUL SYLLABLE DIH\n0xB531<=code&&code<=0xB54B||// Lo  [27] HANGUL SYLLABLE DDAG..HANGUL SYLLABLE DDAH\n0xB54D<=code&&code<=0xB567||// Lo  [27] HANGUL SYLLABLE DDAEG..HANGUL SYLLABLE DDAEH\n0xB569<=code&&code<=0xB583||// Lo  [27] HANGUL SYLLABLE DDYAG..HANGUL SYLLABLE DDYAH\n0xB585<=code&&code<=0xB59F||// Lo  [27] HANGUL SYLLABLE DDYAEG..HANGUL SYLLABLE DDYAEH\n0xB5A1<=code&&code<=0xB5BB||// Lo  [27] HANGUL SYLLABLE DDEOG..HANGUL SYLLABLE DDEOH\n0xB5BD<=code&&code<=0xB5D7||// Lo  [27] HANGUL SYLLABLE DDEG..HANGUL SYLLABLE DDEH\n0xB5D9<=code&&code<=0xB5F3||// Lo  [27] HANGUL SYLLABLE DDYEOG..HANGUL SYLLABLE DDYEOH\n0xB5F5<=code&&code<=0xB60F||// Lo  [27] HANGUL SYLLABLE DDYEG..HANGUL SYLLABLE DDYEH\n0xB611<=code&&code<=0xB62B||// Lo  [27] HANGUL SYLLABLE DDOG..HANGUL SYLLABLE DDOH\n0xB62D<=code&&code<=0xB647||// Lo  [27] HANGUL SYLLABLE DDWAG..HANGUL SYLLABLE DDWAH\n0xB649<=code&&code<=0xB663||// Lo  [27] HANGUL SYLLABLE DDWAEG..HANGUL SYLLABLE DDWAEH\n0xB665<=code&&code<=0xB67F||// Lo  [27] HANGUL SYLLABLE DDOEG..HANGUL SYLLABLE DDOEH\n0xB681<=code&&code<=0xB69B||// Lo  [27] HANGUL SYLLABLE DDYOG..HANGUL SYLLABLE DDYOH\n0xB69D<=code&&code<=0xB6B7||// Lo  [27] HANGUL SYLLABLE DDUG..HANGUL SYLLABLE DDUH\n0xB6B9<=code&&code<=0xB6D3||// Lo  [27] HANGUL SYLLABLE DDWEOG..HANGUL SYLLABLE DDWEOH\n0xB6D5<=code&&code<=0xB6EF||// Lo  [27] HANGUL SYLLABLE DDWEG..HANGUL SYLLABLE DDWEH\n0xB6F1<=code&&code<=0xB70B||// Lo  [27] HANGUL SYLLABLE DDWIG..HANGUL SYLLABLE DDWIH\n0xB70D<=code&&code<=0xB727||// Lo  [27] HANGUL SYLLABLE DDYUG..HANGUL SYLLABLE DDYUH\n0xB729<=code&&code<=0xB743||// Lo  [27] HANGUL SYLLABLE DDEUG..HANGUL SYLLABLE DDEUH\n0xB745<=code&&code<=0xB75F||// Lo  [27] HANGUL SYLLABLE DDYIG..HANGUL SYLLABLE DDYIH\n0xB761<=code&&code<=0xB77B||// Lo  [27] HANGUL SYLLABLE DDIG..HANGUL SYLLABLE DDIH\n0xB77D<=code&&code<=0xB797||// Lo  [27] HANGUL SYLLABLE RAG..HANGUL SYLLABLE RAH\n0xB799<=code&&code<=0xB7B3||// Lo  [27] HANGUL SYLLABLE RAEG..HANGUL SYLLABLE RAEH\n0xB7B5<=code&&code<=0xB7CF||// Lo  [27] HANGUL SYLLABLE RYAG..HANGUL SYLLABLE RYAH\n0xB7D1<=code&&code<=0xB7EB||// Lo  [27] HANGUL SYLLABLE RYAEG..HANGUL SYLLABLE RYAEH\n0xB7ED<=code&&code<=0xB807||// Lo  [27] HANGUL SYLLABLE REOG..HANGUL SYLLABLE REOH\n0xB809<=code&&code<=0xB823||// Lo  [27] HANGUL SYLLABLE REG..HANGUL SYLLABLE REH\n0xB825<=code&&code<=0xB83F||// Lo  [27] HANGUL SYLLABLE RYEOG..HANGUL SYLLABLE RYEOH\n0xB841<=code&&code<=0xB85B||// Lo  [27] HANGUL SYLLABLE RYEG..HANGUL SYLLABLE RYEH\n0xB85D<=code&&code<=0xB877||// Lo  [27] HANGUL SYLLABLE ROG..HANGUL SYLLABLE ROH\n0xB879<=code&&code<=0xB893||// Lo  [27] HANGUL SYLLABLE RWAG..HANGUL SYLLABLE RWAH\n0xB895<=code&&code<=0xB8AF||// Lo  [27] HANGUL SYLLABLE RWAEG..HANGUL SYLLABLE RWAEH\n0xB8B1<=code&&code<=0xB8CB||// Lo  [27] HANGUL SYLLABLE ROEG..HANGUL SYLLABLE ROEH\n0xB8CD<=code&&code<=0xB8E7||// Lo  [27] HANGUL SYLLABLE RYOG..HANGUL SYLLABLE RYOH\n0xB8E9<=code&&code<=0xB903||// Lo  [27] HANGUL SYLLABLE RUG..HANGUL SYLLABLE RUH\n0xB905<=code&&code<=0xB91F||// Lo  [27] HANGUL SYLLABLE RWEOG..HANGUL SYLLABLE RWEOH\n0xB921<=code&&code<=0xB93B||// Lo  [27] HANGUL SYLLABLE RWEG..HANGUL SYLLABLE RWEH\n0xB93D<=code&&code<=0xB957||// Lo  [27] HANGUL SYLLABLE RWIG..HANGUL SYLLABLE RWIH\n0xB959<=code&&code<=0xB973||// Lo  [27] HANGUL SYLLABLE RYUG..HANGUL SYLLABLE RYUH\n0xB975<=code&&code<=0xB98F||// Lo  [27] HANGUL SYLLABLE REUG..HANGUL SYLLABLE REUH\n0xB991<=code&&code<=0xB9AB||// Lo  [27] HANGUL SYLLABLE RYIG..HANGUL SYLLABLE RYIH\n0xB9AD<=code&&code<=0xB9C7||// Lo  [27] HANGUL SYLLABLE RIG..HANGUL SYLLABLE RIH\n0xB9C9<=code&&code<=0xB9E3||// Lo  [27] HANGUL SYLLABLE MAG..HANGUL SYLLABLE MAH\n0xB9E5<=code&&code<=0xB9FF||// Lo  [27] HANGUL SYLLABLE MAEG..HANGUL SYLLABLE MAEH\n0xBA01<=code&&code<=0xBA1B||// Lo  [27] HANGUL SYLLABLE MYAG..HANGUL SYLLABLE MYAH\n0xBA1D<=code&&code<=0xBA37||// Lo  [27] HANGUL SYLLABLE MYAEG..HANGUL SYLLABLE MYAEH\n0xBA39<=code&&code<=0xBA53||// Lo  [27] HANGUL SYLLABLE MEOG..HANGUL SYLLABLE MEOH\n0xBA55<=code&&code<=0xBA6F||// Lo  [27] HANGUL SYLLABLE MEG..HANGUL SYLLABLE MEH\n0xBA71<=code&&code<=0xBA8B||// Lo  [27] HANGUL SYLLABLE MYEOG..HANGUL SYLLABLE MYEOH\n0xBA8D<=code&&code<=0xBAA7||// Lo  [27] HANGUL SYLLABLE MYEG..HANGUL SYLLABLE MYEH\n0xBAA9<=code&&code<=0xBAC3||// Lo  [27] HANGUL SYLLABLE MOG..HANGUL SYLLABLE MOH\n0xBAC5<=code&&code<=0xBADF||// Lo  [27] HANGUL SYLLABLE MWAG..HANGUL SYLLABLE MWAH\n0xBAE1<=code&&code<=0xBAFB||// Lo  [27] HANGUL SYLLABLE MWAEG..HANGUL SYLLABLE MWAEH\n0xBAFD<=code&&code<=0xBB17||// Lo  [27] HANGUL SYLLABLE MOEG..HANGUL SYLLABLE MOEH\n0xBB19<=code&&code<=0xBB33||// Lo  [27] HANGUL SYLLABLE MYOG..HANGUL SYLLABLE MYOH\n0xBB35<=code&&code<=0xBB4F||// Lo  [27] HANGUL SYLLABLE MUG..HANGUL SYLLABLE MUH\n0xBB51<=code&&code<=0xBB6B||// Lo  [27] HANGUL SYLLABLE MWEOG..HANGUL SYLLABLE MWEOH\n0xBB6D<=code&&code<=0xBB87||// Lo  [27] HANGUL SYLLABLE MWEG..HANGUL SYLLABLE MWEH\n0xBB89<=code&&code<=0xBBA3||// Lo  [27] HANGUL SYLLABLE MWIG..HANGUL SYLLABLE MWIH\n0xBBA5<=code&&code<=0xBBBF||// Lo  [27] HANGUL SYLLABLE MYUG..HANGUL SYLLABLE MYUH\n0xBBC1<=code&&code<=0xBBDB||// Lo  [27] HANGUL SYLLABLE MEUG..HANGUL SYLLABLE MEUH\n0xBBDD<=code&&code<=0xBBF7||// Lo  [27] HANGUL SYLLABLE MYIG..HANGUL SYLLABLE MYIH\n0xBBF9<=code&&code<=0xBC13||// Lo  [27] HANGUL SYLLABLE MIG..HANGUL SYLLABLE MIH\n0xBC15<=code&&code<=0xBC2F||// Lo  [27] HANGUL SYLLABLE BAG..HANGUL SYLLABLE BAH\n0xBC31<=code&&code<=0xBC4B||// Lo  [27] HANGUL SYLLABLE BAEG..HANGUL SYLLABLE BAEH\n0xBC4D<=code&&code<=0xBC67||// Lo  [27] HANGUL SYLLABLE BYAG..HANGUL SYLLABLE BYAH\n0xBC69<=code&&code<=0xBC83||// Lo  [27] HANGUL SYLLABLE BYAEG..HANGUL SYLLABLE BYAEH\n0xBC85<=code&&code<=0xBC9F||// Lo  [27] HANGUL SYLLABLE BEOG..HANGUL SYLLABLE BEOH\n0xBCA1<=code&&code<=0xBCBB||// Lo  [27] HANGUL SYLLABLE BEG..HANGUL SYLLABLE BEH\n0xBCBD<=code&&code<=0xBCD7||// Lo  [27] HANGUL SYLLABLE BYEOG..HANGUL SYLLABLE BYEOH\n0xBCD9<=code&&code<=0xBCF3||// Lo  [27] HANGUL SYLLABLE BYEG..HANGUL SYLLABLE BYEH\n0xBCF5<=code&&code<=0xBD0F||// Lo  [27] HANGUL SYLLABLE BOG..HANGUL SYLLABLE BOH\n0xBD11<=code&&code<=0xBD2B||// Lo  [27] HANGUL SYLLABLE BWAG..HANGUL SYLLABLE BWAH\n0xBD2D<=code&&code<=0xBD47||// Lo  [27] HANGUL SYLLABLE BWAEG..HANGUL SYLLABLE BWAEH\n0xBD49<=code&&code<=0xBD63||// Lo  [27] HANGUL SYLLABLE BOEG..HANGUL SYLLABLE BOEH\n0xBD65<=code&&code<=0xBD7F||// Lo  [27] HANGUL SYLLABLE BYOG..HANGUL SYLLABLE BYOH\n0xBD81<=code&&code<=0xBD9B||// Lo  [27] HANGUL SYLLABLE BUG..HANGUL SYLLABLE BUH\n0xBD9D<=code&&code<=0xBDB7||// Lo  [27] HANGUL SYLLABLE BWEOG..HANGUL SYLLABLE BWEOH\n0xBDB9<=code&&code<=0xBDD3||// Lo  [27] HANGUL SYLLABLE BWEG..HANGUL SYLLABLE BWEH\n0xBDD5<=code&&code<=0xBDEF||// Lo  [27] HANGUL SYLLABLE BWIG..HANGUL SYLLABLE BWIH\n0xBDF1<=code&&code<=0xBE0B||// Lo  [27] HANGUL SYLLABLE BYUG..HANGUL SYLLABLE BYUH\n0xBE0D<=code&&code<=0xBE27||// Lo  [27] HANGUL SYLLABLE BEUG..HANGUL SYLLABLE BEUH\n0xBE29<=code&&code<=0xBE43||// Lo  [27] HANGUL SYLLABLE BYIG..HANGUL SYLLABLE BYIH\n0xBE45<=code&&code<=0xBE5F||// Lo  [27] HANGUL SYLLABLE BIG..HANGUL SYLLABLE BIH\n0xBE61<=code&&code<=0xBE7B||// Lo  [27] HANGUL SYLLABLE BBAG..HANGUL SYLLABLE BBAH\n0xBE7D<=code&&code<=0xBE97||// Lo  [27] HANGUL SYLLABLE BBAEG..HANGUL SYLLABLE BBAEH\n0xBE99<=code&&code<=0xBEB3||// Lo  [27] HANGUL SYLLABLE BBYAG..HANGUL SYLLABLE BBYAH\n0xBEB5<=code&&code<=0xBECF||// Lo  [27] HANGUL SYLLABLE BBYAEG..HANGUL SYLLABLE BBYAEH\n0xBED1<=code&&code<=0xBEEB||// Lo  [27] HANGUL SYLLABLE BBEOG..HANGUL SYLLABLE BBEOH\n0xBEED<=code&&code<=0xBF07||// Lo  [27] HANGUL SYLLABLE BBEG..HANGUL SYLLABLE BBEH\n0xBF09<=code&&code<=0xBF23||// Lo  [27] HANGUL SYLLABLE BBYEOG..HANGUL SYLLABLE BBYEOH\n0xBF25<=code&&code<=0xBF3F||// Lo  [27] HANGUL SYLLABLE BBYEG..HANGUL SYLLABLE BBYEH\n0xBF41<=code&&code<=0xBF5B||// Lo  [27] HANGUL SYLLABLE BBOG..HANGUL SYLLABLE BBOH\n0xBF5D<=code&&code<=0xBF77||// Lo  [27] HANGUL SYLLABLE BBWAG..HANGUL SYLLABLE BBWAH\n0xBF79<=code&&code<=0xBF93||// Lo  [27] HANGUL SYLLABLE BBWAEG..HANGUL SYLLABLE BBWAEH\n0xBF95<=code&&code<=0xBFAF||// Lo  [27] HANGUL SYLLABLE BBOEG..HANGUL SYLLABLE BBOEH\n0xBFB1<=code&&code<=0xBFCB||// Lo  [27] HANGUL SYLLABLE BBYOG..HANGUL SYLLABLE BBYOH\n0xBFCD<=code&&code<=0xBFE7||// Lo  [27] HANGUL SYLLABLE BBUG..HANGUL SYLLABLE BBUH\n0xBFE9<=code&&code<=0xC003||// Lo  [27] HANGUL SYLLABLE BBWEOG..HANGUL SYLLABLE BBWEOH\n0xC005<=code&&code<=0xC01F||// Lo  [27] HANGUL SYLLABLE BBWEG..HANGUL SYLLABLE BBWEH\n0xC021<=code&&code<=0xC03B||// Lo  [27] HANGUL SYLLABLE BBWIG..HANGUL SYLLABLE BBWIH\n0xC03D<=code&&code<=0xC057||// Lo  [27] HANGUL SYLLABLE BBYUG..HANGUL SYLLABLE BBYUH\n0xC059<=code&&code<=0xC073||// Lo  [27] HANGUL SYLLABLE BBEUG..HANGUL SYLLABLE BBEUH\n0xC075<=code&&code<=0xC08F||// Lo  [27] HANGUL SYLLABLE BBYIG..HANGUL SYLLABLE BBYIH\n0xC091<=code&&code<=0xC0AB||// Lo  [27] HANGUL SYLLABLE BBIG..HANGUL SYLLABLE BBIH\n0xC0AD<=code&&code<=0xC0C7||// Lo  [27] HANGUL SYLLABLE SAG..HANGUL SYLLABLE SAH\n0xC0C9<=code&&code<=0xC0E3||// Lo  [27] HANGUL SYLLABLE SAEG..HANGUL SYLLABLE SAEH\n0xC0E5<=code&&code<=0xC0FF||// Lo  [27] HANGUL SYLLABLE SYAG..HANGUL SYLLABLE SYAH\n0xC101<=code&&code<=0xC11B||// Lo  [27] HANGUL SYLLABLE SYAEG..HANGUL SYLLABLE SYAEH\n0xC11D<=code&&code<=0xC137||// Lo  [27] HANGUL SYLLABLE SEOG..HANGUL SYLLABLE SEOH\n0xC139<=code&&code<=0xC153||// Lo  [27] HANGUL SYLLABLE SEG..HANGUL SYLLABLE SEH\n0xC155<=code&&code<=0xC16F||// Lo  [27] HANGUL SYLLABLE SYEOG..HANGUL SYLLABLE SYEOH\n0xC171<=code&&code<=0xC18B||// Lo  [27] HANGUL SYLLABLE SYEG..HANGUL SYLLABLE SYEH\n0xC18D<=code&&code<=0xC1A7||// Lo  [27] HANGUL SYLLABLE SOG..HANGUL SYLLABLE SOH\n0xC1A9<=code&&code<=0xC1C3||// Lo  [27] HANGUL SYLLABLE SWAG..HANGUL SYLLABLE SWAH\n0xC1C5<=code&&code<=0xC1DF||// Lo  [27] HANGUL SYLLABLE SWAEG..HANGUL SYLLABLE SWAEH\n0xC1E1<=code&&code<=0xC1FB||// Lo  [27] HANGUL SYLLABLE SOEG..HANGUL SYLLABLE SOEH\n0xC1FD<=code&&code<=0xC217||// Lo  [27] HANGUL SYLLABLE SYOG..HANGUL SYLLABLE SYOH\n0xC219<=code&&code<=0xC233||// Lo  [27] HANGUL SYLLABLE SUG..HANGUL SYLLABLE SUH\n0xC235<=code&&code<=0xC24F||// Lo  [27] HANGUL SYLLABLE SWEOG..HANGUL SYLLABLE SWEOH\n0xC251<=code&&code<=0xC26B||// Lo  [27] HANGUL SYLLABLE SWEG..HANGUL SYLLABLE SWEH\n0xC26D<=code&&code<=0xC287||// Lo  [27] HANGUL SYLLABLE SWIG..HANGUL SYLLABLE SWIH\n0xC289<=code&&code<=0xC2A3||// Lo  [27] HANGUL SYLLABLE SYUG..HANGUL SYLLABLE SYUH\n0xC2A5<=code&&code<=0xC2BF||// Lo  [27] HANGUL SYLLABLE SEUG..HANGUL SYLLABLE SEUH\n0xC2C1<=code&&code<=0xC2DB||// Lo  [27] HANGUL SYLLABLE SYIG..HANGUL SYLLABLE SYIH\n0xC2DD<=code&&code<=0xC2F7||// Lo  [27] HANGUL SYLLABLE SIG..HANGUL SYLLABLE SIH\n0xC2F9<=code&&code<=0xC313||// Lo  [27] HANGUL SYLLABLE SSAG..HANGUL SYLLABLE SSAH\n0xC315<=code&&code<=0xC32F||// Lo  [27] HANGUL SYLLABLE SSAEG..HANGUL SYLLABLE SSAEH\n0xC331<=code&&code<=0xC34B||// Lo  [27] HANGUL SYLLABLE SSYAG..HANGUL SYLLABLE SSYAH\n0xC34D<=code&&code<=0xC367||// Lo  [27] HANGUL SYLLABLE SSYAEG..HANGUL SYLLABLE SSYAEH\n0xC369<=code&&code<=0xC383||// Lo  [27] HANGUL SYLLABLE SSEOG..HANGUL SYLLABLE SSEOH\n0xC385<=code&&code<=0xC39F||// Lo  [27] HANGUL SYLLABLE SSEG..HANGUL SYLLABLE SSEH\n0xC3A1<=code&&code<=0xC3BB||// Lo  [27] HANGUL SYLLABLE SSYEOG..HANGUL SYLLABLE SSYEOH\n0xC3BD<=code&&code<=0xC3D7||// Lo  [27] HANGUL SYLLABLE SSYEG..HANGUL SYLLABLE SSYEH\n0xC3D9<=code&&code<=0xC3F3||// Lo  [27] HANGUL SYLLABLE SSOG..HANGUL SYLLABLE SSOH\n0xC3F5<=code&&code<=0xC40F||// Lo  [27] HANGUL SYLLABLE SSWAG..HANGUL SYLLABLE SSWAH\n0xC411<=code&&code<=0xC42B||// Lo  [27] HANGUL SYLLABLE SSWAEG..HANGUL SYLLABLE SSWAEH\n0xC42D<=code&&code<=0xC447||// Lo  [27] HANGUL SYLLABLE SSOEG..HANGUL SYLLABLE SSOEH\n0xC449<=code&&code<=0xC463||// Lo  [27] HANGUL SYLLABLE SSYOG..HANGUL SYLLABLE SSYOH\n0xC465<=code&&code<=0xC47F||// Lo  [27] HANGUL SYLLABLE SSUG..HANGUL SYLLABLE SSUH\n0xC481<=code&&code<=0xC49B||// Lo  [27] HANGUL SYLLABLE SSWEOG..HANGUL SYLLABLE SSWEOH\n0xC49D<=code&&code<=0xC4B7||// Lo  [27] HANGUL SYLLABLE SSWEG..HANGUL SYLLABLE SSWEH\n0xC4B9<=code&&code<=0xC4D3||// Lo  [27] HANGUL SYLLABLE SSWIG..HANGUL SYLLABLE SSWIH\n0xC4D5<=code&&code<=0xC4EF||// Lo  [27] HANGUL SYLLABLE SSYUG..HANGUL SYLLABLE SSYUH\n0xC4F1<=code&&code<=0xC50B||// Lo  [27] HANGUL SYLLABLE SSEUG..HANGUL SYLLABLE SSEUH\n0xC50D<=code&&code<=0xC527||// Lo  [27] HANGUL SYLLABLE SSYIG..HANGUL SYLLABLE SSYIH\n0xC529<=code&&code<=0xC543||// Lo  [27] HANGUL SYLLABLE SSIG..HANGUL SYLLABLE SSIH\n0xC545<=code&&code<=0xC55F||// Lo  [27] HANGUL SYLLABLE AG..HANGUL SYLLABLE AH\n0xC561<=code&&code<=0xC57B||// Lo  [27] HANGUL SYLLABLE AEG..HANGUL SYLLABLE AEH\n0xC57D<=code&&code<=0xC597||// Lo  [27] HANGUL SYLLABLE YAG..HANGUL SYLLABLE YAH\n0xC599<=code&&code<=0xC5B3||// Lo  [27] HANGUL SYLLABLE YAEG..HANGUL SYLLABLE YAEH\n0xC5B5<=code&&code<=0xC5CF||// Lo  [27] HANGUL SYLLABLE EOG..HANGUL SYLLABLE EOH\n0xC5D1<=code&&code<=0xC5EB||// Lo  [27] HANGUL SYLLABLE EG..HANGUL SYLLABLE EH\n0xC5ED<=code&&code<=0xC607||// Lo  [27] HANGUL SYLLABLE YEOG..HANGUL SYLLABLE YEOH\n0xC609<=code&&code<=0xC623||// Lo  [27] HANGUL SYLLABLE YEG..HANGUL SYLLABLE YEH\n0xC625<=code&&code<=0xC63F||// Lo  [27] HANGUL SYLLABLE OG..HANGUL SYLLABLE OH\n0xC641<=code&&code<=0xC65B||// Lo  [27] HANGUL SYLLABLE WAG..HANGUL SYLLABLE WAH\n0xC65D<=code&&code<=0xC677||// Lo  [27] HANGUL SYLLABLE WAEG..HANGUL SYLLABLE WAEH\n0xC679<=code&&code<=0xC693||// Lo  [27] HANGUL SYLLABLE OEG..HANGUL SYLLABLE OEH\n0xC695<=code&&code<=0xC6AF||// Lo  [27] HANGUL SYLLABLE YOG..HANGUL SYLLABLE YOH\n0xC6B1<=code&&code<=0xC6CB||// Lo  [27] HANGUL SYLLABLE UG..HANGUL SYLLABLE UH\n0xC6CD<=code&&code<=0xC6E7||// Lo  [27] HANGUL SYLLABLE WEOG..HANGUL SYLLABLE WEOH\n0xC6E9<=code&&code<=0xC703||// Lo  [27] HANGUL SYLLABLE WEG..HANGUL SYLLABLE WEH\n0xC705<=code&&code<=0xC71F||// Lo  [27] HANGUL SYLLABLE WIG..HANGUL SYLLABLE WIH\n0xC721<=code&&code<=0xC73B||// Lo  [27] HANGUL SYLLABLE YUG..HANGUL SYLLABLE YUH\n0xC73D<=code&&code<=0xC757||// Lo  [27] HANGUL SYLLABLE EUG..HANGUL SYLLABLE EUH\n0xC759<=code&&code<=0xC773||// Lo  [27] HANGUL SYLLABLE YIG..HANGUL SYLLABLE YIH\n0xC775<=code&&code<=0xC78F||// Lo  [27] HANGUL SYLLABLE IG..HANGUL SYLLABLE IH\n0xC791<=code&&code<=0xC7AB||// Lo  [27] HANGUL SYLLABLE JAG..HANGUL SYLLABLE JAH\n0xC7AD<=code&&code<=0xC7C7||// Lo  [27] HANGUL SYLLABLE JAEG..HANGUL SYLLABLE JAEH\n0xC7C9<=code&&code<=0xC7E3||// Lo  [27] HANGUL SYLLABLE JYAG..HANGUL SYLLABLE JYAH\n0xC7E5<=code&&code<=0xC7FF||// Lo  [27] HANGUL SYLLABLE JYAEG..HANGUL SYLLABLE JYAEH\n0xC801<=code&&code<=0xC81B||// Lo  [27] HANGUL SYLLABLE JEOG..HANGUL SYLLABLE JEOH\n0xC81D<=code&&code<=0xC837||// Lo  [27] HANGUL SYLLABLE JEG..HANGUL SYLLABLE JEH\n0xC839<=code&&code<=0xC853||// Lo  [27] HANGUL SYLLABLE JYEOG..HANGUL SYLLABLE JYEOH\n0xC855<=code&&code<=0xC86F||// Lo  [27] HANGUL SYLLABLE JYEG..HANGUL SYLLABLE JYEH\n0xC871<=code&&code<=0xC88B||// Lo  [27] HANGUL SYLLABLE JOG..HANGUL SYLLABLE JOH\n0xC88D<=code&&code<=0xC8A7||// Lo  [27] HANGUL SYLLABLE JWAG..HANGUL SYLLABLE JWAH\n0xC8A9<=code&&code<=0xC8C3||// Lo  [27] HANGUL SYLLABLE JWAEG..HANGUL SYLLABLE JWAEH\n0xC8C5<=code&&code<=0xC8DF||// Lo  [27] HANGUL SYLLABLE JOEG..HANGUL SYLLABLE JOEH\n0xC8E1<=code&&code<=0xC8FB||// Lo  [27] HANGUL SYLLABLE JYOG..HANGUL SYLLABLE JYOH\n0xC8FD<=code&&code<=0xC917||// Lo  [27] HANGUL SYLLABLE JUG..HANGUL SYLLABLE JUH\n0xC919<=code&&code<=0xC933||// Lo  [27] HANGUL SYLLABLE JWEOG..HANGUL SYLLABLE JWEOH\n0xC935<=code&&code<=0xC94F||// Lo  [27] HANGUL SYLLABLE JWEG..HANGUL SYLLABLE JWEH\n0xC951<=code&&code<=0xC96B||// Lo  [27] HANGUL SYLLABLE JWIG..HANGUL SYLLABLE JWIH\n0xC96D<=code&&code<=0xC987||// Lo  [27] HANGUL SYLLABLE JYUG..HANGUL SYLLABLE JYUH\n0xC989<=code&&code<=0xC9A3||// Lo  [27] HANGUL SYLLABLE JEUG..HANGUL SYLLABLE JEUH\n0xC9A5<=code&&code<=0xC9BF||// Lo  [27] HANGUL SYLLABLE JYIG..HANGUL SYLLABLE JYIH\n0xC9C1<=code&&code<=0xC9DB||// Lo  [27] HANGUL SYLLABLE JIG..HANGUL SYLLABLE JIH\n0xC9DD<=code&&code<=0xC9F7||// Lo  [27] HANGUL SYLLABLE JJAG..HANGUL SYLLABLE JJAH\n0xC9F9<=code&&code<=0xCA13||// Lo  [27] HANGUL SYLLABLE JJAEG..HANGUL SYLLABLE JJAEH\n0xCA15<=code&&code<=0xCA2F||// Lo  [27] HANGUL SYLLABLE JJYAG..HANGUL SYLLABLE JJYAH\n0xCA31<=code&&code<=0xCA4B||// Lo  [27] HANGUL SYLLABLE JJYAEG..HANGUL SYLLABLE JJYAEH\n0xCA4D<=code&&code<=0xCA67||// Lo  [27] HANGUL SYLLABLE JJEOG..HANGUL SYLLABLE JJEOH\n0xCA69<=code&&code<=0xCA83||// Lo  [27] HANGUL SYLLABLE JJEG..HANGUL SYLLABLE JJEH\n0xCA85<=code&&code<=0xCA9F||// Lo  [27] HANGUL SYLLABLE JJYEOG..HANGUL SYLLABLE JJYEOH\n0xCAA1<=code&&code<=0xCABB||// Lo  [27] HANGUL SYLLABLE JJYEG..HANGUL SYLLABLE JJYEH\n0xCABD<=code&&code<=0xCAD7||// Lo  [27] HANGUL SYLLABLE JJOG..HANGUL SYLLABLE JJOH\n0xCAD9<=code&&code<=0xCAF3||// Lo  [27] HANGUL SYLLABLE JJWAG..HANGUL SYLLABLE JJWAH\n0xCAF5<=code&&code<=0xCB0F||// Lo  [27] HANGUL SYLLABLE JJWAEG..HANGUL SYLLABLE JJWAEH\n0xCB11<=code&&code<=0xCB2B||// Lo  [27] HANGUL SYLLABLE JJOEG..HANGUL SYLLABLE JJOEH\n0xCB2D<=code&&code<=0xCB47||// Lo  [27] HANGUL SYLLABLE JJYOG..HANGUL SYLLABLE JJYOH\n0xCB49<=code&&code<=0xCB63||// Lo  [27] HANGUL SYLLABLE JJUG..HANGUL SYLLABLE JJUH\n0xCB65<=code&&code<=0xCB7F||// Lo  [27] HANGUL SYLLABLE JJWEOG..HANGUL SYLLABLE JJWEOH\n0xCB81<=code&&code<=0xCB9B||// Lo  [27] HANGUL SYLLABLE JJWEG..HANGUL SYLLABLE JJWEH\n0xCB9D<=code&&code<=0xCBB7||// Lo  [27] HANGUL SYLLABLE JJWIG..HANGUL SYLLABLE JJWIH\n0xCBB9<=code&&code<=0xCBD3||// Lo  [27] HANGUL SYLLABLE JJYUG..HANGUL SYLLABLE JJYUH\n0xCBD5<=code&&code<=0xCBEF||// Lo  [27] HANGUL SYLLABLE JJEUG..HANGUL SYLLABLE JJEUH\n0xCBF1<=code&&code<=0xCC0B||// Lo  [27] HANGUL SYLLABLE JJYIG..HANGUL SYLLABLE JJYIH\n0xCC0D<=code&&code<=0xCC27||// Lo  [27] HANGUL SYLLABLE JJIG..HANGUL SYLLABLE JJIH\n0xCC29<=code&&code<=0xCC43||// Lo  [27] HANGUL SYLLABLE CAG..HANGUL SYLLABLE CAH\n0xCC45<=code&&code<=0xCC5F||// Lo  [27] HANGUL SYLLABLE CAEG..HANGUL SYLLABLE CAEH\n0xCC61<=code&&code<=0xCC7B||// Lo  [27] HANGUL SYLLABLE CYAG..HANGUL SYLLABLE CYAH\n0xCC7D<=code&&code<=0xCC97||// Lo  [27] HANGUL SYLLABLE CYAEG..HANGUL SYLLABLE CYAEH\n0xCC99<=code&&code<=0xCCB3||// Lo  [27] HANGUL SYLLABLE CEOG..HANGUL SYLLABLE CEOH\n0xCCB5<=code&&code<=0xCCCF||// Lo  [27] HANGUL SYLLABLE CEG..HANGUL SYLLABLE CEH\n0xCCD1<=code&&code<=0xCCEB||// Lo  [27] HANGUL SYLLABLE CYEOG..HANGUL SYLLABLE CYEOH\n0xCCED<=code&&code<=0xCD07||// Lo  [27] HANGUL SYLLABLE CYEG..HANGUL SYLLABLE CYEH\n0xCD09<=code&&code<=0xCD23||// Lo  [27] HANGUL SYLLABLE COG..HANGUL SYLLABLE COH\n0xCD25<=code&&code<=0xCD3F||// Lo  [27] HANGUL SYLLABLE CWAG..HANGUL SYLLABLE CWAH\n0xCD41<=code&&code<=0xCD5B||// Lo  [27] HANGUL SYLLABLE CWAEG..HANGUL SYLLABLE CWAEH\n0xCD5D<=code&&code<=0xCD77||// Lo  [27] HANGUL SYLLABLE COEG..HANGUL SYLLABLE COEH\n0xCD79<=code&&code<=0xCD93||// Lo  [27] HANGUL SYLLABLE CYOG..HANGUL SYLLABLE CYOH\n0xCD95<=code&&code<=0xCDAF||// Lo  [27] HANGUL SYLLABLE CUG..HANGUL SYLLABLE CUH\n0xCDB1<=code&&code<=0xCDCB||// Lo  [27] HANGUL SYLLABLE CWEOG..HANGUL SYLLABLE CWEOH\n0xCDCD<=code&&code<=0xCDE7||// Lo  [27] HANGUL SYLLABLE CWEG..HANGUL SYLLABLE CWEH\n0xCDE9<=code&&code<=0xCE03||// Lo  [27] HANGUL SYLLABLE CWIG..HANGUL SYLLABLE CWIH\n0xCE05<=code&&code<=0xCE1F||// Lo  [27] HANGUL SYLLABLE CYUG..HANGUL SYLLABLE CYUH\n0xCE21<=code&&code<=0xCE3B||// Lo  [27] HANGUL SYLLABLE CEUG..HANGUL SYLLABLE CEUH\n0xCE3D<=code&&code<=0xCE57||// Lo  [27] HANGUL SYLLABLE CYIG..HANGUL SYLLABLE CYIH\n0xCE59<=code&&code<=0xCE73||// Lo  [27] HANGUL SYLLABLE CIG..HANGUL SYLLABLE CIH\n0xCE75<=code&&code<=0xCE8F||// Lo  [27] HANGUL SYLLABLE KAG..HANGUL SYLLABLE KAH\n0xCE91<=code&&code<=0xCEAB||// Lo  [27] HANGUL SYLLABLE KAEG..HANGUL SYLLABLE KAEH\n0xCEAD<=code&&code<=0xCEC7||// Lo  [27] HANGUL SYLLABLE KYAG..HANGUL SYLLABLE KYAH\n0xCEC9<=code&&code<=0xCEE3||// Lo  [27] HANGUL SYLLABLE KYAEG..HANGUL SYLLABLE KYAEH\n0xCEE5<=code&&code<=0xCEFF||// Lo  [27] HANGUL SYLLABLE KEOG..HANGUL SYLLABLE KEOH\n0xCF01<=code&&code<=0xCF1B||// Lo  [27] HANGUL SYLLABLE KEG..HANGUL SYLLABLE KEH\n0xCF1D<=code&&code<=0xCF37||// Lo  [27] HANGUL SYLLABLE KYEOG..HANGUL SYLLABLE KYEOH\n0xCF39<=code&&code<=0xCF53||// Lo  [27] HANGUL SYLLABLE KYEG..HANGUL SYLLABLE KYEH\n0xCF55<=code&&code<=0xCF6F||// Lo  [27] HANGUL SYLLABLE KOG..HANGUL SYLLABLE KOH\n0xCF71<=code&&code<=0xCF8B||// Lo  [27] HANGUL SYLLABLE KWAG..HANGUL SYLLABLE KWAH\n0xCF8D<=code&&code<=0xCFA7||// Lo  [27] HANGUL SYLLABLE KWAEG..HANGUL SYLLABLE KWAEH\n0xCFA9<=code&&code<=0xCFC3||// Lo  [27] HANGUL SYLLABLE KOEG..HANGUL SYLLABLE KOEH\n0xCFC5<=code&&code<=0xCFDF||// Lo  [27] HANGUL SYLLABLE KYOG..HANGUL SYLLABLE KYOH\n0xCFE1<=code&&code<=0xCFFB||// Lo  [27] HANGUL SYLLABLE KUG..HANGUL SYLLABLE KUH\n0xCFFD<=code&&code<=0xD017||// Lo  [27] HANGUL SYLLABLE KWEOG..HANGUL SYLLABLE KWEOH\n0xD019<=code&&code<=0xD033||// Lo  [27] HANGUL SYLLABLE KWEG..HANGUL SYLLABLE KWEH\n0xD035<=code&&code<=0xD04F||// Lo  [27] HANGUL SYLLABLE KWIG..HANGUL SYLLABLE KWIH\n0xD051<=code&&code<=0xD06B||// Lo  [27] HANGUL SYLLABLE KYUG..HANGUL SYLLABLE KYUH\n0xD06D<=code&&code<=0xD087||// Lo  [27] HANGUL SYLLABLE KEUG..HANGUL SYLLABLE KEUH\n0xD089<=code&&code<=0xD0A3||// Lo  [27] HANGUL SYLLABLE KYIG..HANGUL SYLLABLE KYIH\n0xD0A5<=code&&code<=0xD0BF||// Lo  [27] HANGUL SYLLABLE KIG..HANGUL SYLLABLE KIH\n0xD0C1<=code&&code<=0xD0DB||// Lo  [27] HANGUL SYLLABLE TAG..HANGUL SYLLABLE TAH\n0xD0DD<=code&&code<=0xD0F7||// Lo  [27] HANGUL SYLLABLE TAEG..HANGUL SYLLABLE TAEH\n0xD0F9<=code&&code<=0xD113||// Lo  [27] HANGUL SYLLABLE TYAG..HANGUL SYLLABLE TYAH\n0xD115<=code&&code<=0xD12F||// Lo  [27] HANGUL SYLLABLE TYAEG..HANGUL SYLLABLE TYAEH\n0xD131<=code&&code<=0xD14B||// Lo  [27] HANGUL SYLLABLE TEOG..HANGUL SYLLABLE TEOH\n0xD14D<=code&&code<=0xD167||// Lo  [27] HANGUL SYLLABLE TEG..HANGUL SYLLABLE TEH\n0xD169<=code&&code<=0xD183||// Lo  [27] HANGUL SYLLABLE TYEOG..HANGUL SYLLABLE TYEOH\n0xD185<=code&&code<=0xD19F||// Lo  [27] HANGUL SYLLABLE TYEG..HANGUL SYLLABLE TYEH\n0xD1A1<=code&&code<=0xD1BB||// Lo  [27] HANGUL SYLLABLE TOG..HANGUL SYLLABLE TOH\n0xD1BD<=code&&code<=0xD1D7||// Lo  [27] HANGUL SYLLABLE TWAG..HANGUL SYLLABLE TWAH\n0xD1D9<=code&&code<=0xD1F3||// Lo  [27] HANGUL SYLLABLE TWAEG..HANGUL SYLLABLE TWAEH\n0xD1F5<=code&&code<=0xD20F||// Lo  [27] HANGUL SYLLABLE TOEG..HANGUL SYLLABLE TOEH\n0xD211<=code&&code<=0xD22B||// Lo  [27] HANGUL SYLLABLE TYOG..HANGUL SYLLABLE TYOH\n0xD22D<=code&&code<=0xD247||// Lo  [27] HANGUL SYLLABLE TUG..HANGUL SYLLABLE TUH\n0xD249<=code&&code<=0xD263||// Lo  [27] HANGUL SYLLABLE TWEOG..HANGUL SYLLABLE TWEOH\n0xD265<=code&&code<=0xD27F||// Lo  [27] HANGUL SYLLABLE TWEG..HANGUL SYLLABLE TWEH\n0xD281<=code&&code<=0xD29B||// Lo  [27] HANGUL SYLLABLE TWIG..HANGUL SYLLABLE TWIH\n0xD29D<=code&&code<=0xD2B7||// Lo  [27] HANGUL SYLLABLE TYUG..HANGUL SYLLABLE TYUH\n0xD2B9<=code&&code<=0xD2D3||// Lo  [27] HANGUL SYLLABLE TEUG..HANGUL SYLLABLE TEUH\n0xD2D5<=code&&code<=0xD2EF||// Lo  [27] HANGUL SYLLABLE TYIG..HANGUL SYLLABLE TYIH\n0xD2F1<=code&&code<=0xD30B||// Lo  [27] HANGUL SYLLABLE TIG..HANGUL SYLLABLE TIH\n0xD30D<=code&&code<=0xD327||// Lo  [27] HANGUL SYLLABLE PAG..HANGUL SYLLABLE PAH\n0xD329<=code&&code<=0xD343||// Lo  [27] HANGUL SYLLABLE PAEG..HANGUL SYLLABLE PAEH\n0xD345<=code&&code<=0xD35F||// Lo  [27] HANGUL SYLLABLE PYAG..HANGUL SYLLABLE PYAH\n0xD361<=code&&code<=0xD37B||// Lo  [27] HANGUL SYLLABLE PYAEG..HANGUL SYLLABLE PYAEH\n0xD37D<=code&&code<=0xD397||// Lo  [27] HANGUL SYLLABLE PEOG..HANGUL SYLLABLE PEOH\n0xD399<=code&&code<=0xD3B3||// Lo  [27] HANGUL SYLLABLE PEG..HANGUL SYLLABLE PEH\n0xD3B5<=code&&code<=0xD3CF||// Lo  [27] HANGUL SYLLABLE PYEOG..HANGUL SYLLABLE PYEOH\n0xD3D1<=code&&code<=0xD3EB||// Lo  [27] HANGUL SYLLABLE PYEG..HANGUL SYLLABLE PYEH\n0xD3ED<=code&&code<=0xD407||// Lo  [27] HANGUL SYLLABLE POG..HANGUL SYLLABLE POH\n0xD409<=code&&code<=0xD423||// Lo  [27] HANGUL SYLLABLE PWAG..HANGUL SYLLABLE PWAH\n0xD425<=code&&code<=0xD43F||// Lo  [27] HANGUL SYLLABLE PWAEG..HANGUL SYLLABLE PWAEH\n0xD441<=code&&code<=0xD45B||// Lo  [27] HANGUL SYLLABLE POEG..HANGUL SYLLABLE POEH\n0xD45D<=code&&code<=0xD477||// Lo  [27] HANGUL SYLLABLE PYOG..HANGUL SYLLABLE PYOH\n0xD479<=code&&code<=0xD493||// Lo  [27] HANGUL SYLLABLE PUG..HANGUL SYLLABLE PUH\n0xD495<=code&&code<=0xD4AF||// Lo  [27] HANGUL SYLLABLE PWEOG..HANGUL SYLLABLE PWEOH\n0xD4B1<=code&&code<=0xD4CB||// Lo  [27] HANGUL SYLLABLE PWEG..HANGUL SYLLABLE PWEH\n0xD4CD<=code&&code<=0xD4E7||// Lo  [27] HANGUL SYLLABLE PWIG..HANGUL SYLLABLE PWIH\n0xD4E9<=code&&code<=0xD503||// Lo  [27] HANGUL SYLLABLE PYUG..HANGUL SYLLABLE PYUH\n0xD505<=code&&code<=0xD51F||// Lo  [27] HANGUL SYLLABLE PEUG..HANGUL SYLLABLE PEUH\n0xD521<=code&&code<=0xD53B||// Lo  [27] HANGUL SYLLABLE PYIG..HANGUL SYLLABLE PYIH\n0xD53D<=code&&code<=0xD557||// Lo  [27] HANGUL SYLLABLE PIG..HANGUL SYLLABLE PIH\n0xD559<=code&&code<=0xD573||// Lo  [27] HANGUL SYLLABLE HAG..HANGUL SYLLABLE HAH\n0xD575<=code&&code<=0xD58F||// Lo  [27] HANGUL SYLLABLE HAEG..HANGUL SYLLABLE HAEH\n0xD591<=code&&code<=0xD5AB||// Lo  [27] HANGUL SYLLABLE HYAG..HANGUL SYLLABLE HYAH\n0xD5AD<=code&&code<=0xD5C7||// Lo  [27] HANGUL SYLLABLE HYAEG..HANGUL SYLLABLE HYAEH\n0xD5C9<=code&&code<=0xD5E3||// Lo  [27] HANGUL SYLLABLE HEOG..HANGUL SYLLABLE HEOH\n0xD5E5<=code&&code<=0xD5FF||// Lo  [27] HANGUL SYLLABLE HEG..HANGUL SYLLABLE HEH\n0xD601<=code&&code<=0xD61B||// Lo  [27] HANGUL SYLLABLE HYEOG..HANGUL SYLLABLE HYEOH\n0xD61D<=code&&code<=0xD637||// Lo  [27] HANGUL SYLLABLE HYEG..HANGUL SYLLABLE HYEH\n0xD639<=code&&code<=0xD653||// Lo  [27] HANGUL SYLLABLE HOG..HANGUL SYLLABLE HOH\n0xD655<=code&&code<=0xD66F||// Lo  [27] HANGUL SYLLABLE HWAG..HANGUL SYLLABLE HWAH\n0xD671<=code&&code<=0xD68B||// Lo  [27] HANGUL SYLLABLE HWAEG..HANGUL SYLLABLE HWAEH\n0xD68D<=code&&code<=0xD6A7||// Lo  [27] HANGUL SYLLABLE HOEG..HANGUL SYLLABLE HOEH\n0xD6A9<=code&&code<=0xD6C3||// Lo  [27] HANGUL SYLLABLE HYOG..HANGUL SYLLABLE HYOH\n0xD6C5<=code&&code<=0xD6DF||// Lo  [27] HANGUL SYLLABLE HUG..HANGUL SYLLABLE HUH\n0xD6E1<=code&&code<=0xD6FB||// Lo  [27] HANGUL SYLLABLE HWEOG..HANGUL SYLLABLE HWEOH\n0xD6FD<=code&&code<=0xD717||// Lo  [27] HANGUL SYLLABLE HWEG..HANGUL SYLLABLE HWEH\n0xD719<=code&&code<=0xD733||// Lo  [27] HANGUL SYLLABLE HWIG..HANGUL SYLLABLE HWIH\n0xD735<=code&&code<=0xD74F||// Lo  [27] HANGUL SYLLABLE HYUG..HANGUL SYLLABLE HYUH\n0xD751<=code&&code<=0xD76B||// Lo  [27] HANGUL SYLLABLE HEUG..HANGUL SYLLABLE HEUH\n0xD76D<=code&&code<=0xD787||// Lo  [27] HANGUL SYLLABLE HYIG..HANGUL SYLLABLE HYIH\n0xD789<=code&&code<=0xD7A3// Lo  [27] HANGUL SYLLABLE HIG..HANGUL SYLLABLE HIH\n){return LVT;}if(0x261D==code||// So       WHITE UP POINTING INDEX\n0x26F9==code||// So       PERSON WITH BALL\n0x270A<=code&&code<=0x270D||// So   [4] RAISED FIST..WRITING HAND\n0x1F385==code||// So       FATHER CHRISTMAS\n0x1F3C2<=code&&code<=0x1F3C4||// So   [3] SNOWBOARDER..SURFER\n0x1F3C7==code||// So       HORSE RACING\n0x1F3CA<=code&&code<=0x1F3CC||// So   [3] SWIMMER..GOLFER\n0x1F442<=code&&code<=0x1F443||// So   [2] EAR..NOSE\n0x1F446<=code&&code<=0x1F450||// So  [11] WHITE UP POINTING BACKHAND INDEX..OPEN HANDS SIGN\n0x1F46E==code||// So       POLICE OFFICER\n0x1F470<=code&&code<=0x1F478||// So   [9] BRIDE WITH VEIL..PRINCESS\n0x1F47C==code||// So       BABY ANGEL\n0x1F481<=code&&code<=0x1F483||// So   [3] INFORMATION DESK PERSON..DANCER\n0x1F485<=code&&code<=0x1F487||// So   [3] NAIL POLISH..HAIRCUT\n0x1F4AA==code||// So       FLEXED BICEPS\n0x1F574<=code&&code<=0x1F575||// So   [2] MAN IN BUSINESS SUIT LEVITATING..SLEUTH OR SPY\n0x1F57A==code||// So       MAN DANCING\n0x1F590==code||// So       RAISED HAND WITH FINGERS SPLAYED\n0x1F595<=code&&code<=0x1F596||// So   [2] REVERSED HAND WITH MIDDLE FINGER EXTENDED..RAISED HAND WITH PART BETWEEN MIDDLE AND RING FINGERS\n0x1F645<=code&&code<=0x1F647||// So   [3] FACE WITH NO GOOD GESTURE..PERSON BOWING DEEPLY\n0x1F64B<=code&&code<=0x1F64F||// So   [5] HAPPY PERSON RAISING ONE HAND..PERSON WITH FOLDED HANDS\n0x1F6A3==code||// So       ROWBOAT\n0x1F6B4<=code&&code<=0x1F6B6||// So   [3] BICYCLIST..PEDESTRIAN\n0x1F6C0==code||// So       BATH\n0x1F6CC==code||// So       SLEEPING ACCOMMODATION\n0x1F918<=code&&code<=0x1F91C||// So   [5] SIGN OF THE HORNS..RIGHT-FACING FIST\n0x1F91E<=code&&code<=0x1F91F||// So   [2] HAND WITH INDEX AND MIDDLE FINGERS CROSSED..I LOVE YOU HAND SIGN\n0x1F926==code||// So       FACE PALM\n0x1F930<=code&&code<=0x1F939||// So  [10] PREGNANT WOMAN..JUGGLING\n0x1F93D<=code&&code<=0x1F93E||// So   [2] WATER POLO..HANDBALL\n0x1F9D1<=code&&code<=0x1F9DD// So  [13] ADULT..ELF\n){return E_Base;}if(0x1F3FB<=code&&code<=0x1F3FF)// Sk   [5] EMOJI MODIFIER FITZPATRICK TYPE-1-2..EMOJI MODIFIER FITZPATRICK TYPE-6\n{return E_Modifier;}if(0x200D==code// Cf       ZERO WIDTH JOINER\n){return ZWJ;}if(0x2640==code||// So       FEMALE SIGN\n0x2642==code||// So       MALE SIGN\n0x2695<=code&&code<=0x2696||// So   [2] STAFF OF AESCULAPIUS..SCALES\n0x2708==code||// So       AIRPLANE\n0x2764==code||// So       HEAVY BLACK HEART\n0x1F308==code||// So       RAINBOW\n0x1F33E==code||// So       EAR OF RICE\n0x1F373==code||// So       COOKING\n0x1F393==code||// So       GRADUATION CAP\n0x1F3A4==code||// So       MICROPHONE\n0x1F3A8==code||// So       ARTIST PALETTE\n0x1F3EB==code||// So       SCHOOL\n0x1F3ED==code||// So       FACTORY\n0x1F48B==code||// So       KISS MARK\n0x1F4BB<=code&&code<=0x1F4BC||// So   [2] PERSONAL COMPUTER..BRIEFCASE\n0x1F527==code||// So       WRENCH\n0x1F52C==code||// So       MICROSCOPE\n0x1F5E8==code||// So       LEFT SPEECH BUBBLE\n0x1F680==code||// So       ROCKET\n0x1F692==code// So       FIRE ENGINE\n){return Glue_After_Zwj;}if(0x1F466<=code&&code<=0x1F469)// So   [4] BOY..WOMAN\n{return E_Base_GAZ;}//all unlisted characters have a grapheme break property of \"Other\"\nreturn Other;}return this;}if( true&&module.exports){module.exports=GraphemeSplitter;}});var splitter=new graphemeSplitter();var substring=function substring(str,start,end){var iterator=splitter.iterateGraphemes(str.substring(start));var value='';for(var pos=0;pos<end-start;pos++){var next=iterator.next();value+=next.value;if(next.done){break;}}return value;};var location=function(startLine,startColumn,startOffset,endLine,endColumn,endOffset,source){return{start:{line:startLine,column:startColumn,offset:startOffset},end:{line:endLine,column:endColumn,offset:endOffset},source:source||null};};var build=createCommonjsModule(function(module,exports){(function(global,factory){module.exports=factory();})(commonjsGlobal,function(){'use strict';/*!\n     * repeat-string <https://github.com/jonschlinkert/repeat-string>\n     *\n     * Copyright (c) 2014-2015, Jon Schlinkert.\n     * Licensed under the MIT License.\n     */'use strict';/**\n     * Results cache\n     */var res='';var cache;/**\n     * Expose `repeat`\n     */var repeatString=repeat;/**\n     * Repeat the given `string` the specified `number`\n     * of times.\n     *\n     * **Example:**\n     *\n     * ```js\n     * var repeat = require('repeat-string');\n     * repeat('A', 5);\n     * //=> AAAAA\n     * ```\n     *\n     * @param {String} `string` The string to repeat\n     * @param {Number} `number` The number of times to repeat the string\n     * @return {String} Repeated string\n     * @api public\n     */function repeat(str,num){if(typeof str!=='string'){throw new TypeError('expected a string');}// cover common, quick use cases\nif(num===1)return str;if(num===2)return str+str;var max=str.length*num;if(cache!==str||typeof cache==='undefined'){cache=str;res='';}else if(res.length>=max){return res.substr(0,max);}while(max>res.length&&num>1){if(num&1){res+=str;}num>>=1;str+=str;}res+=str;res=res.substr(0,max);return res;}'use strict';var padStart=function padStart(string,maxLength,fillString){if(string==null||maxLength==null){return string;}var result=String(string);var targetLen=typeof maxLength==='number'?maxLength:parseInt(maxLength,10);if(isNaN(targetLen)||!isFinite(targetLen)){return result;}var length=result.length;if(length>=targetLen){return result;}var fill=fillString==null?'':String(fillString);if(fill===''){fill=' ';}var fillLen=targetLen-length;while(fill.length<fillLen){fill+=fill;}var truncated=fill.length>fillLen?fill.substr(0,fillLen):fill;return truncated+result;};var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};function printLine(line,position,maxNumLength,settings){var num=String(position);var formattedNum=padStart(num,maxNumLength,' ');var tabReplacement=repeatString(' ',settings.tabSize);return formattedNum+' | '+line.replace(/\\t/g,tabReplacement);}function printLines(lines,start,end,maxNumLength,settings){return lines.slice(start,end).map(function(line,i){return printLine(line,start+i+1,maxNumLength,settings);}).join('\\n');}var defaultSettings={extraLines:2,tabSize:4};var index=function index(input,linePos,columnPos,settings){settings=_extends({},defaultSettings,settings);var lines=input.split(/\\r\\n?|\\n|\\f/);var startLinePos=Math.max(1,linePos-settings.extraLines)-1;var endLinePos=Math.min(linePos+settings.extraLines,lines.length);var maxNumLength=String(endLinePos).length;var prevLines=printLines(lines,startLinePos,linePos,maxNumLength,settings);var targetLineBeforeCursor=printLine(lines[linePos-1].substring(0,columnPos-1),linePos,maxNumLength,settings);var cursorLine=repeatString(' ',targetLineBeforeCursor.length)+'^';var nextLines=printLines(lines,linePos,endLinePos,maxNumLength,settings);return[prevLines,cursorLine,nextLines].filter(Boolean).join('\\n');};return index;});});var errorStack=new Error().stack;var createError=function(props){// use Object.create(), because some VMs prevent setting line/column otherwise\n// (iOS Safari 10 even throws an exception)\nvar error=Object.create(SyntaxError.prototype);Object.assign(error,props,{name:'SyntaxError'});Object.defineProperty(error,'stack',{get:function get(){return errorStack?errorStack.replace(/^(.+\\n){1,3}/,String(error)+'\\n'):'';}});return error;};var error=function(message,input,source,line,column){throw createError({message:line?message+'\\n'+build(input,line,column):message,rawMessage:message,source:source,line:line,column:column});};var parseErrorTypes={unexpectedEnd:function unexpectedEnd(){return'Unexpected end of input';},unexpectedToken:function unexpectedToken(token){for(var _len=arguments.length,position=Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){position[_key-1]=arguments[_key];}return'Unexpected token <'+token+'> at '+position.filter(Boolean).join(':');}};var tokenizeErrorTypes={unexpectedSymbol:function unexpectedSymbol(symbol){for(var _len=arguments.length,position=Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){position[_key-1]=arguments[_key];}return'Unexpected symbol <'+symbol+'> at '+position.filter(Boolean).join(':');}};var tokenTypes={LEFT_BRACE:0,// {\nRIGHT_BRACE:1,// }\nLEFT_BRACKET:2,// [\nRIGHT_BRACKET:3,// ]\nCOLON:4,// :\nCOMMA:5,// ,\nSTRING:6,//\nNUMBER:7,//\nTRUE:8,// true\nFALSE:9,// false\nNULL:10// null\n};var punctuatorTokensMap={// Lexeme: Token\n'{':tokenTypes.LEFT_BRACE,'}':tokenTypes.RIGHT_BRACE,'[':tokenTypes.LEFT_BRACKET,']':tokenTypes.RIGHT_BRACKET,':':tokenTypes.COLON,',':tokenTypes.COMMA};var keywordTokensMap={// Lexeme: Token\n'true':tokenTypes.TRUE,'false':tokenTypes.FALSE,'null':tokenTypes.NULL};var stringStates={_START_:0,START_QUOTE_OR_CHAR:1,ESCAPE:2};var escapes$1={'\"':0,// Quotation mask\n'\\\\':1,// Reverse solidus\n'/':2,// Solidus\n'b':3,// Backspace\n'f':4,// Form feed\n'n':5,// New line\n'r':6,// Carriage return\n't':7,// Horizontal tab\n'u':8// 4 hexadecimal digits\n};var numberStates={_START_:0,MINUS:1,ZERO:2,DIGIT:3,POINT:4,DIGIT_FRACTION:5,EXP:6,EXP_DIGIT_OR_SIGN:7};// HELPERS\nfunction isDigit1to9(char){return char>='1'&&char<='9';}function isDigit(char){return char>='0'&&char<='9';}function isHex(char){return isDigit(char)||char>='a'&&char<='f'||char>='A'&&char<='F';}function isExp(char){return char==='e'||char==='E';}// PARSERS\nfunction parseWhitespace(input,index,line,column){var char=input.charAt(index);if(char==='\\r'){// CR (Unix)\nindex++;line++;column=1;if(input.charAt(index)==='\\n'){// CRLF (Windows)\nindex++;}}else if(char==='\\n'){// LF (MacOS)\nindex++;line++;column=1;}else if(char==='\\t'||char===' '){index++;column++;}else{return null;}return{index:index,line:line,column:column};}function parseChar(input,index,line,column){var char=input.charAt(index);if(char in punctuatorTokensMap){return{type:punctuatorTokensMap[char],line:line,column:column+1,index:index+1,value:null};}return null;}function parseKeyword(input,index,line,column){for(var name in keywordTokensMap){if(keywordTokensMap.hasOwnProperty(name)&&input.substr(index,name.length)===name){return{type:keywordTokensMap[name],line:line,column:column+name.length,index:index+name.length,value:name};}}return null;}function parseString$1(input,index,line,column){var startIndex=index;var state=stringStates._START_;while(index<input.length){var char=input.charAt(index);switch(state){case stringStates._START_:{if(char==='\"'){index++;state=stringStates.START_QUOTE_OR_CHAR;}else{return null;}break;}case stringStates.START_QUOTE_OR_CHAR:{if(char==='\\\\'){index++;state=stringStates.ESCAPE;}else if(char==='\"'){index++;return{type:tokenTypes.STRING,line:line,column:column+index-startIndex,index:index,value:input.slice(startIndex,index)};}else{index++;}break;}case stringStates.ESCAPE:{if(char in escapes$1){index++;if(char==='u'){for(var i=0;i<4;i++){var curChar=input.charAt(index);if(curChar&&isHex(curChar)){index++;}else{return null;}}}state=stringStates.START_QUOTE_OR_CHAR;}else{return null;}break;}}}}function parseNumber(input,index,line,column){var startIndex=index;var passedValueIndex=index;var state=numberStates._START_;iterator:while(index<input.length){var char=input.charAt(index);switch(state){case numberStates._START_:{if(char==='-'){state=numberStates.MINUS;}else if(char==='0'){passedValueIndex=index+1;state=numberStates.ZERO;}else if(isDigit1to9(char)){passedValueIndex=index+1;state=numberStates.DIGIT;}else{return null;}break;}case numberStates.MINUS:{if(char==='0'){passedValueIndex=index+1;state=numberStates.ZERO;}else if(isDigit1to9(char)){passedValueIndex=index+1;state=numberStates.DIGIT;}else{return null;}break;}case numberStates.ZERO:{if(char==='.'){state=numberStates.POINT;}else if(isExp(char)){state=numberStates.EXP;}else{break iterator;}break;}case numberStates.DIGIT:{if(isDigit(char)){passedValueIndex=index+1;}else if(char==='.'){state=numberStates.POINT;}else if(isExp(char)){state=numberStates.EXP;}else{break iterator;}break;}case numberStates.POINT:{if(isDigit(char)){passedValueIndex=index+1;state=numberStates.DIGIT_FRACTION;}else{break iterator;}break;}case numberStates.DIGIT_FRACTION:{if(isDigit(char)){passedValueIndex=index+1;}else if(isExp(char)){state=numberStates.EXP;}else{break iterator;}break;}case numberStates.EXP:{if(char==='+'||char==='-'){state=numberStates.EXP_DIGIT_OR_SIGN;}else if(isDigit(char)){passedValueIndex=index+1;state=numberStates.EXP_DIGIT_OR_SIGN;}else{break iterator;}break;}case numberStates.EXP_DIGIT_OR_SIGN:{if(isDigit(char)){passedValueIndex=index+1;}else{break iterator;}break;}}index++;}if(passedValueIndex>0){return{type:tokenTypes.NUMBER,line:line,column:column+passedValueIndex-startIndex,index:passedValueIndex,value:input.slice(startIndex,passedValueIndex)};}return null;}var tokenize=function tokenize(input,settings){var line=1;var column=1;var index=0;var tokens=[];while(index<input.length){var args=[input,index,line,column];var whitespace=parseWhitespace.apply(undefined,args);if(whitespace){index=whitespace.index;line=whitespace.line;column=whitespace.column;continue;}var matched=parseChar.apply(undefined,args)||parseKeyword.apply(undefined,args)||parseString$1.apply(undefined,args)||parseNumber.apply(undefined,args);if(matched){var token={type:matched.type,value:matched.value,loc:location(line,column,index,matched.line,matched.column,matched.index,settings.source)};tokens.push(token);index=matched.index;line=matched.line;column=matched.column;}else{error(tokenizeErrorTypes.unexpectedSymbol(substring(input,index,index+1),settings.source,line,column),input,settings.source,line,column);}}return tokens;};var objectStates={_START_:0,OPEN_OBJECT:1,PROPERTY:2,COMMA:3};var propertyStates={_START_:0,KEY:1,COLON:2};var arrayStates={_START_:0,OPEN_ARRAY:1,VALUE:2,COMMA:3};var defaultSettings={loc:true,source:null};function errorEof(input,tokenList,settings){var loc=tokenList.length>0?tokenList[tokenList.length-1].loc.end:{line:1,column:1};error(parseErrorTypes.unexpectedEnd(),input,settings.source,loc.line,loc.column);}/** @param hexCode {string} hexCode without '\\u' prefix */function parseHexEscape(hexCode){var charCode=0;for(var i=0;i<4;i++){charCode=charCode*16+parseInt(hexCode[i],16);}return String.fromCharCode(charCode);}var escapes={'b':'\\b',// Backspace\n'f':'\\f',// Form feed\n'n':'\\n',// New line\n'r':'\\r',// Carriage return\n't':'\\t'// Horizontal tab\n};var passEscapes=['\"','\\\\','/'];function parseString(/** string */string){var result='';for(var i=0;i<string.length;i++){var char=string.charAt(i);if(char==='\\\\'){i++;var nextChar=string.charAt(i);if(nextChar==='u'){result+=parseHexEscape(string.substr(i+1,4));i+=4;}else if(passEscapes.indexOf(nextChar)!==-1){result+=nextChar;}else if(nextChar in escapes){result+=escapes[nextChar];}else{break;}}else{result+=char;}}return result;}function parseObject(input,tokenList,index,settings){// object: LEFT_BRACE (property (COMMA property)*)? RIGHT_BRACE\nvar startToken=void 0;var object={type:'Object',children:[]};var state=objectStates._START_;while(index<tokenList.length){var token=tokenList[index];switch(state){case objectStates._START_:{if(token.type===tokenTypes.LEFT_BRACE){startToken=token;state=objectStates.OPEN_OBJECT;index++;}else{return null;}break;}case objectStates.OPEN_OBJECT:{if(token.type===tokenTypes.RIGHT_BRACE){if(settings.loc){object.loc=location(startToken.loc.start.line,startToken.loc.start.column,startToken.loc.start.offset,token.loc.end.line,token.loc.end.column,token.loc.end.offset,settings.source);}return{value:object,index:index+1};}else{var property=parseProperty(input,tokenList,index,settings);object.children.push(property.value);state=objectStates.PROPERTY;index=property.index;}break;}case objectStates.PROPERTY:{if(token.type===tokenTypes.RIGHT_BRACE){if(settings.loc){object.loc=location(startToken.loc.start.line,startToken.loc.start.column,startToken.loc.start.offset,token.loc.end.line,token.loc.end.column,token.loc.end.offset,settings.source);}return{value:object,index:index+1};}else if(token.type===tokenTypes.COMMA){state=objectStates.COMMA;index++;}else{error(parseErrorTypes.unexpectedToken(substring(input,token.loc.start.offset,token.loc.end.offset),settings.source,token.loc.start.line,token.loc.start.column),input,settings.source,token.loc.start.line,token.loc.start.column);}break;}case objectStates.COMMA:{var _property=parseProperty(input,tokenList,index,settings);if(_property){index=_property.index;object.children.push(_property.value);state=objectStates.PROPERTY;}else{error(parseErrorTypes.unexpectedToken(substring(input,token.loc.start.offset,token.loc.end.offset),settings.source,token.loc.start.line,token.loc.start.column),input,settings.source,token.loc.start.line,token.loc.start.column);}break;}}}errorEof(input,tokenList,settings);}function parseProperty(input,tokenList,index,settings){// property: STRING COLON value\nvar startToken=void 0;var property={type:'Property',key:null,value:null};var state=propertyStates._START_;while(index<tokenList.length){var token=tokenList[index];switch(state){case propertyStates._START_:{if(token.type===tokenTypes.STRING){var key={type:'Identifier',value:parseString(input.slice(token.loc.start.offset+1,token.loc.end.offset-1)),raw:token.value};if(settings.loc){key.loc=token.loc;}startToken=token;property.key=key;state=propertyStates.KEY;index++;}else{return null;}break;}case propertyStates.KEY:{if(token.type===tokenTypes.COLON){state=propertyStates.COLON;index++;}else{error(parseErrorTypes.unexpectedToken(substring(input,token.loc.start.offset,token.loc.end.offset),settings.source,token.loc.start.line,token.loc.start.column),input,settings.source,token.loc.start.line,token.loc.start.column);}break;}case propertyStates.COLON:{var value=parseValue(input,tokenList,index,settings);property.value=value.value;if(settings.loc){property.loc=location(startToken.loc.start.line,startToken.loc.start.column,startToken.loc.start.offset,value.value.loc.end.line,value.value.loc.end.column,value.value.loc.end.offset,settings.source);}return{value:property,index:value.index};}}}}function parseArray(input,tokenList,index,settings){// array: LEFT_BRACKET (value (COMMA value)*)? RIGHT_BRACKET\nvar startToken=void 0;var array={type:'Array',children:[]};var state=arrayStates._START_;var token=void 0;while(index<tokenList.length){token=tokenList[index];switch(state){case arrayStates._START_:{if(token.type===tokenTypes.LEFT_BRACKET){startToken=token;state=arrayStates.OPEN_ARRAY;index++;}else{return null;}break;}case arrayStates.OPEN_ARRAY:{if(token.type===tokenTypes.RIGHT_BRACKET){if(settings.loc){array.loc=location(startToken.loc.start.line,startToken.loc.start.column,startToken.loc.start.offset,token.loc.end.line,token.loc.end.column,token.loc.end.offset,settings.source);}return{value:array,index:index+1};}else{var value=parseValue(input,tokenList,index,settings);index=value.index;array.children.push(value.value);state=arrayStates.VALUE;}break;}case arrayStates.VALUE:{if(token.type===tokenTypes.RIGHT_BRACKET){if(settings.loc){array.loc=location(startToken.loc.start.line,startToken.loc.start.column,startToken.loc.start.offset,token.loc.end.line,token.loc.end.column,token.loc.end.offset,settings.source);}return{value:array,index:index+1};}else if(token.type===tokenTypes.COMMA){state=arrayStates.COMMA;index++;}else{error(parseErrorTypes.unexpectedToken(substring(input,token.loc.start.offset,token.loc.end.offset),settings.source,token.loc.start.line,token.loc.start.column),input,settings.source,token.loc.start.line,token.loc.start.column);}break;}case arrayStates.COMMA:{var _value=parseValue(input,tokenList,index,settings);index=_value.index;array.children.push(_value.value);state=arrayStates.VALUE;break;}}}errorEof(input,tokenList,settings);}function parseLiteral(input,tokenList,index,settings){// literal: STRING | NUMBER | TRUE | FALSE | NULL\nvar token=tokenList[index];var value=null;switch(token.type){case tokenTypes.STRING:{value=parseString(input.slice(token.loc.start.offset+1,token.loc.end.offset-1));break;}case tokenTypes.NUMBER:{value=Number(token.value);break;}case tokenTypes.TRUE:{value=true;break;}case tokenTypes.FALSE:{value=false;break;}case tokenTypes.NULL:{value=null;break;}default:{return null;}}var literal={type:'Literal',value:value,raw:token.value};if(settings.loc){literal.loc=token.loc;}return{value:literal,index:index+1};}function parseValue(input,tokenList,index,settings){// value: literal | object | array\nvar token=tokenList[index];var value=parseLiteral.apply(undefined,arguments)||parseObject.apply(undefined,arguments)||parseArray.apply(undefined,arguments);if(value){return value;}else{error(parseErrorTypes.unexpectedToken(substring(input,token.loc.start.offset,token.loc.end.offset),settings.source,token.loc.start.line,token.loc.start.column),input,settings.source,token.loc.start.line,token.loc.start.column);}}var parse$1=function(input,settings){settings=Object.assign({},defaultSettings,settings);var tokenList=tokenize(input,settings);if(tokenList.length===0){errorEof(input,tokenList,settings);}var value=parseValue(input,tokenList,0,settings);if(value.index===tokenList.length){return value.value;}var token=tokenList[value.index];error(parseErrorTypes.unexpectedToken(substring(input,token.loc.start.offset,token.loc.end.offset),settings.source,token.loc.start.line,token.loc.start.column),input,settings.source,token.loc.start.line,token.loc.start.column);};return parse$1;});\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/json-to-ast/build.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : 0;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && typeof btoa !== 'undefined') {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js?");

/***/ })

}]);