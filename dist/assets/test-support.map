{"version":3,"sources":["vendor/ember-cli/test-support-prefix.js","vendor/ember/ember-testing.js","vendor/embroider-macros-test-support.js","vendor/ember-cli/test-support-suffix.js"],"sourcesContent":["\n","/*!\n * @overview  Ember - JavaScript Application Framework\n * @copyright Copyright 2011 Tilde Inc. and contributors\n *            Portions Copyright 2006-2011 Strobe Inc.\n *            Portions Copyright 2008-2011 Apple Inc. All rights reserved.\n * @license   Licensed under MIT license\n *            See https://raw.github.com/emberjs/ember.js/master/LICENSE\n * @version   6.4.0\n */\n/* eslint-disable no-var */\n/* globals global globalThis self */\n/* eslint-disable-next-line no-unused-vars */\nvar define, require;\n(function () {\n  var globalObj = typeof globalThis !== 'undefined' ? globalThis : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : null;\n  if (globalObj === null) {\n    throw new Error('unable to locate global object');\n  }\n  if (typeof globalObj.define === 'function' && typeof globalObj.require === 'function') {\n    define = globalObj.define;\n    require = globalObj.require;\n    return;\n  }\n  var registry = Object.create(null);\n  var seen = Object.create(null);\n  function missingModule(name, referrerName) {\n    if (referrerName) {\n      throw new Error('Could not find module ' + name + ' required by: ' + referrerName);\n    } else {\n      throw new Error('Could not find module ' + name);\n    }\n  }\n  function internalRequire(_name, referrerName) {\n    var name = _name;\n    var mod = registry[name];\n    if (!mod) {\n      name = name + '/index';\n      mod = registry[name];\n    }\n    var exports = seen[name];\n    if (exports !== undefined) {\n      return exports;\n    }\n    exports = seen[name] = {};\n    if (!mod) {\n      missingModule(_name, referrerName);\n    }\n    var deps = mod.deps;\n    var callback = mod.callback;\n    var reified = new Array(deps.length);\n    for (var i = 0; i < deps.length; i++) {\n      if (deps[i] === 'exports') {\n        reified[i] = exports;\n      } else if (deps[i] === 'require') {\n        reified[i] = require;\n      } else {\n        reified[i] = require(deps[i], name);\n      }\n    }\n    var result = callback.apply(this, reified);\n    if (!deps.includes('exports') || result !== undefined) {\n      exports = seen[name] = result;\n    }\n    return exports;\n  }\n  require = function (name) {\n    return internalRequire(name, null);\n  };\n  define = function (name, deps, callback) {\n    registry[name] = {\n      deps: deps,\n      callback: callback\n    };\n  };\n\n  // setup `require` module\n  require['default'] = require;\n  require.has = function registryHas(moduleName) {\n    return Boolean(registry[moduleName]) || Boolean(registry[moduleName + '/index']);\n  };\n  require._eak_seen = require.entries = registry;\n})();\n(function (runtime, runloop, errorHandling, EmberObject, debug, EmberApplication, Internals, Router, test) {\n  'use strict';\n\n  function d(name, mod) {\n    Object.defineProperty(mod, '__esModule', {\n      value: true\n    });\n    define(name, [], () => mod);\n  }\n  function run(fn) {\n    if (!runloop._getCurrentRunLoop()) {\n      return runloop.run(fn);\n    } else {\n      return fn();\n    }\n  }\n  const emberTestingLibTestRun = /*#__PURE__*/Object.defineProperty({\n    __proto__: null,\n    default: run\n  }, Symbol.toStringTag, {\n    value: 'Module'\n  });\n  let lastPromise = null;\n  class TestPromise extends runtime.RSVP.Promise {\n    constructor(executor, label) {\n      super(executor, label);\n      lastPromise = this;\n    }\n    then(onFulfilled, onRejected, label) {\n      let normalizedOnFulfilled = typeof onFulfilled === 'function' ? result => isolate(onFulfilled, result) : undefined;\n      return super.then(normalizedOnFulfilled, onRejected, label);\n    }\n  }\n\n  /**\n    This returns a thenable tailored for testing.  It catches failed\n    `onSuccess` callbacks and invokes the `Ember.Test.adapter.exception`\n    callback in the last chained then.\n     This method should be returned by async helpers such as `wait`.\n     @public\n    @for Ember.Test\n    @method promise\n    @param {Function} resolver The function used to resolve the promise.\n    @param {String} label An optional string for identifying the promise.\n  */\n  function promise(resolver, label) {\n    let fullLabel = `Ember.Test.promise: ${label || '<Unknown Promise>'}`;\n    return new TestPromise(resolver, fullLabel);\n  }\n\n  /**\n    Replacement for `Ember.RSVP.resolve`\n    The only difference is this uses\n    an instance of `Ember.Test.Promise`\n     @public\n    @for Ember.Test\n    @method resolve\n    @param {Mixed} The value to resolve\n    @since 1.2.0\n  */\n  function resolve(result, label) {\n    return TestPromise.resolve(result, label);\n  }\n  function getLastPromise() {\n    return lastPromise;\n  }\n\n  // This method isolates nested async methods\n  // so that they don't conflict with other last promises.\n  //\n  // 1. Set `Ember.Test.lastPromise` to null\n  // 2. Invoke method\n  // 3. Return the last promise created during method\n  function isolate(onFulfilled, result) {\n    // Reset lastPromise for nested helpers\n    lastPromise = null;\n    let value = onFulfilled(result);\n    let promise = lastPromise;\n    lastPromise = null;\n\n    // If the method returned a promise\n    // return that promise. If not,\n    // return the last async helper's promise\n    if (value && value instanceof TestPromise || !promise) {\n      return value;\n    } else {\n      return run(() => resolve(promise).then(() => value));\n    }\n  }\n  const emberTestingLibTestPromise = /*#__PURE__*/Object.defineProperty({\n    __proto__: null,\n    default: TestPromise,\n    getLastPromise,\n    promise,\n    resolve\n  }, Symbol.toStringTag, {\n    value: 'Module'\n  });\n  const helpers = {};\n  /**\n   @module @ember/test\n  */\n\n  /**\n    `registerHelper` is used to register a test helper that will be injected\n    when `App.injectTestHelpers` is called.\n     The helper method will always be called with the current Application as\n    the first parameter.\n     For example:\n     ```javascript\n    import { registerHelper } from '@ember/test';\n    import { run } from '@ember/runloop';\n     registerHelper('boot', function(app) {\n      run(app, app.advanceReadiness);\n    });\n    ```\n     This helper can later be called without arguments because it will be\n    called with `app` as the first parameter.\n     ```javascript\n    import Application from '@ember/application';\n     App = Application.create();\n    App.injectTestHelpers();\n    boot();\n    ```\n     @public\n    @for @ember/test\n    @static\n    @method registerHelper\n    @param {String} name The name of the helper method to add.\n    @param {Function} helperMethod\n    @param options {Object}\n  */\n  function registerHelper(name, helperMethod) {\n    helpers[name] = {\n      method: helperMethod,\n      meta: {\n        wait: false\n      }\n    };\n  }\n\n  /**\n    `registerAsyncHelper` is used to register an async test helper that will be injected\n    when `App.injectTestHelpers` is called.\n     The helper method will always be called with the current Application as\n    the first parameter.\n     For example:\n     ```javascript\n    import { registerAsyncHelper } from '@ember/test';\n    import { run } from '@ember/runloop';\n     registerAsyncHelper('boot', function(app) {\n      run(app, app.advanceReadiness);\n    });\n    ```\n     The advantage of an async helper is that it will not run\n    until the last async helper has completed.  All async helpers\n    after it will wait for it complete before running.\n      For example:\n     ```javascript\n    import { registerAsyncHelper } from '@ember/test';\n     registerAsyncHelper('deletePost', function(app, postId) {\n      click('.delete-' + postId);\n    });\n     // ... in your test\n    visit('/post/2');\n    deletePost(2);\n    visit('/post/3');\n    deletePost(3);\n    ```\n     @public\n    @for @ember/test\n    @method registerAsyncHelper\n    @param {String} name The name of the helper method to add.\n    @param {Function} helperMethod\n    @since 1.2.0\n  */\n  function registerAsyncHelper(name, helperMethod) {\n    helpers[name] = {\n      method: helperMethod,\n      meta: {\n        wait: true\n      }\n    };\n  }\n\n  /**\n    Remove a previously added helper method.\n     Example:\n     ```javascript\n    import { unregisterHelper } from '@ember/test';\n     unregisterHelper('wait');\n    ```\n     @public\n    @method unregisterHelper\n    @static\n    @for @ember/test\n    @param {String} name The helper to remove.\n  */\n  function unregisterHelper(name) {\n    delete helpers[name];\n    // SAFETY: This isn't necessarily a safe thing to do, but in terms of the immediate types here\n    // it won't error.\n    delete TestPromise.prototype[name];\n  }\n  const emberTestingLibTestHelpers = /*#__PURE__*/Object.defineProperty({\n    __proto__: null,\n    helpers,\n    registerAsyncHelper,\n    registerHelper,\n    unregisterHelper\n  }, Symbol.toStringTag, {\n    value: 'Module'\n  });\n  const callbacks$1 = [];\n\n  /**\n    Used to register callbacks to be fired whenever `App.injectTestHelpers`\n    is called.\n     The callback will receive the current application as an argument.\n     Example:\n     ```javascript\n    import $ from 'jquery';\n     Ember.Test.onInjectHelpers(function() {\n      $(document).ajaxSend(function() {\n        Test.pendingRequests++;\n      });\n       $(document).ajaxComplete(function() {\n        Test.pendingRequests--;\n      });\n    });\n    ```\n     @public\n    @for Ember.Test\n    @method onInjectHelpers\n    @param {Function} callback The function to be called.\n  */\n  function onInjectHelpers(callback) {\n    callbacks$1.push(callback);\n  }\n  function invokeInjectHelpersCallbacks(app) {\n    for (let callback of callbacks$1) {\n      callback(app);\n    }\n  }\n  const emberTestingLibTestOnInjectHelpers = /*#__PURE__*/Object.defineProperty({\n    __proto__: null,\n    callbacks: callbacks$1,\n    invokeInjectHelpersCallbacks,\n    onInjectHelpers\n  }, Symbol.toStringTag, {\n    value: 'Module'\n  });\n\n  /**\n   @module @ember/test\n  */\n  const contexts = [];\n  const callbacks = [];\n\n  /**\n     This allows ember-testing to play nicely with other asynchronous\n     events, such as an application that is waiting for a CSS3\n     transition or an IndexDB transaction. The waiter runs periodically\n     after each async helper (i.e. `click`, `andThen`, `visit`, etc) has executed,\n     until the returning result is truthy. After the waiters finish, the next async helper\n     is executed and the process repeats.\n      For example:\n      ```javascript\n     import { registerWaiter } from '@ember/test';\n      registerWaiter(function() {\n       return myPendingTransactions() === 0;\n     });\n     ```\n     The `context` argument allows you to optionally specify the `this`\n     with which your callback will be invoked.\n      For example:\n      ```javascript\n     import { registerWaiter } from '@ember/test';\n      registerWaiter(MyDB, MyDB.hasPendingTransactions);\n     ```\n      @public\n     @for @ember/test\n     @static\n     @method registerWaiter\n     @param {Object} context (optional)\n     @param {Function} callback\n     @since 1.2.0\n  */\n\n  function registerWaiter(\n  // Formatting makes a pretty big difference in how readable this is.\n  // prettier-ignore\n  ...args) {\n    let checkedCallback;\n    let checkedContext;\n    if (args.length === 1) {\n      checkedContext = null;\n      checkedCallback = args[0];\n    } else {\n      checkedContext = args[0];\n      checkedCallback = args[1];\n    }\n    if (indexOf(checkedContext, checkedCallback) > -1) {\n      return;\n    }\n    contexts.push(checkedContext);\n    callbacks.push(checkedCallback);\n  }\n\n  /**\n     `unregisterWaiter` is used to unregister a callback that was\n     registered with `registerWaiter`.\n      @public\n     @for @ember/test\n     @static\n     @method unregisterWaiter\n     @param {Object} context (optional)\n     @param {Function} callback\n     @since 1.2.0\n  */\n  function unregisterWaiter(context, callback) {\n    if (!callbacks.length) {\n      return;\n    }\n    if (arguments.length === 1) {\n      callback = context;\n      context = null;\n    }\n    let i = indexOf(context, callback);\n    if (i === -1) {\n      return;\n    }\n    contexts.splice(i, 1);\n    callbacks.splice(i, 1);\n  }\n\n  /**\n    Iterates through each registered test waiter, and invokes\n    its callback. If any waiter returns false, this method will return\n    true indicating that the waiters have not settled yet.\n     This is generally used internally from the acceptance/integration test\n    infrastructure.\n     @public\n    @for @ember/test\n    @static\n    @method checkWaiters\n  */\n  function checkWaiters() {\n    if (!callbacks.length) {\n      return false;\n    }\n    for (let i = 0; i < callbacks.length; i++) {\n      let context = contexts[i];\n      let callback = callbacks[i];\n      // SAFETY: The loop ensures that this exists\n      if (!callback.call(context)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  function indexOf(context, callback) {\n    for (let i = 0; i < callbacks.length; i++) {\n      if (callbacks[i] === callback && contexts[i] === context) {\n        return i;\n      }\n    }\n    return -1;\n  }\n  const emberTestingLibTestWaiters = /*#__PURE__*/Object.defineProperty({\n    __proto__: null,\n    checkWaiters,\n    registerWaiter,\n    unregisterWaiter\n  }, Symbol.toStringTag, {\n    value: 'Module'\n  });\n  let adapter;\n  function getAdapter() {\n    return adapter;\n  }\n  function setAdapter(value) {\n    adapter = value;\n    if (value && typeof value.exception === 'function') {\n      errorHandling.setDispatchOverride(adapterDispatch);\n    } else {\n      errorHandling.setDispatchOverride(null);\n    }\n  }\n  function asyncStart() {\n    if (adapter) {\n      adapter.asyncStart();\n    }\n  }\n  function asyncEnd() {\n    if (adapter) {\n      adapter.asyncEnd();\n    }\n  }\n  function adapterDispatch(error) {\n    adapter.exception(error);\n\n    // @ts-expect-error Normally unreachable\n    console.error(error.stack); // eslint-disable-line no-console\n  }\n  const emberTestingLibTestAdapter = /*#__PURE__*/Object.defineProperty({\n    __proto__: null,\n    asyncEnd,\n    asyncStart,\n    getAdapter,\n    setAdapter\n  }, Symbol.toStringTag, {\n    value: 'Module'\n  });\n\n  /**\n    @module ember\n  */\n\n  /**\n    This is a container for an assortment of testing related functionality:\n     * Choose your default test adapter (for your framework of choice).\n    * Register/Unregister additional test helpers.\n    * Setup callbacks to be fired when the test helpers are injected into\n      your application.\n     @class Test\n    @namespace Ember\n    @public\n  */\n  const Test = {\n    /**\n      Hash containing all known test helpers.\n       @property _helpers\n      @private\n      @since 1.7.0\n    */\n    _helpers: helpers,\n    registerHelper,\n    registerAsyncHelper,\n    unregisterHelper,\n    onInjectHelpers,\n    Promise: TestPromise,\n    promise,\n    resolve,\n    registerWaiter,\n    unregisterWaiter,\n    checkWaiters\n  };\n\n  /**\n   Used to allow ember-testing to communicate with a specific testing\n   framework.\n    You can manually set it before calling `App.setupForTesting()`.\n    Example:\n    ```javascript\n   Ember.Test.adapter = MyCustomAdapter.create()\n   ```\n    If you do not set it, ember-testing will default to `Ember.Test.QUnitAdapter`.\n    @public\n   @for Ember.Test\n   @property adapter\n   @type {Class} The adapter to be used.\n   @default Ember.Test.QUnitAdapter\n  */\n  Object.defineProperty(Test, 'adapter', {\n    get: getAdapter,\n    set: setAdapter\n  });\n  const emberTestingLibTest = /*#__PURE__*/Object.defineProperty({\n    __proto__: null,\n    default: Test\n  }, Symbol.toStringTag, {\n    value: 'Module'\n  });\n\n  /**\n   @module @ember/test\n  */\n\n  /**\n    The primary purpose of this class is to create hooks that can be implemented\n    by an adapter for various test frameworks.\n     @class TestAdapter\n    @public\n  */\n\n  const Adapter = EmberObject.default.extend({\n    /**\n      This callback will be called whenever an async operation is about to start.\n       Override this to call your framework's methods that handle async\n      operations.\n       @public\n      @method asyncStart\n    */\n    asyncStart() {},\n    /**\n      This callback will be called whenever an async operation has completed.\n       @public\n      @method asyncEnd\n    */\n    asyncEnd() {},\n    /**\n      Override this method with your testing framework's false assertion.\n      This function is called whenever an exception occurs causing the testing\n      promise to fail.\n       QUnit example:\n       ```javascript\n        exception: function(error) {\n          ok(false, error);\n        };\n      ```\n       @public\n      @method exception\n      @param {String} error The exception to be raised.\n    */\n    exception(error) {\n      throw error;\n    }\n  });\n  const emberTestingLibAdaptersAdapter = /*#__PURE__*/Object.defineProperty({\n    __proto__: null,\n    default: Adapter\n  }, Symbol.toStringTag, {\n    value: 'Module'\n  });\n\n  /* globals QUnit */\n\n  function isVeryOldQunit(obj) {\n    return obj != null && typeof obj.stop === 'function';\n  }\n\n  /**\n     @module ember\n  */\n  /**\n    This class implements the methods defined by TestAdapter for the\n    QUnit testing framework.\n     @class QUnitAdapter\n    @namespace Ember.Test\n    @extends TestAdapter\n    @public\n  */\n\n  const QUnitAdapter = Adapter.extend({\n    init() {\n      this.doneCallbacks = [];\n    },\n    asyncStart() {\n      if (isVeryOldQunit(QUnit)) {\n        // very old QUnit version\n        // eslint-disable-next-line qunit/no-qunit-stop\n        QUnit.stop();\n      } else {\n        this.doneCallbacks.push(QUnit.config.current ? QUnit.config.current.assert.async() : null);\n      }\n    },\n    asyncEnd() {\n      // checking for QUnit.stop here (even though we _need_ QUnit.start) because\n      // QUnit.start() still exists in QUnit 2.x (it just throws an error when calling\n      // inside a test context)\n      if (isVeryOldQunit(QUnit)) {\n        QUnit.start();\n      } else {\n        let done = this.doneCallbacks.pop();\n        // This can be null if asyncStart() was called outside of a test\n        if (done) {\n          done();\n        }\n      }\n    },\n    exception(error) {\n      QUnit.config.current.assert.ok(false, debug.inspect(error));\n    }\n  });\n  const emberTestingLibAdaptersQunit = /*#__PURE__*/Object.defineProperty({\n    __proto__: null,\n    default: QUnitAdapter\n  }, Symbol.toStringTag, {\n    value: 'Module'\n  });\n\n  /* global self */\n\n  /**\n    Sets Ember up for testing. This is useful to perform\n    basic setup steps in order to unit test.\n     Use `App.setupForTesting` to perform integration tests (full\n    application testing).\n     @method setupForTesting\n    @namespace Ember\n    @since 1.5.0\n    @private\n  */\n  function setupForTesting() {\n    debug.setTesting(true);\n    let adapter = getAdapter();\n    // if adapter is not manually set default to QUnit\n    if (!adapter) {\n      setAdapter(typeof self.QUnit === 'undefined' ? Adapter.create() : QUnitAdapter.create());\n    }\n  }\n  const emberTestingLibSetupForTesting = /*#__PURE__*/Object.defineProperty({\n    __proto__: null,\n    default: setupForTesting\n  }, Symbol.toStringTag, {\n    value: 'Module'\n  });\n  EmberApplication.default.reopen({\n    /**\n     This property contains the testing helpers for the current application. These\n     are created once you call `injectTestHelpers` on your `Application`\n     instance. The included helpers are also available on the `window` object by\n     default, but can be used from this object on the individual application also.\n       @property testHelpers\n      @type {Object}\n      @default {}\n      @public\n    */\n    testHelpers: {},\n    /**\n     This property will contain the original methods that were registered\n     on the `helperContainer` before `injectTestHelpers` is called.\n      When `removeTestHelpers` is called, these methods are restored to the\n     `helperContainer`.\n       @property originalMethods\n      @type {Object}\n      @default {}\n      @private\n      @since 1.3.0\n    */\n    originalMethods: {},\n    /**\n    This property indicates whether or not this application is currently in\n    testing mode. This is set when `setupForTesting` is called on the current\n    application.\n     @property testing\n    @type {Boolean}\n    @default false\n    @since 1.3.0\n    @public\n    */\n    testing: false,\n    /**\n      This hook defers the readiness of the application, so that you can start\n      the app when your tests are ready to run. It also sets the router's\n      location to 'none', so that the window's location will not be modified\n      (preventing both accidental leaking of state between tests and interference\n      with your testing framework). `setupForTesting` should only be called after\n      setting a custom `router` class (for example `App.Router = Router.extend(`).\n       Example:\n       ```\n      App.setupForTesting();\n      ```\n       @method setupForTesting\n      @public\n    */\n    setupForTesting() {\n      setupForTesting();\n      this.testing = true;\n      this.resolveRegistration('router:main').reopen({\n        location: 'none'\n      });\n    },\n    /**\n      This will be used as the container to inject the test helpers into. By\n      default the helpers are injected into `window`.\n       @property helperContainer\n      @type {Object} The object to be used for test helpers.\n      @default window\n      @since 1.2.0\n      @private\n    */\n    helperContainer: null,\n    /**\n      This injects the test helpers into the `helperContainer` object. If an object is provided\n      it will be used as the helperContainer. If `helperContainer` is not set it will default\n      to `window`. If a function of the same name has already been defined it will be cached\n      (so that it can be reset if the helper is removed with `unregisterHelper` or\n      `removeTestHelpers`).\n       Any callbacks registered with `onInjectHelpers` will be called once the\n      helpers have been injected.\n       Example:\n      ```\n      App.injectTestHelpers();\n      ```\n       @method injectTestHelpers\n      @public\n    */\n    injectTestHelpers(helperContainer) {\n      if (helperContainer) {\n        this.helperContainer = helperContainer;\n      } else {\n        this.helperContainer = window;\n      }\n      this.reopen({\n        willDestroy() {\n          this._super(...arguments);\n          this.removeTestHelpers();\n        }\n      });\n      this.testHelpers = {};\n      for (let name in helpers) {\n        // SAFETY: It is safe to access a property on an object\n        this.originalMethods[name] = this.helperContainer[name];\n        // SAFETY: It is not quite as safe to do this, but it _seems_ to be ok.\n        this.testHelpers[name] = this.helperContainer[name] = helper(this, name);\n        // SAFETY: We checked that it exists\n        protoWrap(TestPromise.prototype, name, helper(this, name), helpers[name].meta.wait);\n      }\n      invokeInjectHelpersCallbacks(this);\n    },\n    /**\n      This removes all helpers that have been registered, and resets and functions\n      that were overridden by the helpers.\n       Example:\n       ```javascript\n      App.removeTestHelpers();\n      ```\n       @public\n      @method removeTestHelpers\n    */\n    removeTestHelpers() {\n      if (!this.helperContainer) {\n        return;\n      }\n      for (let name in helpers) {\n        this.helperContainer[name] = this.originalMethods[name];\n        // SAFETY: This is a weird thing, but it's not technically unsafe here.\n        delete TestPromise.prototype[name];\n        delete this.testHelpers[name];\n        delete this.originalMethods[name];\n      }\n    }\n  });\n\n  // This method is no longer needed\n  // But still here for backwards compatibility\n  // of helper chaining\n  function protoWrap(proto, name, callback, isAsync) {\n    // SAFETY: This isn't entirely safe, but it _seems_ to be ok.\n    proto[name] = function (...args) {\n      if (isAsync) {\n        return callback.apply(this, args);\n      } else {\n        // SAFETY: This is not actually safe.\n        return this.then(function () {\n          return callback.apply(this, args);\n        });\n      }\n    };\n  }\n  function helper(app, name) {\n    let helper = helpers[name];\n    !helper && debug.assert(`[BUG] Missing helper: ${name}`, helper);\n    let fn = helper.method;\n    let meta = helper.meta;\n    if (!meta.wait) {\n      return (...args) => fn.apply(app, [app, ...args]);\n    }\n    return (...args) => {\n      let lastPromise = run(() => resolve(getLastPromise()));\n\n      // wait for last helper's promise to resolve and then\n      // execute. To be safe, we need to tell the adapter we're going\n      // asynchronous here, because fn may not be invoked before we\n      // return.\n      asyncStart();\n      return lastPromise.then(() => fn.apply(app, [app, ...args])).finally(asyncEnd);\n    };\n  }\n  const emberTestingLibExtApplication = /*#__PURE__*/Object.defineProperty({\n    __proto__: null\n  }, Symbol.toStringTag, {\n    value: 'Module'\n  });\n  runtime.RSVP.configure('async', function (callback, promise) {\n    // if schedule will cause autorun, we need to inform adapter\n    runloop._backburner.schedule('actions', () => callback(promise));\n  });\n  const emberTestingLibExtRsvp = /*#__PURE__*/Object.defineProperty({\n    __proto__: null,\n    default: runtime.RSVP\n  }, Symbol.toStringTag, {\n    value: 'Module'\n  });\n  function andThen(app, callback) {\n    let wait = app.testHelpers['wait'];\n    !wait && debug.assert('[BUG] Missing wait helper', wait);\n    return wait(callback(app));\n  }\n  const emberTestingLibHelpersAndThen = /*#__PURE__*/Object.defineProperty({\n    __proto__: null,\n    default: andThen\n  }, Symbol.toStringTag, {\n    value: 'Module'\n  });\n\n  /**\n  @module ember\n  */\n\n  /**\n    Returns the current path.\n   Example:\n   ```javascript\n  function validateURL() {\n    equal(currentPath(), 'some.path.index', \"correct path was transitioned into.\");\n  }\n   click('#some-link-id').then(validateURL);\n  ```\n   @method currentPath\n  @return {Object} The currently active path.\n  @since 1.5.0\n  @public\n  */\n  function currentPath(app) {\n    !app.__container__ && debug.assert('[BUG] app.__container__ is not set', app.__container__);\n    let routingService = app.__container__.lookup('service:-routing');\n    !(routingService instanceof Internals.RoutingService) && debug.assert('[BUG] service:-routing is not a RoutingService', routingService instanceof Internals.RoutingService);\n    return EmberObject.get(routingService, 'currentPath');\n  }\n  const emberTestingLibHelpersCurrentPath = /*#__PURE__*/Object.defineProperty({\n    __proto__: null,\n    default: currentPath\n  }, Symbol.toStringTag, {\n    value: 'Module'\n  });\n\n  /**\n  @module ember\n  */\n  /**\n    Returns the currently active route name.\n   Example:\n   ```javascript\n  function validateRouteName() {\n    equal(currentRouteName(), 'some.path', \"correct route was transitioned into.\");\n  }\n  visit('/some/path').then(validateRouteName)\n  ```\n   @method currentRouteName\n  @return {Object} The name of the currently active route.\n  @since 1.5.0\n  @public\n  */\n  function currentRouteName(app) {\n    !app.__container__ && debug.assert('[BUG] app.__container__ is not set', app.__container__);\n    let routingService = app.__container__.lookup('service:-routing');\n    !(routingService instanceof Internals.RoutingService) && debug.assert('[BUG] service:-routing is not a RoutingService', routingService instanceof Internals.RoutingService);\n    return EmberObject.get(routingService, 'currentRouteName');\n  }\n  const emberTestingLibHelpersCurrentRouteName = /*#__PURE__*/Object.defineProperty({\n    __proto__: null,\n    default: currentRouteName\n  }, Symbol.toStringTag, {\n    value: 'Module'\n  });\n\n  /**\n  @module ember\n  */\n\n  /**\n    Returns the current URL.\n   Example:\n   ```javascript\n  function validateURL() {\n    equal(currentURL(), '/some/path', \"correct URL was transitioned into.\");\n  }\n   click('#some-link-id').then(validateURL);\n  ```\n   @method currentURL\n  @return {Object} The currently active URL.\n  @since 1.5.0\n  @public\n  */\n  function currentURL(app) {\n    !app.__container__ && debug.assert('[BUG] app.__container__ is not set', app.__container__);\n    let router = app.__container__.lookup('router:main');\n    !(router instanceof Router.default) && debug.assert('[BUG] router:main is not a Router', router instanceof Router.default);\n    let location = EmberObject.get(router, 'location');\n    !(typeof location !== 'string') && debug.assert('[BUG] location is still a string', typeof location !== 'string');\n    return location.getURL();\n  }\n  const emberTestingLibHelpersCurrentUrl = /*#__PURE__*/Object.defineProperty({\n    __proto__: null,\n    default: currentURL\n  }, Symbol.toStringTag, {\n    value: 'Module'\n  });\n\n  /**\n  @module ember\n  */\n  let resume;\n\n  /**\n   Resumes a test paused by `pauseTest`.\n    @method resumeTest\n   @return {void}\n   @public\n  */\n  function resumeTest() {\n    !resume && debug.assert('Testing has not been paused. There is nothing to resume.', resume);\n    resume();\n    resume = undefined;\n  }\n\n  /**\n   Pauses the current test - this is useful for debugging while testing or for test-driving.\n   It allows you to inspect the state of your application at any point.\n   Example (The test will pause before clicking the button):\n    ```javascript\n   visit('/')\n   return pauseTest();\n   click('.btn');\n   ```\n    You may want to turn off the timeout before pausing.\n    qunit (timeout available to use as of 2.4.0):\n    ```\n   visit('/');\n   assert.timeout(0);\n   return pauseTest();\n   click('.btn');\n   ```\n    mocha (timeout happens automatically as of ember-mocha v0.14.0):\n    ```\n   visit('/');\n   this.timeout(0);\n   return pauseTest();\n   click('.btn');\n   ```\n     @since 1.9.0\n   @method pauseTest\n   @return {Object} A promise that will never resolve\n   @public\n  */\n  function pauseTest() {\n    debug.info('Testing paused. Use `resumeTest()` to continue.');\n    return new runtime.RSVP.Promise(resolve => {\n      resume = resolve;\n    }, 'TestAdapter paused promise');\n  }\n  const emberTestingLibHelpersPauseTest = /*#__PURE__*/Object.defineProperty({\n    __proto__: null,\n    pauseTest,\n    resumeTest\n  }, Symbol.toStringTag, {\n    value: 'Module'\n  });\n\n  /**\n    Loads a route, sets up any controllers, and renders any templates associated\n    with the route as though a real user had triggered the route change while\n    using your app.\n     Example:\n     ```javascript\n    visit('posts/index').then(function() {\n      // assert something\n    });\n    ```\n     @method visit\n    @param {String} url the name of the route\n    @return {RSVP.Promise<undefined>}\n    @public\n  */\n  function visit(app, url) {\n    !app.__container__ && debug.assert('[BUG] Missing container', app.__container__);\n    const router = app.__container__.lookup('router:main');\n    !(router instanceof Router.default) && debug.assert('[BUG] router:main is not a Router', router instanceof Router.default);\n    let shouldHandleURL = false;\n    app.boot().then(() => {\n      !(typeof router.location !== 'string') && debug.assert('[BUG] router.location is still a string', typeof router.location !== 'string');\n      router.location.setURL(url);\n      if (shouldHandleURL) {\n        !app.__deprecatedInstance__ && debug.assert(\"[BUG] __deprecatedInstance__ isn't set\", app.__deprecatedInstance__);\n        runloop.run(app.__deprecatedInstance__, 'handleURL', url);\n      }\n    });\n    if (app._readinessDeferrals > 0) {\n      // SAFETY: This should be safe, though it is odd.\n      router.initialURL = url;\n      runloop.run(app, 'advanceReadiness');\n      delete router.initialURL;\n    } else {\n      shouldHandleURL = true;\n    }\n    let wait = app.testHelpers['wait'];\n    !wait && debug.assert('[BUG] missing wait helper', wait);\n    return wait();\n  }\n  const emberTestingLibHelpersVisit = /*#__PURE__*/Object.defineProperty({\n    __proto__: null,\n    default: visit\n  }, Symbol.toStringTag, {\n    value: 'Module'\n  });\n  let requests = [];\n  function pendingRequests() {\n    return requests.length;\n  }\n  function clearPendingRequests() {\n    requests.length = 0;\n  }\n  function incrementPendingRequests(_, xhr) {\n    requests.push(xhr);\n  }\n  function decrementPendingRequests(_, xhr) {\n    setTimeout(function () {\n      for (let i = 0; i < requests.length; i++) {\n        if (xhr === requests[i]) {\n          requests.splice(i, 1);\n          break;\n        }\n      }\n    }, 0);\n  }\n  const emberTestingLibTestPendingRequests = /*#__PURE__*/Object.defineProperty({\n    __proto__: null,\n    clearPendingRequests,\n    decrementPendingRequests,\n    incrementPendingRequests,\n    pendingRequests\n  }, Symbol.toStringTag, {\n    value: 'Module'\n  });\n\n  /**\n  @module ember\n  */\n\n  /**\n    Causes the run loop to process any pending events. This is used to ensure that\n    any async operations from other helpers (or your assertions) have been processed.\n     This is most often used as the return value for the helper functions (see 'click',\n    'fillIn','visit',etc). However, there is a method to register a test helper which\n    utilizes this method without the need to actually call `wait()` in your helpers.\n     The `wait` helper is built into `registerAsyncHelper` by default. You will not need\n    to `return app.testHelpers.wait();` - the wait behavior is provided for you.\n     Example:\n     ```javascript\n    import { registerAsyncHelper } from '@ember/test';\n     registerAsyncHelper('loginUser', function(app, username, password) {\n      visit('secured/path/here')\n        .fillIn('#username', username)\n        .fillIn('#password', password)\n        .click('.submit');\n    });\n    ```\n     @method wait\n    @param {Object} value The value to be returned.\n    @return {RSVP.Promise<any>} Promise that resolves to the passed value.\n    @public\n    @since 1.0.0\n  */\n  function wait(app, value) {\n    return new runtime.RSVP.Promise(function (resolve) {\n      !app.__container__ && debug.assert('[BUG] Missing container', app.__container__);\n      const router = app.__container__.lookup('router:main');\n      !(router instanceof Router.default) && debug.assert('[BUG] Expected router:main to be a subclass of Ember Router', router instanceof Router.default); // Every 10ms, poll for the async thing to have finished\n      let watcher = setInterval(() => {\n        // 1. If the router is loading, keep polling\n        let routerIsLoading = router._routerMicrolib && Boolean(router._routerMicrolib.activeTransition);\n        if (routerIsLoading) {\n          return;\n        }\n\n        // 2. If there are pending Ajax requests, keep polling\n        if (pendingRequests()) {\n          return;\n        }\n\n        // 3. If there are scheduled timers or we are inside of a run loop, keep polling\n        if (runloop._hasScheduledTimers() || runloop._getCurrentRunLoop()) {\n          return;\n        }\n        if (checkWaiters()) {\n          return;\n        }\n\n        // Stop polling\n        clearInterval(watcher);\n\n        // Synchronously resolve the promise\n        runloop.run(null, resolve, value);\n      }, 10);\n    });\n  }\n  const emberTestingLibHelpersWait = /*#__PURE__*/Object.defineProperty({\n    __proto__: null,\n    default: wait\n  }, Symbol.toStringTag, {\n    value: 'Module'\n  });\n  registerAsyncHelper('visit', visit);\n  registerAsyncHelper('wait', wait);\n  registerAsyncHelper('andThen', andThen);\n  registerAsyncHelper('pauseTest', pauseTest);\n  registerHelper('currentRouteName', currentRouteName);\n  registerHelper('currentPath', currentPath);\n  registerHelper('currentURL', currentURL);\n  registerHelper('resumeTest', resumeTest);\n  const emberTestingLibHelpers = /*#__PURE__*/Object.defineProperty({\n    __proto__: null\n  }, Symbol.toStringTag, {\n    value: 'Module'\n  });\n  let name = 'deferReadiness in `testing` mode';\n  EmberApplication.onLoad('Ember.Application', function (ApplicationClass) {\n    if (!ApplicationClass.initializers[name]) {\n      ApplicationClass.initializer({\n        name: name,\n        initialize(application) {\n          if (application.testing) {\n            application.deferReadiness();\n          }\n        }\n      });\n    }\n  });\n  const emberTestingLibInitializers = /*#__PURE__*/Object.defineProperty({\n    __proto__: null\n  }, Symbol.toStringTag, {\n    value: 'Module'\n  });\n\n  // to setup initializer\n\n  const emberTestingLibPublicApi = /*#__PURE__*/Object.defineProperty({\n    __proto__: null,\n    Adapter,\n    QUnitAdapter,\n    Test,\n    setupForTesting\n  }, Symbol.toStringTag, {\n    value: 'Module'\n  });\n  test.registerTestImplementation(emberTestingLibPublicApi);\n  const emberTestingIndex = /*#__PURE__*/Object.defineProperty({\n    __proto__: null,\n    Adapter,\n    QUnitAdapter,\n    Test,\n    setupForTesting\n  }, Symbol.toStringTag, {\n    value: 'Module'\n  });\n\n  /* eslint-disable */\n\n  d('ember-testing/index', emberTestingIndex);\n  d('ember-testing/lib/adapters/adapter', emberTestingLibAdaptersAdapter);\n  d('ember-testing/lib/adapters/qunit', emberTestingLibAdaptersQunit);\n  d('ember-testing/lib/ext/application', emberTestingLibExtApplication);\n  d('ember-testing/lib/ext/rsvp', emberTestingLibExtRsvp);\n  d('ember-testing/lib/helpers', emberTestingLibHelpers);\n  d('ember-testing/lib/helpers/and_then', emberTestingLibHelpersAndThen);\n  d('ember-testing/lib/helpers/current_path', emberTestingLibHelpersCurrentPath);\n  d('ember-testing/lib/helpers/current_route_name', () => emberTestingLibHelpersCurrentRouteName);\n  d('ember-testing/lib/helpers/current_url', emberTestingLibHelpersCurrentUrl);\n  d('ember-testing/lib/helpers/pause_test', emberTestingLibHelpersPauseTest);\n  d('ember-testing/lib/helpers/visit', emberTestingLibHelpersVisit);\n  d('ember-testing/lib/helpers/wait', emberTestingLibHelpersWait);\n  d('ember-testing/lib/initializers', emberTestingLibInitializers);\n  d('ember-testing/lib/public-api', emberTestingLibPublicApi);\n  d('ember-testing/lib/setup_for_testing', emberTestingLibSetupForTesting);\n  d('ember-testing/lib/test', emberTestingLibTest);\n  d('ember-testing/lib/test/adapter', emberTestingLibTestAdapter);\n  d('ember-testing/lib/test/helpers', emberTestingLibTestHelpers);\n  d('ember-testing/lib/test/on_inject_helpers', emberTestingLibTestOnInjectHelpers);\n  d('ember-testing/lib/test/pending_requests', emberTestingLibTestPendingRequests);\n  d('ember-testing/lib/test/promise', emberTestingLibTestPromise);\n  d('ember-testing/lib/test/run', emberTestingLibTestRun);\n  d('ember-testing/lib/test/waiters', emberTestingLibTestWaiters);\n})(require('@ember/-internals/runtime'), require('@ember/runloop'), require('@ember/-internals/error-handling'), require('@ember/object'), require('@ember/debug'), require('@ember/application'), require('@ember/routing/-internals'), require('@ember/routing/router'), require('@ember/test'));","(function() {\n  var key = '_embroider_macros_runtime_config';\n  if (!window[key]) {\n    window[key] = [];\n  }\n  window[key].push(function(m) {\n    m.setGlobalConfig(\n      '@embroider/macros',\n      Object.assign({}, m.getGlobalConfig()['@embroider/macros'], { isTesting: true })\n    );\n  });\n})();\n","runningTests = true;\n\nif (typeof Testem !== 'undefined' && (typeof QUnit !== 'undefined' || typeof Mocha !== 'undefined')) {\n  window.Testem.hookIntoTestFramework();\n}\n\n\n"],"names":[],"mappingsxuCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"test-support.js"}